{
  "version": 3,
  "sources": ["../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/XYChartDefaultTheme.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/XYChart.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/XYChartScrollbar.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/Grid.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/XYCursor.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/series/XYSeries.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/series/BaseColumnSeries.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/Axis.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/ValueAxis.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/CategoryAxis.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/CategoryDateAxis.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/DateAxis.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/GaplessDateAxis.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/DurationAxis.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/AxisBullet.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/AxisLabel.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/AxisLabelRadial.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/AxisTick.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/AxisRenderer.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/AxisRendererX.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/axes/AxisRendererY.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/series/Candlestick.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/series/ColumnSeries.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/series/CandlestickSeries.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/series/OHLC.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/series/OHLCSeries.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/series/LineSeries.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/core/render/MonotoneYTension.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/series/SmoothedYLineSeries.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/core/render/MonotoneXTension.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/series/SmoothedXLineSeries.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/series/SmoothedXYLineSeries.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/charts/xy/series/StepLineSeries.js"],
  "sourcesContent": ["import { Theme } from \"../../core/Theme\";\nimport { percent, p50, p100 } from \"../../core/util/Percent\";\nimport { Color } from \"../../core/util/Color\";\nimport { ColorSet } from \"../../core/util/ColorSet\";\nimport { setColor } from \"../../themes/DefaultTheme\";\nimport * as $time from \"../../core/util/Time\";\nimport * as $type from \"../../core/util/Type\";\nimport * as $math from \"../../core/util/Math\";\nimport * as $object from \"../../core/util/Object\";\nimport * as $array from \"../../core/util/Array\";\n/**\r\n * @ignore\r\n */\nexport class XYChartDefaultTheme extends Theme {\n  setupDefaultRules() {\n    super.setupDefaultRules();\n    const ic = this._root.interfaceColors;\n    const language = this._root.language;\n    const r = this.rule.bind(this);\n    /**\r\n     * ========================================================================\r\n     * charts/xy\r\n     * ========================================================================\r\n     */\n    r(\"XYChart\").setAll({\n      colors: ColorSet.new(this._root, {}),\n      paddingLeft: 20,\n      paddingRight: 20,\n      paddingTop: 16,\n      paddingBottom: 16,\n      panX: false,\n      panY: false,\n      wheelStep: 0.25,\n      arrangeTooltips: true,\n      pinchZoomX: false,\n      pinchZoomY: false\n    });\n    r(\"XYSeries\").setAll({\n      legendLabelText: \"{name}\"\n    });\n    r(\"Rectangle\", [\"plotbackground\", \"xy\", \"background\"]).setAll({\n      fill: Color.fromHex(0x000000),\n      fillOpacity: 0\n    });\n    /**\r\n     * ------------------------------------------------------------------------\r\n     * charts/xy: XYChartScrollbar\r\n     * ------------------------------------------------------------------------\r\n     */\n    r(\"XYChart\", [\"scrollbar\", \"chart\"]).setAll({\n      paddingBottom: 0,\n      paddingLeft: 0,\n      paddingTop: 0,\n      paddingRight: 0,\n      colors: ColorSet.new(this._root, {\n        saturation: 0\n      })\n    });\n    {\n      const rule = r(\"Graphics\", [\"scrollbar\", \"overlay\"]);\n      rule.setAll({\n        fillOpacity: 0.5\n      });\n      setColor(rule, \"fill\", ic, \"background\");\n    }\n    // Class: RoundedRectangle\n    r(\"RoundedRectangle\", [\"xy\", \"scrollbar\", \"thumb\"]).setAll({\n      cornerRadiusTR: 0,\n      cornerRadiusTL: 0,\n      cornerRadiusBR: 0,\n      cornerRadiusBL: 0,\n      fillOpacity: 0,\n      focusable: true\n    });\n    r(\"RoundedRectangle\", [\"xy\", \"scrollbar\", \"thumb\"]).states.create(\"hover\", {\n      fillOpacity: 0.4\n    });\n    r(\"RoundedRectangle\", [\"xy\", \"scrollbar\", \"chart\", \"background\"]).setAll({\n      cornerRadiusTL: 0,\n      cornerRadiusBL: 0,\n      cornerRadiusTR: 0,\n      cornerRadiusBR: 0\n    });\n    r(\"RoundedRectangle\", [\"xy\", \"scrollbar\", \"chart\", \"background\", \"resize\", \"button\"]).setAll({\n      cornerRadiusBL: 40,\n      cornerRadiusBR: 40,\n      cornerRadiusTL: 40,\n      cornerRadiusTR: 40\n    });\n    r(\"AxisRendererX\", [\"xy\", \"chart\", \"scrollbar\"]).setAll({\n      strokeOpacity: 0,\n      inside: true\n    });\n    r(\"AxisRendererY\", [\"xy\", \"chart\", \"scrollbar\"]).setAll({\n      strokeOpacity: 0,\n      inside: true,\n      minGridDistance: 5\n    });\n    r(\"AxisLabel\", [\"xy\", \"scrollbar\", \"x\"]).setAll({\n      opacity: 0.5,\n      centerY: p100,\n      minPosition: 0.01,\n      maxPosition: 0.99,\n      fontSize: \"0.8em\"\n    });\n    r(\"AxisLabel\", [\"category\"]).setAll({\n      text: \"{category}\",\n      populateText: true\n    });\n    r(\"AxisLabel\", [\"x\"]).setAll({\n      centerY: 0\n    });\n    r(\"AxisLabel\", [\"x\", \"inside\"]).setAll({\n      centerY: p100\n    });\n    r(\"AxisLabel\", [\"x\", \"inside\", \"opposite\"]).setAll({\n      centerY: 0\n    });\n    r(\"AxisLabel\", [\"x\", \"opposite\"]).setAll({\n      centerY: p100\n    });\n    r(\"AxisLabel\", [\"y\"]).setAll({\n      centerX: p100\n    });\n    r(\"AxisLabel\", [\"y\", \"inside\"]).setAll({\n      centerX: 0\n    });\n    r(\"AxisLabel\", [\"y\", \"inside\", \"opposite\"]).setAll({\n      centerX: p100\n    });\n    r(\"AxisLabel\", [\"y\", \"opposite\"]).setAll({\n      centerX: 0\n    });\n    r(\"AxisLabel\", [\"minor\"]).setAll({\n      fontSize: \"0.6em\"\n    });\n    r(\"AxisLabel\", [\"xy\", \"scrollbar\", \"y\"]).setAll({\n      visible: false\n    });\n    // Class: Grid\n    r(\"Grid\", [\"xy\", \"scrollbar\", \"y\"]).setAll({\n      visible: false\n    });\n    // Class: Grid\n    r(\"Grid\", [\"xy\", \"scrollbar\", \"x\"]).setAll({\n      opacity: 0.5\n    });\n    /**\r\n     * ------------------------------------------------------------------------\r\n     * charts/xy: Cursor\r\n     * ------------------------------------------------------------------------\r\n     */\n    r(\"XYCursor\").setAll({\n      behavior: \"none\",\n      layer: 30,\n      exportable: false,\n      snapToSeriesBy: \"xy\",\n      moveThreshold: 1\n    });\n    {\n      const rule = r(\"Grid\", [\"cursor\", \"x\"]);\n      rule.setAll({\n        forceInactive: true,\n        strokeOpacity: 0.8,\n        strokeDasharray: [2, 2],\n        role: \"slider\",\n        ariaLabel: language.translate(\"Use left and right arrows to move selection\")\n      });\n      setColor(rule, \"stroke\", ic, \"alternativeBackground\");\n    }\n    {\n      const rule = r(\"Grid\", [\"cursor\", \"y\"]);\n      rule.setAll({\n        forceInactive: true,\n        strokeOpacity: 0.8,\n        strokeDasharray: [2, 2],\n        role: \"slider\",\n        ariaLabel: language.translate(\"Use up and down arrows to move selection\")\n      });\n      setColor(rule, \"stroke\", ic, \"alternativeBackground\");\n    }\n    {\n      const rule = r(\"Graphics\", [\"cursor\", \"selection\"]);\n      rule.setAll({\n        fillOpacity: 0.15\n      });\n      setColor(rule, \"fill\", ic, \"alternativeBackground\");\n    }\n    /**\r\n     * ------------------------------------------------------------------------\r\n     * charts/xy: Axes\r\n     * ------------------------------------------------------------------------\r\n     */\n    r(\"Axis\").setAll({\n      start: 0,\n      end: 1,\n      minZoomCount: 1,\n      maxZoomCount: Infinity,\n      maxZoomFactor: 1000,\n      maxDeviation: 0.1,\n      snapTooltip: true,\n      tooltipLocation: 0.5,\n      panX: true,\n      panY: true,\n      zoomX: true,\n      zoomY: true,\n      fixAxisSize: true\n    });\n    r(\"AxisLabel\").setAll({\n      location: 0.5,\n      multiLocation: 0,\n      centerX: p50,\n      centerY: p50,\n      paddingTop: 3,\n      paddingBottom: 3,\n      paddingLeft: 5,\n      paddingRight: 5\n    });\n    // The following is deprecated following text measuring updates in 5.0.5\n    // r(\"AxisLabel\", [\"y\"]).setAll({\n    // \ttextAlign: \"right\"\n    // });\n    // r(\"AxisLabel\", [\"y\", \"opposite\"]).setAll({\n    // \ttextAlign: \"left\"\n    // });\n    r(\"Container\", [\"axis\", \"header\"]).setAll({\n      layer: 30\n    });\n    r(\"Rectangle\", [\"axis\", \"header\", \"background\"]).setAll({\n      crisp: true\n    });\n    {\n      const rule = r(\"AxisRenderer\");\n      rule.setAll({\n        crisp: true,\n        strokeOpacity: 0\n      });\n      setColor(rule, \"stroke\", ic, \"grid\");\n    }\n    r(\"AxisRendererX\").setAll({\n      minGridDistance: 120,\n      opposite: false,\n      inversed: false,\n      cellStartLocation: 0,\n      cellEndLocation: 1,\n      width: p100\n    });\n    r(\"AxisRendererY\").setAll({\n      minGridDistance: 40,\n      opposite: false,\n      inversed: false,\n      cellStartLocation: 0,\n      cellEndLocation: 1,\n      height: p100\n    });\n    {\n      const rule = r(\"Rectangle\", [\"axis\", \"thumb\"]);\n      rule.setAll({\n        fillOpacity: 0\n      });\n      setColor(rule, \"fill\", ic, \"alternativeBackground\");\n      rule.states.create(\"hover\", {\n        fillOpacity: 0.1\n      });\n    }\n    r(\"Rectangle\", [\"axis\", \"thumb\", \"x\"]).setAll({\n      cursorOverStyle: \"ew-resize\"\n    });\n    r(\"Rectangle\", [\"axis\", \"thumb\", \"y\"]).setAll({\n      cursorOverStyle: \"ns-resize\"\n    });\n    {\n      const rule = r(\"Grid\");\n      rule.setAll({\n        location: 0,\n        strokeOpacity: 0.15,\n        crisp: true\n      });\n      setColor(rule, \"stroke\", ic, \"grid\");\n    }\n    {\n      const rule = r(\"Grid\", [\"minor\"]);\n      rule.setAll({\n        location: 0,\n        strokeOpacity: 0.07,\n        crisp: true\n      });\n      setColor(rule, \"stroke\", ic, \"grid\");\n    }\n    r(\"Grid\", [\"base\"]).setAll({\n      strokeOpacity: 0.3\n    });\n    {\n      const rule = r(\"Graphics\", [\"axis\", \"fill\"]);\n      rule.setAll({\n        visible: false,\n        isMeasured: false,\n        position: \"absolute\",\n        fillOpacity: 0.05\n      });\n      setColor(rule, \"fill\", ic, \"alternativeBackground\");\n    }\n    r(\"Graphics\", [\"axis\", \"fill\", \"range\"]).setAll({\n      isMeasured: true\n    });\n    // hides all elements of series axis range\n    r(\"Graphics\", [\"series\", \"fill\", \"range\"]).setAll({\n      visible: false,\n      isMeasured: true\n    });\n    r(\"Grid\", [\"series\", \"range\"]).setAll({\n      visible: false\n    });\n    r(\"AxisTick\", [\"series\", \"range\"]).setAll({\n      visible: false\n    });\n    r(\"AxisLabel\", [\"series\", \"range\"]).setAll({\n      visible: false\n    });\n    {\n      const rule = r(\"AxisTick\");\n      rule.setAll({\n        location: 0.5,\n        multiLocation: 0,\n        strokeOpacity: 1,\n        isMeasured: false,\n        position: \"absolute\",\n        visible: false\n      });\n      setColor(rule, \"stroke\", ic, \"grid\");\n    }\n    r(\"CategoryAxis\").setAll({\n      startLocation: 0,\n      endLocation: 1,\n      fillRule: (dataItem, index) => {\n        const axisFill = dataItem.get(\"axisFill\");\n        if (axisFill) {\n          if (!$type.isNumber(index) || index % 2 == 0) {\n            axisFill.setPrivate(\"visible\", true);\n          } else {\n            axisFill.setPrivate(\"visible\", false);\n          }\n        }\n      }\n    });\n    const gridIntervals = [{\n      timeUnit: \"millisecond\",\n      count: 1\n    }, {\n      timeUnit: \"millisecond\",\n      count: 5\n    }, {\n      timeUnit: \"millisecond\",\n      count: 10\n    }, {\n      timeUnit: \"millisecond\",\n      count: 50\n    }, {\n      timeUnit: \"millisecond\",\n      count: 100\n    }, {\n      timeUnit: \"millisecond\",\n      count: 500\n    }, {\n      timeUnit: \"second\",\n      count: 1\n    }, {\n      timeUnit: \"second\",\n      count: 5\n    }, {\n      timeUnit: \"second\",\n      count: 10\n    }, {\n      timeUnit: \"second\",\n      count: 30\n    }, {\n      timeUnit: \"minute\",\n      count: 1\n    }, {\n      timeUnit: \"minute\",\n      count: 5\n    }, {\n      timeUnit: \"minute\",\n      count: 10\n    }, {\n      timeUnit: \"minute\",\n      count: 15\n    }, {\n      timeUnit: \"minute\",\n      count: 30\n    }, {\n      timeUnit: \"hour\",\n      count: 1\n    }, {\n      timeUnit: \"hour\",\n      count: 3\n    }, {\n      timeUnit: \"hour\",\n      count: 6\n    }, {\n      timeUnit: \"hour\",\n      count: 12\n    }, {\n      timeUnit: \"day\",\n      count: 1\n    }, {\n      timeUnit: \"day\",\n      count: 2\n    }, {\n      timeUnit: \"day\",\n      count: 3\n    }, {\n      timeUnit: \"day\",\n      count: 4\n    }, {\n      timeUnit: \"day\",\n      count: 5\n    }, {\n      timeUnit: \"week\",\n      count: 1\n    }, {\n      timeUnit: \"month\",\n      count: 1\n    }, {\n      timeUnit: \"month\",\n      count: 2\n    }, {\n      timeUnit: \"month\",\n      count: 3\n    }, {\n      timeUnit: \"month\",\n      count: 6\n    }, {\n      timeUnit: \"year\",\n      count: 1\n    }, {\n      timeUnit: \"year\",\n      count: 2\n    }, {\n      timeUnit: \"year\",\n      count: 5\n    }, {\n      timeUnit: \"year\",\n      count: 10\n    }, {\n      timeUnit: \"year\",\n      count: 50\n    }, {\n      timeUnit: \"year\",\n      count: 100\n    }, {\n      timeUnit: \"year\",\n      count: 200\n    }, {\n      timeUnit: \"year\",\n      count: 500\n    }, {\n      timeUnit: \"year\",\n      count: 1000\n    }, {\n      timeUnit: \"year\",\n      count: 2000\n    }, {\n      timeUnit: \"year\",\n      count: 5000\n    }, {\n      timeUnit: \"year\",\n      count: 10000\n    }, {\n      timeUnit: \"year\",\n      count: 100000\n    }];\n    const dateFormats = {\n      \"millisecond\": language.translate(\"_date_millisecond\"),\n      \"second\": language.translate(\"_date_second\"),\n      \"minute\": language.translate(\"_date_minute\"),\n      \"hour\": language.translate(\"_date_hour\"),\n      \"day\": language.translate(\"_date_day\"),\n      \"week\": language.translate(\"_date_day\"),\n      \"month\": language.translate(\"_date_month\"),\n      \"year\": language.translate(\"_date_year\")\n    };\n    const periodChangeDateFormats = {\n      \"millisecond\": language.translate(\"_date_millisecond\"),\n      \"second\": language.translate(\"_date_second\"),\n      \"minute\": language.translate(\"_date_minute\"),\n      \"hour\": language.translate(\"_date_day\"),\n      \"day\": language.translate(\"_date_day\"),\n      \"week\": language.translate(\"_date_day\"),\n      \"month\": language.translate(\"_date_month\") + \" \" + language.translate(\"_date_year\"),\n      \"year\": language.translate(\"_date_year\")\n    };\n    const tooltipDateFormats = {\n      \"millisecond\": language.translate(\"_date_millisecond_full\"),\n      \"second\": language.translate(\"_date_second_full\"),\n      \"minute\": language.translate(\"_date_minute_full\"),\n      \"hour\": language.translate(\"_date_hour_full\"),\n      \"day\": language.translate(\"_date_day_full\"),\n      \"week\": language.translate(\"_date_week_full\"),\n      \"month\": language.translate(\"_date_month_full\"),\n      \"year\": language.translate(\"_date_year\")\n    };\n    r(\"CategoryDateAxis\").setAll({\n      markUnitChange: true,\n      gridIntervals: $array.copy(gridIntervals),\n      dateFormats: $object.copy(dateFormats),\n      periodChangeDateFormats: $object.copy(periodChangeDateFormats)\n    });\n    r(\"DateAxis\").setAll({\n      maxZoomFactor: null,\n      strictMinMax: true,\n      startLocation: 0,\n      endLocation: 1,\n      markUnitChange: true,\n      groupData: false,\n      groupCount: 500,\n      gridIntervals: $array.copy(gridIntervals),\n      dateFormats: $object.copy(dateFormats),\n      periodChangeDateFormats: $object.copy(periodChangeDateFormats),\n      tooltipDateFormats: tooltipDateFormats,\n      groupIntervals: [{\n        timeUnit: \"millisecond\",\n        count: 1\n      }, {\n        timeUnit: \"millisecond\",\n        count: 10\n      }, {\n        timeUnit: \"millisecond\",\n        count: 100\n      }, {\n        timeUnit: \"second\",\n        count: 1\n      }, {\n        timeUnit: \"second\",\n        count: 10\n      }, {\n        timeUnit: \"minute\",\n        count: 1\n      }, {\n        timeUnit: \"minute\",\n        count: 10\n      }, {\n        timeUnit: \"hour\",\n        count: 1\n      }, {\n        timeUnit: \"day\",\n        count: 1\n      }, {\n        timeUnit: \"week\",\n        count: 1\n      }, {\n        timeUnit: \"month\",\n        count: 1\n      }, {\n        timeUnit: \"year\",\n        count: 1\n      }],\n      fillRule: dataItem => {\n        const axisFill = dataItem.get(\"axisFill\");\n        if (axisFill) {\n          const axis = dataItem.component;\n          const value = dataItem.get(\"value\");\n          const endValue = dataItem.get(\"endValue\");\n          const intervalDuration = axis.intervalDuration();\n          const baseInterval = axis.getPrivate(\"baseInterval\");\n          const gridInterval = axis.getPrivate(\"gridInterval\", baseInterval);\n          let min = axis.getPrivate(\"min\", 0);\n          min = $time.round(new Date(min), gridInterval.timeUnit, gridInterval.count, this._root.locale.firstDayOfWeek, this._root.utc, undefined, this._root.timezone).getTime();\n          if (value != null && endValue != null) {\n            const val = Math.round(Math.round((value - min) / intervalDuration)) / 2;\n            if (val == Math.round(val)) {\n              axisFill.setPrivate(\"visible\", true);\n            } else {\n              axisFill.setPrivate(\"visible\", false);\n            }\n          }\n        }\n      }\n    });\n    r(\"GaplessDateAxis\").setAll({\n      fillRule: dataItem => {\n        const axisFill = dataItem.get(\"axisFill\");\n        if (axisFill) {\n          const index = dataItem.get(\"index\");\n          let visible = false;\n          if (!$type.isNumber(index) || index % 2 == 0) {\n            visible = true;\n          }\n          axisFill.setPrivate(\"visible\", visible);\n        }\n      }\n    });\n    r(\"ValueAxis\").setAll({\n      baseValue: 0,\n      logarithmic: false,\n      strictMinMax: false,\n      autoZoom: true,\n      fillRule: dataItem => {\n        const axisFill = dataItem.get(\"axisFill\");\n        if (axisFill) {\n          const axis = dataItem.component;\n          const value = dataItem.get(\"value\");\n          const step = axis.getPrivate(\"step\");\n          if ($type.isNumber(value) && $type.isNumber(step)) {\n            if ($math.round(value / step / 2, 5) == Math.round(value / step / 2)) {\n              axisFill.setPrivate(\"visible\", false);\n            } else {\n              axisFill.setPrivate(\"visible\", true);\n            }\n          }\n        }\n      }\n    });\n    r(\"DurationAxis\").setAll({\n      baseUnit: \"second\"\n    });\n    /**\r\n     * ------------------------------------------------------------------------\r\n     * charts/xy: Series\r\n     * ------------------------------------------------------------------------\r\n     */\n    r(\"XYSeries\").setAll({\n      maskBullets: true,\n      stackToNegative: true,\n      locationX: 0.5,\n      locationY: 0.5,\n      snapTooltip: false,\n      openValueXGrouped: \"open\",\n      openValueYGrouped: \"open\",\n      valueXGrouped: \"close\",\n      valueYGrouped: \"close\",\n      seriesTooltipTarget: \"series\"\n    });\n    r(\"BaseColumnSeries\").setAll({\n      adjustBulletPosition: true\n    });\n    r(\"ColumnSeries\").setAll({\n      clustered: true\n    });\n    r(\"RoundedRectangle\", [\"series\", \"column\"]).setAll({\n      position: \"absolute\",\n      isMeasured: false,\n      width: percent(70),\n      height: percent(70),\n      strokeWidth: 1,\n      strokeOpacity: 1,\n      cornerRadiusBL: 0,\n      cornerRadiusTL: 0,\n      cornerRadiusBR: 0,\n      cornerRadiusTR: 0,\n      fillOpacity: 1,\n      role: \"figure\"\n    });\n    r(\"LineSeries\").setAll({\n      connect: true,\n      autoGapCount: 1.1,\n      stackToNegative: false\n    });\n    r(\"Graphics\", [\"series\", \"stroke\"]).setAll({\n      position: \"absolute\",\n      strokeWidth: 1,\n      strokeOpacity: 1,\n      isMeasured: false\n    });\n    r(\"Graphics\", [\"series\", \"fill\"]).setAll({\n      visible: false,\n      fillOpacity: 0,\n      position: \"absolute\",\n      strokeWidth: 0,\n      strokeOpacity: 0,\n      isMeasured: false\n    });\n    r(\"Graphics\", [\"line\", \"series\", \"legend\", \"marker\", \"stroke\"]).setAll({\n      draw: (display, sprite) => {\n        const parent = sprite.parent;\n        if (parent) {\n          const h = parent.height();\n          const w = parent.width();\n          display.moveTo(0, h / 2);\n          display.lineTo(w, h / 2);\n        }\n      }\n    });\n    {\n      const rule = r(\"Graphics\", [\"line\", \"series\", \"legend\", \"marker\", \"stroke\"]).states.create(\"disabled\", {});\n      setColor(rule, \"stroke\", ic, \"disabled\");\n    }\n    r(\"Graphics\", [\"line\", \"series\", \"legend\", \"marker\", \"fill\"]).setAll({\n      draw: (display, sprite) => {\n        const parent = sprite.parent;\n        if (parent) {\n          const h = parent.height();\n          const w = parent.width();\n          display.moveTo(0, 0);\n          display.lineTo(w, 0);\n          display.lineTo(w, h);\n          display.lineTo(0, h);\n          display.lineTo(0, 0);\n        }\n      }\n    });\n    {\n      const rule = r(\"Graphics\", [\"line\", \"series\", \"legend\", \"marker\", \"fill\"]).states.create(\"disabled\", {});\n      setColor(rule, \"stroke\", ic, \"disabled\");\n    }\n    r(\"SmoothedXYLineSeries\").setAll({\n      tension: 0.5\n    });\n    r(\"SmoothedXLineSeries\").setAll({\n      tension: 0.5\n    });\n    r(\"SmoothedYLineSeries\").setAll({\n      tension: 0.5\n    });\n    r(\"Candlestick\").setAll({\n      position: \"absolute\",\n      isMeasured: false,\n      width: percent(50),\n      height: percent(50),\n      strokeWidth: 1,\n      strokeOpacity: 1,\n      cornerRadiusBL: 0,\n      cornerRadiusTL: 0,\n      cornerRadiusBR: 0,\n      cornerRadiusTR: 0,\n      fillOpacity: 1,\n      role: \"figure\"\n    });\n    r(\"OHLC\").setAll({\n      width: percent(80),\n      height: percent(80)\n    });\n    r(\"CandlestickSeries\").setAll({\n      lowValueXGrouped: \"low\",\n      lowValueYGrouped: \"low\",\n      highValueXGrouped: \"high\",\n      highValueYGrouped: \"high\",\n      openValueXGrouped: \"open\",\n      openValueYGrouped: \"open\",\n      valueXGrouped: \"close\",\n      valueYGrouped: \"close\"\n    });\n    // These rules can be used for regular columns, too\n    {\n      const rule = r(\"Rectangle\", [\"column\", \"autocolor\"]).states.create(\"riseFromOpen\", {});\n      setColor(rule, \"fill\", ic, \"positive\");\n      setColor(rule, \"stroke\", ic, \"positive\");\n    }\n    {\n      const rule = r(\"Rectangle\", [\"column\", \"autocolor\"]).states.create(\"dropFromOpen\", {});\n      setColor(rule, \"fill\", ic, \"negative\");\n      setColor(rule, \"stroke\", ic, \"negative\");\n    }\n    // Hollow\n    r(\"Rectangle\", [\"column\", \"autocolor\", \"pro\"]).states.create(\"riseFromOpen\", {\n      fillOpacity: 0\n    });\n    r(\"Rectangle\", [\"column\", \"autocolor\", \"pro\"]).states.create(\"dropFromOpen\", {\n      fillOpacity: 1\n    });\n    {\n      const rule = r(\"Rectangle\", [\"column\", \"autocolor\", \"pro\"]).states.create(\"riseFromPrevious\", {});\n      setColor(rule, \"fill\", ic, \"positive\");\n      setColor(rule, \"stroke\", ic, \"positive\");\n    }\n    {\n      const rule = r(\"Rectangle\", [\"column\", \"autocolor\", \"pro\"]).states.create(\"dropFromPrevious\", {});\n      setColor(rule, \"fill\", ic, \"negative\");\n      setColor(rule, \"stroke\", ic, \"negative\");\n    }\n    // AXIS RANGE GRIP\n    {\n      const rule = r(\"RoundedRectangle\", [\"rangegrip\"]);\n      rule.setAll({\n        strokeOpacity: 0,\n        fillOpacity: 0,\n        strokeWidth: 1,\n        width: 12,\n        height: 12\n      });\n    }\n    {\n      const rule = r(\"Graphics\", [\"rangegrip\", \"button\", \"icon\"]);\n      rule.setAll({\n        interactive: false,\n        crisp: true,\n        strokeOpacity: 0.5,\n        draw: display => {\n          display.moveTo(0, 0.5);\n          display.lineTo(0, 12.5);\n          display.moveTo(2, 0.5);\n          display.lineTo(2, 12.5);\n          display.moveTo(4, 0.5);\n          display.lineTo(4, 12.5);\n        }\n      });\n      setColor(rule, \"stroke\", ic, \"secondaryButtonText\");\n    }\n    r(\"Button\", [\"rangegrip\"]).setAll({\n      draggable: true,\n      paddingTop: 0,\n      paddingBottom: 0\n    });\n    r(\"Button\", [\"rangegrip\", \"vertical\"]).setAll({\n      rotation: 90,\n      cursorOverStyle: \"ns-resize\",\n      centerX: p50\n    });\n    r(\"Button\", [\"rangegrip\", \"horizontal\"]).setAll({\n      cursorOverStyle: \"ew-resize\",\n      centerX: p50\n    });\n    r(\"Button\", [\"rangegrip\", \"vertical\", \"left\"]).setAll({\n      centerY: p100\n    });\n    r(\"Button\", [\"rangegrip\", \"vertical\", \"right\"]).setAll({\n      centerY: 0\n    });\n    r(\"Button\", [\"rangegrip\", \"horizontal\", \"top\"]).setAll({\n      centerY: 0\n    });\n    r(\"Button\", [\"rangegrip\", \"horizontal\", \"bottom\"]).setAll({\n      centerY: p100\n    });\n  }\n}\n", ";\nimport { XYChartDefaultTheme } from \"./XYChartDefaultTheme\";\nimport { Container } from \"../../core/render/Container\";\nimport { Rectangle } from \"../../core/render/Rectangle\";\nimport { SerialChart } from \"../../core/render/SerialChart\";\nimport { ListAutoDispose } from \"../../core/util/List\";\nimport { p100 } from \"../../core/util/Percent\";\nimport { Button } from \"../../core/render/Button\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { Percent } from \"../../core/util/Percent\";\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\nimport * as $order from \"../../core/util/Order\";\nimport * as $object from \"../../core/util/Object\";\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $math from \"../../core/util/Math\";\n/**\r\n * Creates an XY chart.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/} for more info\r\n * @important\r\n */\nexport class XYChart extends SerialChart {\n  constructor() {\n    super(...arguments);\n    /**\r\n     * A list of horizontal axes.\r\n     */\n    Object.defineProperty(this, \"xAxes\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListAutoDispose()\n    });\n    /**\r\n     * A list of vertical axes.\r\n     */\n    Object.defineProperty(this, \"yAxes\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new ListAutoDispose()\n    });\n    /**\r\n     * A [[Container]] located on top of the chart, used to store top horizontal\r\n     * axes.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"topAxesContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.chartContainer.children.push(Container.new(this._root, {\n        width: p100,\n        layout: this._root.verticalLayout\n      }))\n    });\n    /**\r\n     * A [[Container]] located in the middle the chart, used to store vertical axes\r\n     * and plot area container.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"yAxesAndPlotContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.chartContainer.children.push(Container.new(this._root, {\n        width: p100,\n        height: p100,\n        layout: this._root.horizontalLayout\n      }))\n    });\n    /**\r\n     * A [[Container]] located on bottom of the chart, used to store bottom\r\n     * horizontal axes.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"bottomAxesContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.chartContainer.children.push(Container.new(this._root, {\n        width: p100,\n        layout: this._root.verticalLayout\n      }))\n    });\n    /**\r\n     * A [[Container]] located on left of the chart, used to store left-hand\r\n     * vertical axes.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"leftAxesContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.yAxesAndPlotContainer.children.push(Container.new(this._root, {\n        height: p100,\n        layout: this._root.horizontalLayout\n      }))\n    });\n    /**\r\n     * A [[Container]] located in the middle of the chart, used to store plotContainer and topPlotContainer\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"plotsContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.yAxesAndPlotContainer.children.push(Container.new(this._root, {\n        width: p100,\n        height: p100,\n        maskContent: false\n      }))\n    });\n    /**\r\n     * A [[Container]] located in the middle of the chart, used to store actual\r\n     * plots (series).\r\n     *\r\n     * NOTE: `plotContainer` will automatically have its `background` preset. If\r\n     * you need to modify background or outline for chart's plot area, you can\r\n     * use `plotContainer.get(\"background\")` for that.*\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"plotContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.plotsContainer.children.push(Container.new(this._root, {\n        width: p100,\n        height: p100\n      }))\n    });\n    /**\r\n     * A [[Container]] used for any elements that need to be displayed over\r\n     * regular `plotContainer`.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"topPlotContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.plotsContainer.children.push(Container.new(this._root, {\n        width: p100,\n        height: p100\n      }))\n    });\n    /**\r\n     * A [[Container]] axis grid elements are stored in.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"gridContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.plotContainer.children.push(Container.new(this._root, {\n        width: p100,\n        height: p100,\n        isMeasured: false\n      }))\n    });\n    /**\r\n     * A [[Container]] axis background grid elements are stored in.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"topGridContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: Container.new(this._root, {\n        width: p100,\n        height: p100,\n        isMeasured: false\n      })\n    });\n    /**\r\n     * A [[Container]] located on right of the chart, used to store right-hand\r\n     * vertical axes.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/xy-chart-containers/} for more info\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"rightAxesContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.yAxesAndPlotContainer.children.push(Container.new(this._root, {\n        height: p100,\n        layout: this._root.horizontalLayout\n      }))\n    });\n    /**\r\n     * A [[Container]] axis headers are stored in.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-headers/} for more info\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"axisHeadersContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.plotContainer.children.push(Container.new(this._root, {}))\n    });\n    /**\r\n     * A button that is shown when chart is not fully zoomed out.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/zoom-and-pan/#Zoom_out_button} for more info\r\n     * @default Button.new()\r\n     */\n    Object.defineProperty(this, \"zoomOutButton\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.topPlotContainer.children.push(Button.new(this._root, {\n        themeTags: [\"zoom\"],\n        icon: Graphics.new(this._root, {\n          themeTags: [\"button\", \"icon\"]\n        })\n      }))\n    });\n    Object.defineProperty(this, \"_movePoint\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {\n        x: 0,\n        y: 0\n      }\n    });\n    Object.defineProperty(this, \"_wheelDp\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_otherCharts\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_movePoints\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_downStartX\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_downEndX\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_downStartY\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_downEndY\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n  }\n  _afterNew() {\n    this._defaultThemes.push(XYChartDefaultTheme.new(this._root));\n    super._afterNew();\n    this._disposers.push(this.xAxes);\n    this._disposers.push(this.yAxes);\n    const root = this._root;\n    let verticalLayout = this._root.verticalLayout;\n    const zoomOutButton = this.zoomOutButton;\n    zoomOutButton.events.on(\"click\", () => {\n      this.zoomOut();\n    });\n    zoomOutButton.hide(0);\n    zoomOutButton.states.lookup(\"default\").set(\"opacity\", 1);\n    this.chartContainer.set(\"layout\", verticalLayout);\n    const plotContainer = this.plotContainer;\n    plotContainer.children.push(this.seriesContainer);\n    this._disposers.push(this._processAxis(this.xAxes, this.bottomAxesContainer));\n    this._disposers.push(this._processAxis(this.yAxes, this.leftAxesContainer));\n    plotContainer.children.push(this.topGridContainer);\n    plotContainer.children.push(this.bulletsContainer);\n    // Setting trasnparent background so that full body of the plot container\n    // is interactive\n    plotContainer.set(\"interactive\", true);\n    plotContainer.set(\"interactiveChildren\", false);\n    plotContainer.set(\"background\", Rectangle.new(root, {\n      themeTags: [\"plotbackground\", \"xy\", \"background\"]\n    }));\n    this._disposers.push(plotContainer.events.on(\"pointerdown\", event => {\n      this._handlePlotDown(event);\n    }));\n    this._disposers.push(plotContainer.events.on(\"globalpointerup\", event => {\n      this._handlePlotUp(event);\n    }));\n    this._disposers.push(plotContainer.events.on(\"globalpointermove\", event => {\n      this._handlePlotMove(event);\n    }));\n    this._maskGrid();\n    this._setUpTouch();\n  }\n  _beforeChanged() {\n    super._beforeChanged();\n    if (this.isDirty(\"pinchZoomX\") || this.isDirty(\"pinchZoomY\") || this.get(\"panX\") || this.get(\"panY\")) {\n      this._setUpTouch();\n    }\n  }\n  _setUpTouch() {\n    if (!this.plotContainer._display.cancelTouch) {\n      this.plotContainer._display.cancelTouch = this.get(\"pinchZoomX\") || this.get(\"pinchZoomY\") || this.get(\"panX\") || this.get(\"panY\") ? true : false;\n    }\n  }\n  _maskGrid() {\n    this.gridContainer.set(\"maskContent\", true);\n    this.topGridContainer.set(\"maskContent\", true);\n  }\n  _removeSeries(series) {\n    series._unstack();\n    if (series._posXDp) {\n      series._posXDp.dispose();\n    }\n    if (series._posYDp) {\n      series._posYDp.dispose();\n    }\n    series.set(\"baseAxis\", undefined);\n    const xAxis = series.get(\"xAxis\");\n    if (xAxis) {\n      $array.remove(xAxis.series, series);\n      xAxis.markDirtyExtremes();\n    }\n    const yAxis = series.get(\"yAxis\");\n    if (yAxis) {\n      $array.remove(yAxis.series, series);\n      yAxis.markDirtyExtremes();\n    }\n    const cursor = this.get(\"cursor\");\n    if (cursor) {\n      const snapToSeries = cursor.get(\"snapToSeries\");\n      if (snapToSeries) {\n        $array.remove(snapToSeries, series);\n      }\n    }\n    super._removeSeries(series);\n  }\n  /**\r\n   * This method is invoked when mouse wheel is used over chart's plot\r\n   * container, and handles zooming/pan.\r\n   *\r\n   * You can invoke this method manually, if you need to mimic chart's wheel\r\n   * behavior over other elements of the chart.\r\n   */\n  handleWheel(event) {\n    const wheelX = this.get(\"wheelX\");\n    const wheelY = this.get(\"wheelY\");\n    const plotContainer = this.plotContainer;\n    const wheelEvent = event.originalEvent;\n    // Ignore wheel event if it is happening on a non-chart element, e.g. if\n    // some page element is over the chart.\n    let prevent = false;\n    if ($utils.isLocalEvent(wheelEvent, this)) {\n      prevent = true;\n    } else {\n      return;\n    }\n    const plotPoint = plotContainer.toLocal(event.point);\n    const wheelStep = this.get(\"wheelStep\", 0.2);\n    const shiftY = wheelEvent.deltaY / 100;\n    const shiftX = wheelEvent.deltaX / 100;\n    const wheelZoomPositionX = this.get(\"wheelZoomPositionX\");\n    const wheelZoomPositionY = this.get(\"wheelZoomPositionY\");\n    if ((wheelX === \"zoomX\" || wheelX === \"zoomXY\") && shiftX != 0) {\n      this.xAxes.each(axis => {\n        if (axis.get(\"zoomX\")) {\n          let start = axis.get(\"start\");\n          let end = axis.get(\"end\");\n          let position = axis.fixPosition(plotPoint.x / plotContainer.width());\n          if (wheelZoomPositionX != null) {\n            position = wheelZoomPositionX;\n          }\n          let maxDeviation = axis.get(\"maxDeviation\", 0);\n          let newStart = Math.min(1 + maxDeviation, Math.max(-maxDeviation, start - wheelStep * (end - start) * shiftX * position));\n          let newEnd = Math.max(-maxDeviation, Math.min(1 + maxDeviation, end + wheelStep * (end - start) * shiftX * (1 - position)));\n          if (newStart == start && newEnd == end) {\n            prevent = false;\n          }\n          if (1 / (newEnd - newStart) < axis.getPrivate(\"maxZoomFactor\", Infinity) / axis.get(\"minZoomCount\", 1)) {\n            this._handleWheelAnimation(axis.zoom(newStart, newEnd));\n          } else {\n            prevent = false;\n          }\n        }\n      });\n    }\n    if ((wheelY === \"zoomX\" || wheelY === \"zoomXY\") && shiftY != 0) {\n      this.xAxes.each(axis => {\n        if (axis.get(\"zoomX\")) {\n          let start = axis.get(\"start\");\n          let end = axis.get(\"end\");\n          let position = axis.fixPosition(plotPoint.x / plotContainer.width());\n          if (wheelZoomPositionX != null) {\n            position = wheelZoomPositionX;\n          }\n          let maxDeviation = axis.get(\"maxDeviation\", 0);\n          let newStart = Math.min(1 + maxDeviation, Math.max(-maxDeviation, start - wheelStep * (end - start) * shiftY * position));\n          let newEnd = Math.max(-maxDeviation, Math.min(1 + maxDeviation, end + wheelStep * (end - start) * shiftY * (1 - position)));\n          if (newStart == start && newEnd == end) {\n            prevent = false;\n          }\n          if (1 / (newEnd - newStart) < axis.getPrivate(\"maxZoomFactor\", Infinity) / axis.get(\"minZoomCount\", 1)) {\n            this._handleWheelAnimation(axis.zoom(newStart, newEnd));\n          } else {\n            prevent = false;\n          }\n        }\n      });\n    }\n    if ((wheelX === \"zoomY\" || wheelX === \"zoomXY\") && shiftX != 0) {\n      this.yAxes.each(axis => {\n        if (axis.get(\"zoomY\")) {\n          let start = axis.get(\"start\");\n          let end = axis.get(\"end\");\n          let position = axis.fixPosition(plotPoint.y / plotContainer.height());\n          if (wheelZoomPositionY != null) {\n            position = wheelZoomPositionY;\n          }\n          let maxDeviation = axis.get(\"maxDeviation\", 0);\n          let newStart = Math.min(1 + maxDeviation, Math.max(-maxDeviation, start - wheelStep * (end - start) * shiftX * position));\n          let newEnd = Math.max(-maxDeviation, Math.min(1 + maxDeviation, end + wheelStep * (end - start) * shiftX * (1 - position)));\n          if (newStart == start && newEnd == end) {\n            prevent = false;\n          }\n          if (1 / (newEnd - newStart) < axis.getPrivate(\"maxZoomFactor\", Infinity) / axis.get(\"minZoomCount\", 1)) {\n            this._handleWheelAnimation(axis.zoom(newStart, newEnd));\n          } else {\n            prevent = false;\n          }\n        }\n      });\n    }\n    if ((wheelY === \"zoomY\" || wheelY === \"zoomXY\") && shiftY != 0) {\n      this.yAxes.each(axis => {\n        if (axis.get(\"zoomY\")) {\n          let start = axis.get(\"start\");\n          let end = axis.get(\"end\");\n          let position = axis.fixPosition(plotPoint.y / plotContainer.height());\n          if (wheelZoomPositionY != null) {\n            position = wheelZoomPositionY;\n          }\n          let maxDeviation = axis.get(\"maxDeviation\", 0);\n          let newStart = Math.min(1 + maxDeviation, Math.max(-maxDeviation, start - wheelStep * (end - start) * shiftY * position));\n          let newEnd = Math.max(-maxDeviation, Math.min(1 + maxDeviation, end + wheelStep * (end - start) * shiftY * (1 - position)));\n          if (newStart == start && newEnd == end) {\n            prevent = false;\n          }\n          if (1 / (newEnd - newStart) < axis.getPrivate(\"maxZoomFactor\", Infinity) / axis.get(\"minZoomCount\", 1)) {\n            this._handleWheelAnimation(axis.zoom(newStart, newEnd));\n          } else {\n            prevent = false;\n          }\n        }\n      });\n    }\n    if ((wheelX === \"panX\" || wheelX === \"panXY\") && shiftX != 0) {\n      this.xAxes.each(axis => {\n        if (axis.get(\"panX\")) {\n          let start = axis.get(\"start\");\n          let end = axis.get(\"end\");\n          let delta = this._getWheelSign(axis) * wheelStep * (end - start) * shiftX;\n          let newStart = start + delta;\n          let newEnd = end + delta;\n          let se = this._fixWheel(newStart, newEnd);\n          newStart = se[0];\n          newEnd = se[1];\n          if (newStart == start && newEnd == end) {\n            prevent = false;\n          }\n          this._handleWheelAnimation(axis.zoom(newStart, newEnd));\n        }\n      });\n    }\n    if ((wheelY === \"panX\" || wheelY === \"panXY\") && shiftY != 0) {\n      this.xAxes.each(axis => {\n        if (axis.get(\"panX\")) {\n          let start = axis.get(\"start\");\n          let end = axis.get(\"end\");\n          let delta = this._getWheelSign(axis) * wheelStep * (end - start) * shiftY;\n          let newStart = start + delta;\n          let newEnd = end + delta;\n          let se = this._fixWheel(newStart, newEnd);\n          newStart = se[0];\n          newEnd = se[1];\n          if (newStart == start && newEnd == end) {\n            prevent = false;\n          }\n          this._handleWheelAnimation(axis.zoom(newStart, newEnd));\n        }\n      });\n    }\n    if ((wheelX === \"panY\" || wheelX === \"panXY\") && shiftX != 0) {\n      this.yAxes.each(axis => {\n        if (axis.get(\"panY\")) {\n          let start = axis.get(\"start\");\n          let end = axis.get(\"end\");\n          let delta = this._getWheelSign(axis) * wheelStep * (end - start) * shiftX;\n          let newStart = start + delta;\n          let newEnd = end + delta;\n          let se = this._fixWheel(newStart, newEnd);\n          newStart = se[0];\n          newEnd = se[1];\n          if (newStart == start && newEnd == end) {\n            prevent = false;\n          }\n          this._handleWheelAnimation(axis.zoom(newStart, newEnd));\n        }\n      });\n    }\n    if ((wheelY === \"panY\" || wheelY === \"panXY\") && shiftY != 0) {\n      this.yAxes.each(axis => {\n        if (axis.get(\"panY\")) {\n          let start = axis.get(\"start\");\n          let end = axis.get(\"end\");\n          let delta = this._getWheelSign(axis) * wheelStep * (end - start) * shiftY;\n          let newStart = start - delta;\n          let newEnd = end - delta;\n          let se = this._fixWheel(newStart, newEnd);\n          newStart = se[0];\n          newEnd = se[1];\n          if (newStart == start && newEnd == end) {\n            prevent = false;\n          }\n          this._handleWheelAnimation(axis.zoom(newStart, newEnd));\n        }\n      });\n    }\n    if (prevent) {\n      wheelEvent.preventDefault();\n    }\n  }\n  _handleSetWheel() {\n    const wheelX = this.get(\"wheelX\");\n    const wheelY = this.get(\"wheelY\");\n    const plotContainer = this.plotContainer;\n    if (wheelX !== \"none\" || wheelY !== \"none\") {\n      this._wheelDp = plotContainer.events.on(\"wheel\", event => {\n        const wheelEvent = event.originalEvent;\n        if (wheelX !== \"none\" && Math.abs(wheelEvent.deltaX) != 0 || wheelY !== \"none\" && Math.abs(wheelEvent.deltaY) != 0) {\n          this.handleWheel(event);\n        }\n      });\n      this._disposers.push(this._wheelDp);\n    } else {\n      if (this._wheelDp) {\n        this._wheelDp.dispose();\n      }\n    }\n  }\n  _getWheelSign(axis) {\n    let sign = 1;\n    if (axis.get(\"renderer\").get(\"inversed\")) {\n      sign = -1;\n    }\n    return sign;\n  }\n  _fixWheel(start, end) {\n    const diff = end - start;\n    if (start < 0) {\n      start = 0;\n      end = start + diff;\n    }\n    if (end > 1) {\n      end = 1;\n      start = end - diff;\n    }\n    return [start, end];\n  }\n  _handlePlotDown(event) {\n    const originalEvent = event.originalEvent;\n    if (originalEvent.button == 2) {\n      return;\n    }\n    const plotContainer = this.plotContainer;\n    let local = plotContainer.toLocal(event.point);\n    if (this.get(\"pinchZoomX\") || this.get(\"pinchZoomY\")) {\n      const pointerId = originalEvent.pointerId;\n      if (pointerId) {\n        if ($object.keys(plotContainer._downPoints).length > 0) {\n          const xAxis = this.xAxes.getIndex(0);\n          const yAxis = this.yAxes.getIndex(0);\n          if (xAxis) {\n            this._downStartX = xAxis.get(\"start\", 0);\n            this._downEndX = xAxis.get(\"end\", 1);\n          }\n          if (yAxis) {\n            this._downStartY = yAxis.get(\"start\", 0);\n            this._downEndY = yAxis.get(\"end\", 1);\n          }\n        }\n      }\n    }\n    if (this.get(\"panX\") || this.get(\"panY\")) {\n      if (local.x >= 0 && local.y >= 0 && local.x <= plotContainer.width() && local.y <= this.height()) {\n        //this._downPoint = local;\n        this._downPoint = {\n          x: originalEvent.clientX,\n          y: originalEvent.clientY\n        };\n        const panX = this.get(\"panX\");\n        const panY = this.get(\"panY\");\n        if (panX) {\n          this.xAxes.each(axis => {\n            axis._panStart = axis.get(\"start\");\n            axis._panEnd = axis.get(\"end\");\n          });\n        }\n        if (panY) {\n          this.yAxes.each(axis => {\n            axis._panStart = axis.get(\"start\");\n            axis._panEnd = axis.get(\"end\");\n          });\n        }\n        const eventType = \"panstarted\";\n        if (this.events.isEnabled(eventType)) {\n          this.events.dispatch(eventType, {\n            type: eventType,\n            target: this,\n            originalEvent: event.originalEvent\n          });\n        }\n      }\n    }\n  }\n  _handleWheelAnimation(animation) {\n    if (animation) {\n      animation.events.on(\"stopped\", () => {\n        this._dispatchWheelAnimation();\n      });\n    } else {\n      this._dispatchWheelAnimation();\n    }\n  }\n  _dispatchWheelAnimation() {\n    const eventType = \"wheelended\";\n    if (this.events.isEnabled(eventType)) {\n      this.events.dispatch(eventType, {\n        type: eventType,\n        target: this\n      });\n    }\n  }\n  _handlePlotUp(event) {\n    const downPoint = this._downPoint;\n    if (downPoint) {\n      if (this.get(\"panX\") || this.get(\"panY\")) {\n        if (event.originalEvent.clientX == downPoint.x && event.originalEvent.clientY == downPoint.y) {\n          const eventType = \"pancancelled\";\n          if (this.events.isEnabled(eventType)) {\n            this.events.dispatch(eventType, {\n              type: eventType,\n              target: this,\n              originalEvent: event.originalEvent\n            });\n          }\n        }\n        const eventType = \"panended\";\n        if (this.events.isEnabled(eventType)) {\n          this.events.dispatch(eventType, {\n            type: eventType,\n            target: this,\n            originalEvent: event.originalEvent\n          });\n        }\n      }\n    }\n    // TODO: handle multitouch\n    this._downPoint = undefined;\n    this.xAxes.each(xAxis => {\n      xAxis._isPanning = false;\n    });\n    this.yAxes.each(yAxis => {\n      yAxis._isPanning = false;\n    });\n  }\n  _handlePlotMove(event) {\n    const plotContainer = this.plotContainer;\n    if (this.get(\"pinchZoomX\") || this.get(\"pinchZoomY\")) {\n      const touchEvent = event.originalEvent;\n      const pointerId = touchEvent.pointerId;\n      if (pointerId) {\n        this._movePoints[pointerId] = event.point;\n        if ($object.keys(plotContainer._downPoints).length > 1) {\n          this._handlePinch();\n          return;\n        }\n      }\n    }\n    let downPoint = this._downPoint;\n    if (downPoint) {\n      downPoint = plotContainer.toLocal(this._root.documentPointToRoot(downPoint));\n      let local = plotContainer.toLocal(event.point);\n      const panX = this.get(\"panX\");\n      const panY = this.get(\"panY\");\n      if (panX) {\n        let scrollbarX = this.get(\"scrollbarX\");\n        if (scrollbarX) {\n          scrollbarX.events.disableType(\"rangechanged\");\n        }\n        this.xAxes.each(axis => {\n          if (axis.get(\"panX\")) {\n            axis._isPanning = true;\n            //const maxDeviation = axis.get(\"maxDeviation\", 0);\n            let panStart = axis._panStart;\n            let panEnd = axis._panEnd;\n            let difference = panEnd - panStart;\n            let deltaX = difference * (downPoint.x - local.x) / plotContainer.width();\n            if (axis.get(\"renderer\").get(\"inversed\")) {\n              deltaX *= -1;\n            }\n            let start = panStart + deltaX;\n            let end = panEnd + deltaX;\n            if (end - start < 1 + axis.get(\"maxDeviation\", 1) * 2) {\n              axis.set(\"start\", start);\n              axis.set(\"end\", end);\n            }\n          }\n        });\n        if (scrollbarX) {\n          scrollbarX.events.enableType(\"rangechanged\");\n        }\n      }\n      if (panY) {\n        let scrollbarY = this.get(\"scrollbarY\");\n        if (scrollbarY) {\n          scrollbarY.events.disableType(\"rangechanged\");\n        }\n        this.yAxes.each(axis => {\n          if (axis.get(\"panY\")) {\n            axis._isPanning = true;\n            //const maxDeviation = axis.get(\"maxDeviation\", 0);\n            let panStart = axis._panStart;\n            let panEnd = axis._panEnd;\n            let difference = panEnd - panStart;\n            let deltaY = difference * (downPoint.y - local.y) / plotContainer.height();\n            if (axis.get(\"renderer\").get(\"inversed\")) {\n              deltaY *= -1;\n            }\n            let start = panStart - deltaY;\n            let end = panEnd - deltaY;\n            if (end - start < 1 + axis.get(\"maxDeviation\", 1) * 2) {\n              axis.set(\"start\", start);\n              axis.set(\"end\", end);\n            }\n          }\n        });\n        if (scrollbarY) {\n          scrollbarY.events.enableType(\"rangechanged\");\n        }\n      }\n    }\n  }\n  _handlePinch() {\n    const plotContainer = this.plotContainer;\n    let i = 0;\n    let downPoints = [];\n    let movePoints = [];\n    $object.each(plotContainer._downPoints, (k, point) => {\n      downPoints[i] = point;\n      let movePoint = this._movePoints[k];\n      if (movePoint) {\n        movePoints[i] = movePoint;\n      }\n      i++;\n    });\n    if (downPoints.length > 1 && movePoints.length > 1) {\n      const w = plotContainer.width();\n      const h = plotContainer.height();\n      let downPoint0 = downPoints[0];\n      let downPoint1 = downPoints[1];\n      let movePoint0 = movePoints[0];\n      let movePoint1 = movePoints[1];\n      if (downPoint0 && downPoint1 && movePoint0 && movePoint1) {\n        movePoint0 = plotContainer.toLocal(movePoint0);\n        movePoint1 = plotContainer.toLocal(movePoint1);\n        downPoint0 = plotContainer.toLocal(downPoint0);\n        downPoint1 = plotContainer.toLocal(downPoint1);\n        if (this.get(\"pinchZoomX\")) {\n          const downStartX = this._downStartX;\n          const downEndX = this._downEndX;\n          if (downStartX != null && downEndX != null) {\n            if (downPoint0.x > downPoint1.x) {\n              [downPoint0, downPoint1] = [downPoint1, downPoint0];\n              [movePoint0, movePoint1] = [movePoint1, movePoint0];\n            }\n            let downPos0 = downStartX + downPoint0.x / w * (downEndX - downStartX);\n            let downPos1 = downStartX + downPoint1.x / w * (downEndX - downStartX);\n            let movePos0 = downStartX + movePoint0.x / w * (downEndX - downStartX);\n            let movePos1 = downStartX + movePoint1.x / w * (downEndX - downStartX);\n            let initialDistance = Math.max(0.001, downPos1 - downPos0);\n            let currentDistance = Math.max(0.001, movePos1 - movePos0);\n            let d = initialDistance / currentDistance;\n            let s = downStartX * d + downPos0 - movePos0 * d;\n            let e = downEndX * d + downPos1 - movePos1 * d;\n            this.xAxes.each(xAxis => {\n              let sa = xAxis.fixPosition(s);\n              let ea = xAxis.fixPosition(e);\n              xAxis.zoom(sa, ea, 0);\n            });\n          }\n        }\n        if (this.get(\"pinchZoomY\")) {\n          const downStartY = this._downStartY;\n          const downEndY = this._downEndY;\n          if (downStartY != null && downEndY != null) {\n            if (downPoint0.y < downPoint1.y) {\n              [downPoint0, downPoint1] = [downPoint1, downPoint0];\n              [movePoint0, movePoint1] = [movePoint1, movePoint0];\n            }\n            let downPos0 = downStartY + (1 - downPoint0.y / h) * (downEndY - downStartY);\n            let downPos1 = downStartY + (1 - downPoint1.y / h) * (downEndY - downStartY);\n            let movePos0 = downStartY + (1 - movePoint0.y / h) * (downEndY - downStartY);\n            let movePos1 = downStartY + (1 - movePoint1.y / h) * (downEndY - downStartY);\n            let initialDistance = Math.max(0.001, downPos1 - downPos0);\n            let currentDistance = Math.max(0.001, movePos1 - movePos0);\n            let d = initialDistance / currentDistance;\n            let s = downStartY * d + downPos0 - movePos0 * d;\n            let e = downEndY * d + downPos1 - movePos1 * d;\n            this.yAxes.each(yAxis => {\n              let sa = yAxis.fixPosition(s);\n              let ea = yAxis.fixPosition(e);\n              yAxis.zoom(sa, ea, 0);\n            });\n          }\n        }\n      }\n    }\n  }\n  _handleCursorPosition() {\n    const cursor = this.get(\"cursor\");\n    if (cursor) {\n      const cursorPoint = cursor.getPrivate(\"point\");\n      let snapToSeries = cursor.get(\"snapToSeries\");\n      if (cursor._downPoint) {\n        snapToSeries = undefined;\n      }\n      if (snapToSeries && cursorPoint) {\n        const snapToSeriesBy = cursor.get(\"snapToSeriesBy\");\n        const dataItems = [];\n        $array.each(snapToSeries, series => {\n          if (!series.isHidden() && !series.isHiding()) {\n            if (snapToSeriesBy != \"x!\" && snapToSeriesBy != \"y!\") {\n              const startIndex = series.startIndex();\n              const endIndex = series.endIndex();\n              for (let i = startIndex; i < endIndex; i++) {\n                const dataItem = series.dataItems[i];\n                if (dataItem && !dataItem.isHidden()) {\n                  dataItems.push(dataItem);\n                }\n              }\n            } else {\n              const tooltipDataItem = series.get(\"tooltipDataItem\");\n              if (tooltipDataItem) {\n                dataItems.push(tooltipDataItem);\n              }\n            }\n          }\n        });\n        let minDistance = Infinity;\n        let closestItem;\n        $array.each(dataItems, dataItem => {\n          const point = dataItem.get(\"point\");\n          if (point) {\n            let distance = 0;\n            if (snapToSeriesBy == \"x\" || snapToSeriesBy == \"x!\") {\n              distance = Math.abs(cursorPoint.x - point.x);\n            } else if (snapToSeriesBy == \"y\" || snapToSeriesBy == \"y!\") {\n              distance = Math.abs(cursorPoint.y - point.y);\n            } else {\n              distance = Math.hypot(cursorPoint.x - point.x, cursorPoint.y - point.y);\n            }\n            if (distance < minDistance) {\n              minDistance = distance;\n              closestItem = dataItem;\n            }\n          }\n        });\n        $array.each(snapToSeries, series => {\n          const tooltip = series.get(\"tooltip\");\n          if (tooltip) {\n            tooltip._setDataItem(undefined);\n          }\n        });\n        if (closestItem) {\n          let series = closestItem.component;\n          series.showDataItemTooltip(closestItem);\n          series.setRaw(\"tooltipDataItem\", closestItem);\n          const point = closestItem.get(\"point\");\n          if (point) {\n            // removing x and y to solve #72225\n            cursor.handleMove(series.toGlobal({\n              x: point.x - series.x(),\n              y: point.y - series.y()\n            }), true);\n          }\n        }\n      }\n    }\n  }\n  _updateCursor() {\n    let cursor = this.get(\"cursor\");\n    if (cursor) {\n      cursor.updateCursor();\n    }\n  }\n  _addCursor(cursor) {\n    this.plotContainer.children.push(cursor);\n  }\n  _prepareChildren() {\n    super._prepareChildren();\n    this.series.each(series => {\n      this._colorize(series);\n    });\n    if (this.isDirty(\"wheelX\") || this.isDirty(\"wheelY\")) {\n      this._handleSetWheel();\n    }\n    if (this.isDirty(\"cursor\")) {\n      const previous = this._prevSettings.cursor;\n      const cursor = this.get(\"cursor\");\n      if (cursor !== previous) {\n        this._disposeProperty(\"cursor\");\n        if (previous) {\n          previous.dispose();\n        }\n        if (cursor) {\n          cursor._setChart(this);\n          this._addCursor(cursor);\n          this._pushPropertyDisposer(\"cursor\", cursor.events.on(\"selectended\", () => {\n            this._handleCursorSelectEnd();\n          }));\n        }\n        //this.setRaw(\"cursor\", cursor) // to reset previous value\n        this._prevSettings.cursor = cursor;\n      }\n    }\n    if (this.isDirty(\"scrollbarX\")) {\n      const previous = this._prevSettings.scrollbarX;\n      const scrollbarX = this.get(\"scrollbarX\");\n      if (scrollbarX !== previous) {\n        this._disposeProperty(\"scrollbarX\");\n        if (previous) {\n          previous.dispose();\n        }\n        if (scrollbarX) {\n          if (!scrollbarX.parent) {\n            this.topAxesContainer.children.push(scrollbarX);\n          }\n          this._pushPropertyDisposer(\"scrollbarX\", scrollbarX.events.on(\"rangechanged\", e => {\n            this._handleScrollbar(this.xAxes, e.start, e.end, e.grip);\n          }));\n          this._pushPropertyDisposer(\"scrollbarX\", scrollbarX.events.on(\"released\", () => {\n            this.xAxes.each(axis => {\n              if (axis.get(\"zoomable\")) {\n                this._handleAxisSelection(axis);\n              }\n            });\n          }));\n          // Used to populate `ariaLabel` with meaningful values\n          scrollbarX.setPrivate(\"positionTextFunction\", position => {\n            const axis = this.xAxes.getIndex(0);\n            return axis ? axis.getTooltipText(position, false) || \"\" : \"\";\n          });\n        }\n        this._prevSettings.scrollbarX = scrollbarX;\n      }\n    }\n    if (this.isDirty(\"scrollbarY\")) {\n      const previous = this._prevSettings.scrollbarY;\n      const scrollbarY = this.get(\"scrollbarY\");\n      if (scrollbarY !== previous) {\n        this._disposeProperty(\"scrollbarY\");\n        if (previous) {\n          previous.dispose();\n        }\n        if (scrollbarY) {\n          if (!scrollbarY.parent) {\n            this.rightAxesContainer.children.push(scrollbarY);\n          }\n          this._pushPropertyDisposer(\"scrollbarY\", scrollbarY.events.on(\"rangechanged\", e => {\n            this._handleScrollbar(this.yAxes, e.start, e.end, e.grip);\n          }));\n          this._pushPropertyDisposer(\"scrollbarY\", scrollbarY.events.on(\"released\", () => {\n            this.yAxes.each(axis => {\n              if (axis.get(\"zoomable\")) {\n                this._handleAxisSelection(axis);\n              }\n            });\n          }));\n          // Used to populate `ariaLabel` with meaningful values\n          scrollbarY.setPrivate(\"positionTextFunction\", position => {\n            const axis = this.yAxes.getIndex(0);\n            return axis ? axis.getTooltipText(position, false) || \"\" : \"\";\n          });\n        }\n        this._prevSettings.scrollbarY = scrollbarY;\n      }\n    }\n    this._handleZoomOut();\n  }\n  _processSeries(series) {\n    super._processSeries(series);\n    const xAxis = series.get(\"xAxis\");\n    const yAxis = series.get(\"yAxis\");\n    $array.move(xAxis.series, series);\n    $array.move(yAxis.series, series);\n    series._posXDp = series.addDisposer(xAxis.events.on(\"positionchanged\", () => {\n      series._fixPosition();\n    }));\n    series._posXDp = series.addDisposer(yAxis.events.on(\"positionchanged\", () => {\n      series._fixPosition();\n    }));\n    if (!series.get(\"baseAxis\")) {\n      if (yAxis.isType(\"CategoryAxis\") || yAxis.isType(\"DateAxis\")) {\n        series.set(\"baseAxis\", yAxis);\n      } else {\n        series.set(\"baseAxis\", xAxis);\n      }\n    }\n    if (series.get(\"stacked\")) {\n      series._markDirtyKey(\"stacked\");\n      $array.each(series.dataItems, dataItem => {\n        dataItem.set(\"stackToItemY\", undefined);\n        dataItem.set(\"stackToItemX\", undefined);\n      });\n    }\n    series._markDirtyAxes();\n    yAxis.markDirtyExtremes();\n    xAxis.markDirtyExtremes();\n    xAxis._seriesAdded = true;\n    yAxis._seriesAdded = true;\n    this._colorize(series);\n  }\n  _colorize(series) {\n    const colorSet = this.get(\"colors\");\n    if (colorSet) {\n      if (series.get(\"fill\") == null) {\n        const color = colorSet.next();\n        series._setSoft(\"stroke\", color);\n        series._setSoft(\"fill\", color);\n      }\n    }\n    const patternSet = this.get(\"patterns\");\n    if (patternSet) {\n      if (series.get(\"fillPattern\") == null) {\n        const pattern = patternSet.next();\n        series._setSoft(\"fillPattern\", pattern);\n      }\n    }\n  }\n  _handleCursorSelectEnd() {\n    const cursor = this.get(\"cursor\");\n    const behavior = cursor.get(\"behavior\");\n    const downPositionX = cursor.getPrivate(\"downPositionX\", 0);\n    const downPositionY = cursor.getPrivate(\"downPositionY\", 0);\n    const positionX = Math.min(1, Math.max(0, cursor.getPrivate(\"positionX\", 0.5)));\n    const positionY = Math.min(1, Math.max(0, cursor.getPrivate(\"positionY\", 0.5)));\n    this.xAxes.each(axis => {\n      if (behavior === \"zoomX\" || behavior === \"zoomXY\") {\n        let position0 = axis.toAxisPosition(downPositionX);\n        let position1 = axis.toAxisPosition(positionX);\n        axis.zoom(position0, position1);\n      }\n      axis.setPrivate(\"updateScrollbar\", true);\n    });\n    this.yAxes.each(axis => {\n      if (behavior === \"zoomY\" || behavior === \"zoomXY\") {\n        let position0 = axis.toAxisPosition(downPositionY);\n        let position1 = axis.toAxisPosition(positionY);\n        axis.zoom(position0, position1);\n      }\n      axis.setPrivate(\"updateScrollbar\", true);\n    });\n  }\n  _handleScrollbar(axes, start, end, priority) {\n    axes.each(axis => {\n      let axisStart = axis.fixPosition(start);\n      let axisEnd = axis.fixPosition(end);\n      let zoomAnimation = axis.zoom(axisStart, axisEnd, undefined, priority);\n      const updateScrollbar = \"updateScrollbar\";\n      axis.setPrivateRaw(updateScrollbar, false);\n      if (zoomAnimation) {\n        zoomAnimation.events.on(\"stopped\", () => {\n          axis.setPrivateRaw(updateScrollbar, true);\n        });\n      } else {\n        axis.setPrivateRaw(updateScrollbar, true);\n      }\n    });\n  }\n  _processAxis(axes, container) {\n    return axes.events.onAll(change => {\n      if (change.type === \"clear\") {\n        $array.each(change.oldValues, axis => {\n          this._removeAxis(axis);\n        });\n      } else if (change.type === \"push\") {\n        container.children.push(change.newValue);\n        change.newValue.processChart(this);\n      } else if (change.type === \"setIndex\") {\n        container.children.setIndex(change.index, change.newValue);\n        change.newValue.processChart(this);\n      } else if (change.type === \"insertIndex\") {\n        container.children.insertIndex(change.index, change.newValue);\n        change.newValue.processChart(this);\n      } else if (change.type === \"removeIndex\") {\n        this._removeAxis(change.oldValue);\n      } else if (change.type === \"moveIndex\") {\n        container.children.moveValue(change.value, change.newIndex);\n        change.value.processChart(this);\n      } else {\n        throw new Error(\"Unknown IListEvent type\");\n      }\n    });\n  }\n  _removeAxis(axis) {\n    if (!axis.isDisposed()) {\n      const axisParent = axis.parent;\n      if (axisParent) {\n        axisParent.children.removeValue(axis);\n      }\n      const gridContainer = axis.gridContainer;\n      const gridParent = gridContainer.parent;\n      if (gridParent) {\n        gridParent.children.removeValue(gridContainer);\n      }\n      const topGridContainer = axis.topGridContainer;\n      const topGridParent = topGridContainer.parent;\n      if (topGridParent) {\n        topGridParent.children.removeValue(topGridContainer);\n      }\n    }\n  }\n  _updateChartLayout() {\n    const left = this.leftAxesContainer.width();\n    const right = this.rightAxesContainer.width();\n    const bottomAxesContainer = this.bottomAxesContainer;\n    bottomAxesContainer.set(\"paddingLeft\", left);\n    bottomAxesContainer.set(\"paddingRight\", right);\n    const topAxesContainer = this.topAxesContainer;\n    topAxesContainer.set(\"paddingLeft\", left);\n    topAxesContainer.set(\"paddingRight\", right);\n  }\n  /**\r\n   * @ignore\r\n   */\n  processAxis(axis) {\n    var cursor = this.get(\"cursor\");\n    if (cursor) {\n      this.addDisposer(axis.on(\"start\", () => {\n        this._updateCursor();\n      }));\n      this.addDisposer(axis.on(\"end\", () => {\n        this._updateCursor();\n      }));\n    }\n  }\n  _handleAxisSelection(axis, force) {\n    let start = axis.fixPosition(axis.get(\"start\", 0));\n    let end = axis.fixPosition(axis.get(\"end\", 1));\n    if (start > end) {\n      [start, end] = [end, start];\n    }\n    if (this.xAxes.indexOf(axis) != -1) {\n      if (force || axis.getPrivate(\"updateScrollbar\")) {\n        let scrollbarX = this.get(\"scrollbarX\");\n        if (scrollbarX && (!scrollbarX.getPrivate(\"isBusy\") || force)) {\n          scrollbarX.setRaw(\"start\", start);\n          scrollbarX.setRaw(\"end\", end);\n          scrollbarX.updateGrips();\n        }\n      }\n    } else if (this.yAxes.indexOf(axis) != -1) {\n      if (force || axis.getPrivate(\"updateScrollbar\")) {\n        let scrollbarY = this.get(\"scrollbarY\");\n        if (scrollbarY && (!scrollbarY.getPrivate(\"isBusy\") || force)) {\n          scrollbarY.setRaw(\"start\", start);\n          scrollbarY.setRaw(\"end\", end);\n          scrollbarY.updateGrips();\n        }\n      }\n    }\n    this._handleZoomOut();\n  }\n  _handleZoomOut() {\n    let zoomOutButton = this.zoomOutButton;\n    if (zoomOutButton && zoomOutButton.parent) {\n      let visible = false;\n      this.xAxes.each(axis => {\n        if ($math.round(axis.get(\"start\", 0), 5) != 0 || $math.round(axis.get(\"end\", 1), 5) != 1) {\n          visible = true;\n        }\n      });\n      this.yAxes.each(axis => {\n        if ($math.round(axis.get(\"start\", 0), 5) != 0 || $math.round(axis.get(\"end\", 1), 5) != 1) {\n          visible = true;\n        }\n      });\n      if (visible) {\n        if (zoomOutButton.isHidden()) {\n          zoomOutButton.show();\n        }\n      } else {\n        zoomOutButton.hide();\n      }\n    }\n  }\n  /**\r\n   * Checks if point is within plot area.\r\n   *\r\n   * @param   point  Reference point\r\n   * @return         Is within plot area?\r\n   */\n  inPlot(point) {\n    const plotContainer = this.plotContainer;\n    const otherCharts = this.getPrivate(\"otherCharts\", this._otherCharts);\n    const global = plotContainer.toGlobal(point);\n    if (point.x >= -0.5 && point.y >= -0.5 && point.x <= plotContainer.width() + 0.5 && point.y <= plotContainer.height() + 0.5) {\n      return true;\n    }\n    if (otherCharts) {\n      for (let i = otherCharts.length - 1; i >= 0; i--) {\n        const chart = otherCharts[i];\n        if (chart != this) {\n          const chartPlotContainer = chart.plotContainer;\n          const documentPoint = this._root.rootPointToDocument(global);\n          const chartRoot = chart._root.documentPointToRoot(documentPoint);\n          const local = chartPlotContainer.toLocal(chartRoot);\n          if (local.x >= -0.1 && local.y >= -0.1 && local.x <= chartPlotContainer.width() + 0.1 && local.y <= chartPlotContainer.height() + 0.1) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n  /**\r\n   * @ignore\r\n   */\n  arrangeTooltips() {\n    const plotContainer = this.plotContainer;\n    const w = plotContainer.width();\n    const h = plotContainer.height();\n    let hh = this.height();\n    const bounds = this._root.tooltipContainer.get(\"layerMargin\");\n    if (bounds) {\n      if (bounds.bottom > hh) {\n        hh = bounds.bottom;\n      }\n    }\n    let plotT = plotContainer._display.toGlobal({\n      x: 0,\n      y: 0\n    });\n    let plotB = plotContainer._display.toGlobal({\n      x: w,\n      y: h\n    });\n    const tooltips = [];\n    let sum = 0;\n    let minDistance = Infinity;\n    let movePoint = this._movePoint;\n    let maxTooltipDistance = this.get(\"maxTooltipDistance\");\n    let maxTooltipDistanceBy = this.get(\"maxTooltipDistanceBy\", \"xy\");\n    let closest;\n    let closestPoint;\n    if ($type.isNumber(maxTooltipDistance)) {\n      this.series.each(series => {\n        if (!series.isHidden()) {\n          const tooltip = series.get(\"tooltip\");\n          if (tooltip) {\n            let point = tooltip.get(\"pointTo\");\n            if (point) {\n              let distance = Math.hypot(movePoint.x - point.x, movePoint.y - point.y);\n              if (maxTooltipDistanceBy == \"x\") {\n                distance = Math.abs(movePoint.x - point.x);\n              } else if (maxTooltipDistanceBy == \"y\") {\n                distance = Math.abs(movePoint.y - point.y);\n              }\n              if (distance < minDistance) {\n                minDistance = distance;\n                closest = series;\n                closestPoint = point;\n              }\n            }\n          }\n        }\n      });\n    }\n    const tooltipSeries = [];\n    this.series.each(series => {\n      const tooltip = series.get(\"tooltip\");\n      if (tooltip && !tooltip.get(\"forceHidden\")) {\n        let hidden = false;\n        let point = tooltip.get(\"pointTo\");\n        if (point) {\n          if (maxTooltipDistance >= 0) {\n            let point = tooltip.get(\"pointTo\");\n            if (point && closestPoint) {\n              if (series != closest) {\n                let distance = Math.hypot(closestPoint.x - point.x, closestPoint.y - point.y);\n                if (maxTooltipDistanceBy == \"x\") {\n                  distance = Math.abs(closestPoint.x - point.x);\n                } else if (maxTooltipDistanceBy == \"y\") {\n                  distance = Math.abs(closestPoint.y - point.y);\n                }\n                if (distance > maxTooltipDistance) {\n                  hidden = true;\n                }\n              }\n            }\n          } else if (maxTooltipDistance == -1) {\n            if (series != closest) {\n              hidden = true;\n            }\n          }\n          if (!this.inPlot(this._tooltipToLocal(point)) || !tooltip.dataItem) {\n            hidden = true;\n          } else {\n            if (!hidden) {\n              sum += point.y;\n            }\n          }\n          if (hidden || series.isHidden() || series.isHiding()) {\n            tooltip.hide(0);\n          } else {\n            tooltip.show();\n            tooltips.push(tooltip);\n            tooltipSeries.push(series);\n          }\n        }\n      }\n    });\n    this.setPrivate(\"tooltipSeries\", tooltipSeries);\n    if (this.get(\"arrangeTooltips\")) {\n      let totalTooltipH = 0;\n      let tooltipCount = 0;\n      const tooltipContainer = this._root.tooltipContainer;\n      const count = tooltips.length;\n      const average = sum / count;\n      if (average > h / 2 + plotT.y) {\n        tooltips.sort((a, b) => $order.compareNumber(b.get(\"pointTo\").y, a.get(\"pointTo\").y));\n        let prevY = plotB.y;\n        $array.each(tooltips, tooltip => {\n          let height = tooltip.height();\n          tooltipCount++;\n          totalTooltipH += height;\n          let centerY = tooltip.get(\"centerY\");\n          if (centerY instanceof Percent) {\n            height *= centerY.value;\n          }\n          height += tooltip.get(\"marginBottom\", 0);\n          tooltip.set(\"bounds\", {\n            left: plotT.x,\n            top: plotT.y,\n            right: plotB.x,\n            bottom: prevY\n          });\n          tooltip.setPrivate(\"customData\", {\n            left: plotT.x,\n            top: plotT.y,\n            right: plotB.x,\n            bottom: prevY\n          });\n          prevY = Math.min(prevY - height, tooltip._fy - height);\n          if (tooltip.parent == tooltipContainer) {\n            tooltipContainer.children.moveValue(tooltip, 0);\n          }\n        });\n        if (prevY < 0) {\n          tooltips.reverse();\n          let prevBottom = prevY;\n          $array.each(tooltips, tooltip => {\n            tooltipCount++;\n            let bounds = tooltip.get(\"bounds\");\n            if (bounds) {\n              let top = bounds.top - prevY;\n              let bottom = bounds.bottom - prevY;\n              if (top < prevBottom) {\n                top = prevBottom;\n                bottom = top + tooltip.height();\n              }\n              tooltip.set(\"bounds\", {\n                left: bounds.left,\n                top: top,\n                right: bounds.right,\n                bottom: bottom\n              });\n              prevBottom = bounds.bottom - prevY + tooltip.get(\"marginBottom\", 0);\n            }\n          });\n        }\n      } else {\n        tooltips.reverse();\n        tooltips.sort((a, b) => $order.compareNumber(a.get(\"pointTo\").y, b.get(\"pointTo\").y));\n        let prevY = 0;\n        $array.each(tooltips, tooltip => {\n          tooltipCount++;\n          let height = tooltip.height();\n          totalTooltipH += height;\n          let centerY = tooltip.get(\"centerY\");\n          if (centerY instanceof Percent) {\n            height *= centerY.value;\n          }\n          height += tooltip.get(\"marginBottom\", 0);\n          tooltip.set(\"bounds\", {\n            left: plotT.x,\n            top: prevY,\n            right: plotB.x,\n            bottom: Math.max(plotT.y + hh, prevY + height)\n          });\n          if (tooltip.parent == tooltipContainer) {\n            tooltipContainer.children.moveValue(tooltip, 0);\n          }\n          prevY = Math.max(prevY + height, tooltip._fy + height);\n        });\n        if (prevY > hh) {\n          tooltips.reverse();\n          let prevBottom = hh;\n          $array.each(tooltips, tooltip => {\n            tooltipCount++;\n            let bounds = tooltip.get(\"bounds\");\n            if (bounds) {\n              let top = bounds.top - (hh - prevY);\n              let bottom = bounds.bottom - (hh - prevY);\n              if (bottom > prevBottom) {\n                bottom = prevBottom;\n                top = bottom - tooltip.height();\n              }\n              tooltip.set(\"bounds\", {\n                left: bounds.left,\n                top: top,\n                right: bounds.right,\n                bottom: bottom\n              });\n              prevBottom = bottom - tooltip.height() - tooltip.get(\"marginBottom\", 0);\n            }\n          });\n        }\n      }\n      if (totalTooltipH == 0 && tooltipCount > 0) {\n        this._disposers.push(this.root.events.once(\"frameended\", () => {\n          this.arrangeTooltips();\n        }));\n      }\n    }\n  }\n  _tooltipToLocal(point) {\n    return this.plotContainer.toLocal(point);\n  }\n  /**\r\n   * Fully zooms out the chart.\r\n   */\n  zoomOut() {\n    this.xAxes.each(axis => {\n      axis.setPrivate(\"updateScrollbar\", true);\n      axis.zoom(0, 1);\n    });\n    this.yAxes.each(axis => {\n      axis.setPrivate(\"updateScrollbar\", true);\n      axis.zoom(0, 1);\n    });\n  }\n  _dispose() {\n    super._dispose();\n    // Explicitly disposing cursor to avoid memory leak of cursor adding\n    // keyboard events after parent chart has been disposed\n    const cursor = this.get(\"cursor\");\n    if (cursor) {\n      cursor.dispose();\n    }\n  }\n}\nObject.defineProperty(XYChart, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"XYChart\"\n});\nObject.defineProperty(XYChart, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: SerialChart.classNames.concat([XYChart.className])\n});\n", "import { Scrollbar } from \"../../core/render/Scrollbar\";\nimport { XYChart } from \"./XYChart\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport * as $utils from \"../../core/util/Utils\";\n/**\r\n * Creates a scrollbar with chart preview in it.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/scrollbars/#Scrollbar_with_chart_preview} for more info\r\n * @important\r\n */\nexport class XYChartScrollbar extends Scrollbar {\n  constructor() {\n    super(...arguments);\n    /**\r\n     * An instance of an [[XYChart]] that is used to plot chart preview in\r\n     * scrollbar.\r\n     */\n    Object.defineProperty(this, \"chart\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.children.push(XYChart.new(this._root, {\n        themeTags: [\"chart\"],\n        interactive: false,\n        interactiveChildren: false,\n        panX: false,\n        panY: false,\n        wheelX: \"none\",\n        wheelY: \"none\"\n      }))\n    });\n    /**\r\n     * A graphics element that is displayed over inactive portion of the\r\n     * scrollbarpreview, to dim it down.\r\n     */\n    Object.defineProperty(this, \"overlay\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.children.push(Graphics.new(this._root, {\n        themeTags: [\"overlay\"],\n        interactive: false\n      }))\n    });\n  }\n  _afterNew() {\n    this._addOrientationClass();\n    this._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"scrollbar\", \"xy\", \"chart\", this._settings.orientation]);\n    const children = this.children;\n    children.moveValue(this.thumb);\n    children.moveValue(this.startGrip);\n    children.moveValue(this.endGrip);\n    this.thumb.set(\"opacity\", 0);\n    this.thumb.states.create(\"hover\", {\n      opacity: 0.2\n    });\n    const plotContainer = this.chart.plotContainer;\n    plotContainer.set(\"interactive\", false);\n    plotContainer.remove(\"background\");\n    plotContainer.children.removeValue(this.chart.zoomOutButton);\n    super._afterNew();\n  }\n  _updateThumb() {\n    super._updateThumb();\n    this.overlay.set(\"draw\", display => {\n      const startGrip = this.startGrip;\n      const endGrip = this.endGrip;\n      let x0 = startGrip.x();\n      let y0 = startGrip.y();\n      let x1 = endGrip.x();\n      let y1 = endGrip.y();\n      const h = this.height();\n      const w = this.width();\n      if (x0 > x1) {\n        [x0, x1] = [x1, x0];\n      }\n      if (y0 > y1) {\n        [y0, y1] = [y1, y0];\n      }\n      if (this.get(\"orientation\") === \"horizontal\") {\n        display.moveTo(0, 0);\n        display.lineTo(x0, 0);\n        display.lineTo(x0, h);\n        display.lineTo(0, h);\n        display.lineTo(0, 0);\n        display.moveTo(x1, 0);\n        display.lineTo(w, 0);\n        display.lineTo(w, h);\n        display.lineTo(x1, h);\n        display.lineTo(x1, 0);\n      } else {\n        display.moveTo(0, 0);\n        display.lineTo(0, y0);\n        display.lineTo(w, y0);\n        display.lineTo(w, 0);\n        display.lineTo(0, 0);\n        display.moveTo(0, y1);\n        display.lineTo(0, h);\n        display.lineTo(w, h);\n        display.lineTo(w, y1);\n        display.lineTo(0, y1);\n      }\n    });\n  }\n}\nObject.defineProperty(XYChartScrollbar, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"XYChartScrollbar\"\n});\nObject.defineProperty(XYChartScrollbar, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Scrollbar.classNames.concat([XYChartScrollbar.className])\n});\n", "import { Graphics } from \"../../../core/render/Graphics\";\n/**\r\n * Creates an axis grid line.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Grid} for more info\r\n * @important\r\n */\nexport class Grid extends Graphics {\n  _beforeChanged() {\n    super._beforeChanged();\n    if (this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\")) {\n      this._clear = true;\n    }\n  }\n}\nObject.defineProperty(Grid, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"Grid\"\n});\nObject.defineProperty(Grid, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Graphics.classNames.concat([Grid.className])\n});\n", "import { Container } from \"../../core/render/Container\";\nimport { p100 } from \"../../core/util/Percent\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { Grid } from \"./axes/Grid\";\n//import { Animations } from \"../core/util/Animation\";\nimport * as $type from \"../../core/util/Type\";\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $math from \"../../core/util/Math\";\nimport * as $array from \"../../core/util/Array\";\nimport * as $object from \"../../core/util/Object\";\n/**\r\n * Creates a chart cursor for an [[XYChart]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/} for more info\r\n * @important\r\n */\nexport class XYCursor extends Container {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"_alwaysShow\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    /**\r\n     * A [[Grid]] elment that used for horizontal line of the cursor crosshair.\r\n     *\r\n     * @default Grid.new()\r\n     */\n    Object.defineProperty(this, \"lineX\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.children.push(Grid.new(this._root, {\n        themeTags: [\"x\"]\n      }))\n    });\n    /**\r\n     * A [[Grid]] elment that used for horizontal line of the cursor crosshair.\r\n     *\r\n     * @default Grid.new()\r\n     */\n    Object.defineProperty(this, \"lineY\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.children.push(Grid.new(this._root, {\n        themeTags: [\"y\"]\n      }))\n    });\n    /**\r\n     * An element that represents current selection.\r\n     *\r\n     * @default Graphics.new()\r\n     */\n    Object.defineProperty(this, \"selection\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.children.push(Graphics.new(this._root, {\n        themeTags: [\"selection\", \"cursor\"],\n        layer: 30\n      }))\n    });\n    Object.defineProperty(this, \"_movePoint\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_lastPoint\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {\n        x: 0,\n        y: 0\n      }\n    });\n    Object.defineProperty(this, \"_lastPoint2\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {\n        x: 0,\n        y: 0\n      }\n    });\n    Object.defineProperty(this, \"_tooltipX\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_tooltipY\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    /**\r\n     * A chart cursor is attached to.\r\n     */\n    Object.defineProperty(this, \"chart\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_toX\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_toY\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n  }\n  _afterNew() {\n    this._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"xy\", \"cursor\"]);\n    super._afterNew();\n    this.setAll({\n      \"width\": p100,\n      height: p100,\n      isMeasured: true,\n      position: \"absolute\"\n    });\n    this.states.create(\"hidden\", {\n      visible: true,\n      opacity: 0\n    });\n    this._drawLines();\n    this.setPrivateRaw(\"visible\", false);\n    this._disposers.push(this.setTimeout(() => {\n      this.setPrivate(\"visible\", true);\n    }, 500));\n    this._disposers.push(this.lineX.events.on(\"positionchanged\", () => {\n      this._handleXLine();\n    }));\n    this._disposers.push(this.lineY.events.on(\"positionchanged\", () => {\n      this._handleYLine();\n    }));\n    this._disposers.push(this.lineX.events.on(\"focus\", () => this._handleLineFocus()));\n    this._disposers.push(this.lineX.events.on(\"blur\", () => this._handleLineBlur()));\n    this._disposers.push(this.lineY.events.on(\"focus\", () => this._handleLineFocus()));\n    this._disposers.push(this.lineY.events.on(\"blur\", () => this._handleLineBlur()));\n    if ($utils.supports(\"keyboardevents\")) {\n      this._disposers.push($utils.addEventListener(document, \"keydown\", ev => {\n        this._handleLineMove($utils.getEventKey(ev), ev.ctrlKey);\n      }));\n    }\n  }\n  _setUpTouch() {\n    const chart = this.chart;\n    if (chart) {\n      chart.plotContainer._display.cancelTouch = this.get(\"behavior\") != \"none\" ? true : false;\n    }\n  }\n  _handleXLine() {\n    let x = this.lineX.x();\n    let visible = true;\n    if (x < 0 || x > this.width()) {\n      visible = false;\n    }\n    this.lineX.setPrivate(\"visible\", visible);\n  }\n  _handleYLine() {\n    let y = this.lineY.y();\n    let visible = true;\n    if (y < 0 || y > this.height()) {\n      visible = false;\n    }\n    this.lineY.setPrivate(\"visible\", visible);\n  }\n  _handleLineMove(key, ctrlKey) {\n    let dir = \"\";\n    const chart = this.chart;\n    let axis;\n    if (chart && chart.xAxes.length) {\n      if (this._root.focused(this.lineX)) {\n        dir = \"positionX\";\n        axis = chart.xAxes.getIndex(0);\n      } else if (this._root.focused(this.lineY)) {\n        axis = chart.yAxes.getIndex(0);\n        dir = \"positionY\";\n      }\n      let m = 1;\n      if (ctrlKey) {\n        m = 5;\n      }\n      if (axis) {\n        let inversed = axis.get(\"renderer\").get(\"inversed\", false);\n        let step;\n        if (key == \"ArrowRight\" || key == \"ArrowDown\") {\n          step = 1;\n        } else if (key == \"ArrowLeft\" || key == \"ArrowUp\") {\n          step = -1;\n        } else if (key == \"Tab\") {\n          step = 0;\n        }\n        if (step != null) {\n          if (inversed) {\n            step *= -1;\n          }\n          this.set(dir, axis.nextPosition(step * m));\n        }\n      }\n    }\n  }\n  _handleLineFocus() {\n    this._alwaysShow = this.get(\"alwaysShow\", false);\n    this.setAll({\n      positionX: this.getPrivate(\"positionX\", 0),\n      positionY: this.getPrivate(\"positionY\", 0),\n      alwaysShow: true\n    });\n    this._handleLineMove(\"Tab\");\n  }\n  _handleLineBlur() {\n    if (this.lineX.isFocus() || this.lineY.isFocus()) {\n      this.setAll({\n        positionX: undefined,\n        positionY: undefined,\n        alwaysShow: this._alwaysShow\n      });\n    }\n  }\n  _prepareChildren() {\n    super._prepareChildren();\n    if (this.isDirty(\"xAxis\")) {\n      this._tooltipX = false;\n      const xAxis = this.get(\"xAxis\");\n      if (xAxis) {\n        const tooltip = xAxis.get(\"tooltip\");\n        if (tooltip) {\n          this._tooltipX = true;\n          this._disposers.push(tooltip.on(\"pointTo\", () => {\n            this._updateXLine(tooltip);\n          }));\n        }\n      }\n    }\n    if (this.isDirty(\"yAxis\")) {\n      this._tooltipY = false;\n      const yAxis = this.get(\"yAxis\");\n      if (yAxis) {\n        const tooltip = yAxis.get(\"tooltip\");\n        if (tooltip) {\n          this._tooltipY = true;\n          this._disposers.push(tooltip.on(\"pointTo\", () => {\n            this._updateYLine(tooltip);\n          }));\n        }\n      }\n    }\n  }\n  _handleSyncWith() {\n    const chart = this.chart;\n    if (chart) {\n      const syncWith = this.get(\"syncWith\");\n      const otherCharts = [];\n      if (syncWith) {\n        $array.each(syncWith, cursor => {\n          const chart = cursor.chart;\n          if (chart) {\n            otherCharts.push(chart);\n          }\n        });\n      }\n      chart._otherCharts = otherCharts;\n    }\n  }\n  _updateChildren() {\n    super._updateChildren();\n    this._handleSyncWith();\n    if (this.isDirty(\"positionX\") || this.isDirty(\"positionY\")) {\n      const positionX = this.get(\"positionX\");\n      const positionY = this.get(\"positionY\");\n      if (positionX == null && positionY == null) {\n        this.hide(0);\n      } else {\n        this._movePoint = this.toGlobal(this._getPoint(this.get(\"positionX\", 0), this.get(\"positionY\", 0)));\n        this.handleMove();\n      }\n    }\n  }\n  _updateXLine(tooltip) {\n    let x = $math.round(this._display.toLocal(tooltip.get(\"pointTo\", {\n      x: 0,\n      y: 0\n    })).x, 3);\n    if (this._toX != x) {\n      this.lineX.animate({\n        key: \"x\",\n        to: x,\n        duration: tooltip.get(\"animationDuration\", 0),\n        easing: tooltip.get(\"animationEasing\")\n      });\n      this._toX = x;\n    }\n  }\n  _updateYLine(tooltip) {\n    let y = $math.round(this._display.toLocal(tooltip.get(\"pointTo\", {\n      x: 0,\n      y: 0\n    })).y, 3);\n    if (this._toY != y) {\n      this.lineY.animate({\n        key: \"y\",\n        to: y,\n        duration: tooltip.get(\"animationDuration\", 0),\n        easing: tooltip.get(\"animationEasing\")\n      });\n      this._toY = y;\n    }\n  }\n  _drawLines() {\n    this.lineX.set(\"draw\", display => {\n      display.moveTo(0, 0);\n      display.lineTo(0, this.height());\n    });\n    this.lineY.set(\"draw\", display => {\n      display.moveTo(0, 0);\n      display.lineTo(this.width(), 0);\n    });\n  }\n  updateCursor() {\n    if (this.get(\"alwaysShow\")) {\n      this._movePoint = this.toGlobal(this._getPoint(this.get(\"positionX\", 0), this.get(\"positionY\", 0)));\n    }\n    this.handleMove();\n  }\n  _setChart(chart) {\n    this.chart = chart;\n    this._handleSyncWith();\n    const plotContainer = chart.plotContainer;\n    this.events.on(\"boundschanged\", () => {\n      this._disposers.push(this.setTimeout(() => {\n        this.updateCursor();\n      }, 50));\n    });\n    //this._display.interactive = true;\n    if ($utils.supports(\"touchevents\")) {\n      this._disposers.push(plotContainer.events.on(\"click\", event => {\n        if ($utils.isTouchEvent(event.originalEvent)) {\n          this._handleMove(event);\n        }\n      }));\n      this._setUpTouch();\n    }\n    this._disposers.push(plotContainer.events.on(\"pointerdown\", event => {\n      this._handleCursorDown(event);\n    }));\n    this._disposers.push(plotContainer.events.on(\"globalpointerup\", event => {\n      this._handleCursorUp(event);\n      if (!event.native && !this.isHidden()) {\n        this._handleMove(event);\n      }\n    }));\n    this._disposers.push(plotContainer.events.on(\"globalpointermove\", event => {\n      if (!this.get(\"syncWith\")) {\n        if ($object.keys(plotContainer._downPoints).length == 0 && !event.native && this.isHidden()) {\n          // Ignore mouse movement if it originates on outside element and\n          // we're not dragging.\n          return;\n        }\n      }\n      this._handleMove(event);\n      if (Math.hypot(this._lastPoint2.x - event.point.x, this._lastPoint2.y - event.point.y) > 1) {\n        this._handleLineBlur();\n        this._lastPoint2 = event.point;\n      }\n    }));\n    const parent = this.parent;\n    if (parent) {\n      parent.children.moveValue(this.selection);\n    }\n  }\n  _inPlot(point) {\n    const chart = this.chart;\n    if (chart) {\n      return chart.inPlot(point);\n    }\n    return false;\n  }\n  _handleCursorDown(event) {\n    if (event.originalEvent.button == 2) {\n      return;\n    }\n    const rootPoint = event.point;\n    let local = this._display.toLocal(rootPoint);\n    const chart = this.chart;\n    this.selection.set(\"draw\", () => {});\n    if (chart && this._inPlot(local)) {\n      this._downPoint = local;\n      if (this.get(\"behavior\") != \"none\") {\n        this.selection.show();\n        const type = \"selectstarted\";\n        if (this.events.isEnabled(type)) {\n          this.events.dispatch(type, {\n            type: type,\n            target: this,\n            originalEvent: event.originalEvent\n          });\n        }\n      }\n      let positionX = this._getPosition(local).x;\n      let positionY = this._getPosition(local).y;\n      this.setPrivate(\"downPositionX\", positionX);\n      this.setPrivate(\"downPositionY\", positionY);\n    }\n  }\n  _handleCursorUp(event) {\n    // TODO: handle multitouch\n    if (this._downPoint) {\n      const behavior = this.get(\"behavior\", \"none\");\n      if (behavior != \"none\") {\n        if (behavior.charAt(0) === \"z\") {\n          this.selection.hide();\n        }\n        const rootPoint = event.point;\n        let local = this._display.toLocal(rootPoint);\n        const downPoint = this._downPoint;\n        const moveThreshold = this.get(\"moveThreshold\", 1);\n        if (local && downPoint) {\n          let dispatch = false;\n          if (behavior === \"zoomX\" || behavior === \"zoomXY\" || behavior === \"selectX\" || behavior === \"selectXY\") {\n            if (Math.abs(local.x - downPoint.x) > moveThreshold) {\n              dispatch = true;\n            }\n          }\n          if (behavior === \"zoomY\" || behavior === \"zoomXY\" || behavior === \"selectY\" || behavior === \"selectXY\") {\n            if (Math.abs(local.y - downPoint.y) > moveThreshold) {\n              dispatch = true;\n            }\n          }\n          if (dispatch) {\n            const type = \"selectended\";\n            if (this.events.isEnabled(type)) {\n              this.events.dispatch(type, {\n                type: type,\n                target: this,\n                originalEvent: event.originalEvent\n              });\n            }\n          } else {\n            const type = \"selectcancelled\";\n            if (this.events.isEnabled(type)) {\n              this.events.dispatch(type, {\n                type: type,\n                target: this,\n                originalEvent: event.originalEvent\n              });\n            }\n          }\n        }\n      }\n    }\n    this._downPoint = undefined;\n  }\n  _handleMove(event) {\n    if (this.getPrivate(\"visible\")) {\n      const chart = this.chart;\n      if (chart && $object.keys(chart.plotContainer._downPoints).length > 1) {\n        this.set(\"forceHidden\", true);\n        return;\n      } else {\n        this.set(\"forceHidden\", false);\n      }\n      // TODO: handle multitouch\n      const rootPoint = event.point;\n      const lastPoint = this._lastPoint;\n      if (Math.round(lastPoint.x) === Math.round(rootPoint.x) && Math.round(lastPoint.y) === Math.round(rootPoint.y)) {\n        return;\n      }\n      this._lastPoint = rootPoint;\n      this.setPrivate(\"lastPoint\", rootPoint);\n      this.handleMove({\n        x: rootPoint.x,\n        y: rootPoint.y\n      }, false, event.originalEvent);\n    }\n  }\n  _getPosition(point) {\n    return {\n      x: point.x / this.width(),\n      y: point.y / this.height()\n    };\n  }\n  /**\r\n   * Moves the cursor to X/Y coordinates within chart container (`point`).\r\n   *\r\n   * If `skipEvent` parameter is set to `true`, the move will not invoke\r\n   * the `\"cursormoved\"` event.\r\n   *\r\n   * @param  point      X/Y to move cursor to\r\n   * @param  skipEvent  Do not fire \"cursormoved\" event\r\n   */\n  handleMove(point, skipEvent, originalEvent) {\n    if (!point) {\n      point = this._movePoint;\n    }\n    const alwaysShow = this.get(\"alwaysShow\");\n    if (!point) {\n      this.hide(0);\n      return;\n    }\n    this._movePoint = point;\n    let local = this._display.toLocal(point);\n    let chart = this.chart;\n    if (chart && (this._inPlot(local) || this._downPoint)) {\n      chart._movePoint = point;\n      if (this.isHidden()) {\n        this.show();\n        const behavior = this.get(\"behavior\", \"\");\n        if (behavior.charAt(0) == \"z\") {\n          this.selection.set(\"draw\", () => {});\n        }\n      }\n      let x = local.x;\n      let y = local.y;\n      let xyPos = this._getPosition(local);\n      this.setPrivate(\"point\", local);\n      let snapToSeries = this.get(\"snapToSeries\");\n      if (this._downPoint) {\n        snapToSeries = undefined;\n      }\n      let userPositionX = this.get(\"positionX\");\n      let positionX = xyPos.x;\n      if ($type.isNumber(userPositionX)) {\n        positionX = userPositionX;\n      }\n      let userPositionY = this.get(\"positionY\");\n      let positionY = xyPos.y;\n      if ($type.isNumber(userPositionY)) {\n        positionY = userPositionY;\n      }\n      this.setPrivate(\"positionX\", positionX);\n      this.setPrivate(\"positionY\", positionY);\n      const xy = this._getPoint(positionX, positionY);\n      x = xy.x;\n      y = xy.y;\n      chart.xAxes.each(axis => {\n        axis._handleCursorPosition(positionX, snapToSeries);\n        if (alwaysShow) {\n          axis.handleCursorShow();\n        }\n      });\n      chart.yAxes.each(axis => {\n        axis._handleCursorPosition(positionY, snapToSeries);\n        if (alwaysShow) {\n          axis.handleCursorShow();\n        }\n      });\n      if (!skipEvent) {\n        chart._handleCursorPosition();\n        const type = \"cursormoved\";\n        if (this.events.isEnabled(type)) {\n          this.events.dispatch(type, {\n            type: type,\n            target: this,\n            point: point,\n            originalEvent: originalEvent\n          });\n        }\n      }\n      this._updateLines(x, y);\n      chart.arrangeTooltips();\n    } else if (!this._downPoint) {\n      if (!alwaysShow) {\n        this.hide(0);\n        const type = \"cursorhidden\";\n        if (this.events.isEnabled(type)) {\n          this.events.dispatch(type, {\n            type: type,\n            target: this\n          });\n        }\n      }\n    }\n    if (this._downPoint && this.get(\"behavior\") != \"none\") {\n      this._updateSelection(local);\n    }\n  }\n  _getPoint(positionX, positionY) {\n    return {\n      x: this.width() * positionX,\n      y: this.height() * positionY\n    };\n  }\n  _updateLines(x, y) {\n    if (!this._tooltipX) {\n      this.lineX.set(\"x\", x);\n    }\n    if (!this._tooltipY) {\n      this.lineY.set(\"y\", y);\n    }\n    this._drawLines();\n  }\n  _updateSelection(point) {\n    const selection = this.selection;\n    const behavior = this.get(\"behavior\");\n    const w = this.width();\n    const h = this.height();\n    if (point.x < 0) {\n      point.x = 0;\n    }\n    if (point.x > w) {\n      point.x = w;\n    }\n    if (point.y < 0) {\n      point.y = 0;\n    }\n    if (point.y > h) {\n      point.y = h;\n    }\n    selection.set(\"draw\", display => {\n      const downPoint = this._downPoint;\n      if (downPoint) {\n        if (behavior === \"zoomXY\" || behavior === \"selectXY\") {\n          display.moveTo(downPoint.x, downPoint.y);\n          display.lineTo(downPoint.x, point.y);\n          display.lineTo(point.x, point.y);\n          display.lineTo(point.x, downPoint.y);\n          display.lineTo(downPoint.x, downPoint.y);\n        } else if (behavior === \"zoomX\" || behavior === \"selectX\") {\n          display.moveTo(downPoint.x, 0);\n          display.lineTo(downPoint.x, h);\n          display.lineTo(point.x, h);\n          display.lineTo(point.x, 0);\n          display.lineTo(downPoint.x, 0);\n        } else if (behavior === \"zoomY\" || behavior === \"selectY\") {\n          display.moveTo(0, downPoint.y);\n          display.lineTo(w, downPoint.y);\n          display.lineTo(w, point.y);\n          display.lineTo(0, point.y);\n          display.lineTo(0, downPoint.y);\n        }\n      }\n    });\n  }\n  _onHide() {\n    if (this.isHidden()) {\n      let chart = this.chart;\n      if (chart) {\n        chart.xAxes.each(axis => {\n          axis.handleCursorHide();\n        });\n        chart.yAxes.each(axis => {\n          axis.handleCursorHide();\n        });\n        chart.series.each(series => {\n          series.handleCursorHide();\n        });\n      }\n    }\n    super._onHide();\n  }\n  _onShow() {\n    if (!this.isHidden()) {\n      let chart = this.chart;\n      if (chart) {\n        chart.xAxes.each(axis => {\n          axis.handleCursorShow();\n        });\n        chart.yAxes.each(axis => {\n          axis.handleCursorShow();\n        });\n      }\n    }\n    super._onShow();\n  }\n  _dispose() {\n    super._dispose();\n    this.selection.dispose();\n  }\n}\nObject.defineProperty(XYCursor, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"XYCursor\"\n});\nObject.defineProperty(XYCursor, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Container.classNames.concat([XYCursor.className])\n});\n", "import { __awaiter } from \"tslib\";\nimport { DataItem } from \"../../../core/render/Component\";\nimport { Series } from \"../../../core/render/Series\";\nimport { List } from \"../../../core/util/List\";\nimport { Container } from \"../../../core/render/Container\";\nimport { Graphics } from \"../../../core/render/Graphics\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $object from \"../../../core/util/Object\";\nimport * as $array from \"../../../core/util/Array\";\nimport * as $utils from \"../../../core/util/Utils\";\n/**\r\n * @ignore\r\n */\nfunction min(left, right) {\n  if (left == null) {\n    return right;\n  } else if (right == null) {\n    return left;\n  } else if (right < left) {\n    return right;\n  } else {\n    return left;\n  }\n}\n/**\r\n * @ignore\r\n */\nfunction max(left, right) {\n  if (left == null) {\n    return right;\n  } else if (right == null) {\n    return left;\n  } else if (right > left) {\n    return right;\n  } else {\n    return left;\n  }\n}\n/**\r\n * A base class for all XY chart series.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/} for more info\r\n */\nexport class XYSeries extends Series {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"_xField\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_yField\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_xOpenField\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_yOpenField\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_xLowField\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_xHighField\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_yLowField\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_yHighField\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_axesDirty\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_stackDirty\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_selectionProcessed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_dataSets\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_mainContainerMask\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_x\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_y\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_bullets\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    /**\r\n     * A [[Container]] that us used to put series' elements in.\r\n     *\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"mainContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.children.push(Container.new(this._root, {}))\n    });\n    /**\r\n     * A list of axis ranges that affect the series.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/} for more info\r\n     */\n    Object.defineProperty(this, \"axisRanges\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new List()\n    });\n    Object.defineProperty(this, \"_skipped\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_couldStackTo\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, \"_reallyStackedTo\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_stackedSeries\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_aLocationX0\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_aLocationX1\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(this, \"_aLocationY0\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_aLocationY1\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(this, \"_showBullets\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.defineProperty(this, \"valueXFields\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [\"valueX\", \"openValueX\", \"lowValueX\", \"highValueX\"]\n    });\n    Object.defineProperty(this, \"valueYFields\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [\"valueY\", \"openValueY\", \"lowValueY\", \"highValueY\"]\n    });\n    Object.defineProperty(this, \"_valueXFields\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_valueYFields\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    // used for full min/max\n    Object.defineProperty(this, \"_valueXShowFields\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_valueYShowFields\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    // used for selection (uses working)\n    Object.defineProperty(this, \"__valueXShowFields\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"__valueYShowFields\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_emptyDataItem\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new DataItem(this, undefined, {})\n    });\n    Object.defineProperty(this, \"_dataSetId\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_tooltipFieldX\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_tooltipFieldY\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_posXDp\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_posYDp\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n  }\n  _afterNew() {\n    this.fields.push(\"categoryX\", \"categoryY\", \"openCategoryX\", \"openCategoryY\");\n    this.valueFields.push(\"valueX\", \"valueY\", \"openValueX\", \"openValueY\", \"lowValueX\", \"lowValueY\", \"highValueX\", \"highValueY\");\n    this._setRawDefault(\"vcx\", 1);\n    this._setRawDefault(\"vcy\", 1);\n    // this can't go to themes, as data might be parsed before theme\n    this._setRawDefault(\"valueXShow\", \"valueXWorking\");\n    this._setRawDefault(\"valueYShow\", \"valueYWorking\");\n    this._setRawDefault(\"openValueXShow\", \"openValueXWorking\");\n    this._setRawDefault(\"openValueYShow\", \"openValueYWorking\");\n    this._setRawDefault(\"lowValueXShow\", \"lowValueXWorking\");\n    this._setRawDefault(\"lowValueYShow\", \"lowValueYWorking\");\n    this._setRawDefault(\"highValueXShow\", \"highValueXWorking\");\n    this._setRawDefault(\"highValueYShow\", \"highValueYWorking\");\n    this._setRawDefault(\"lowValueXGrouped\", \"low\");\n    this._setRawDefault(\"lowValueYGrouped\", \"low\");\n    this._setRawDefault(\"highValueXGrouped\", \"high\");\n    this._setRawDefault(\"highValueYGrouped\", \"high\");\n    super._afterNew();\n    this.set(\"maskContent\", true);\n    this._disposers.push(this.axisRanges.events.onAll(change => {\n      if (change.type === \"clear\") {\n        $array.each(change.oldValues, axisRange => {\n          this._removeAxisRange(axisRange);\n        });\n      } else if (change.type === \"push\") {\n        this._processAxisRange(change.newValue);\n      } else if (change.type === \"setIndex\") {\n        this._processAxisRange(change.newValue);\n      } else if (change.type === \"insertIndex\") {\n        this._processAxisRange(change.newValue);\n      } else if (change.type === \"removeIndex\") {\n        this._removeAxisRange(change.oldValue);\n      } else if (change.type === \"moveIndex\") {\n        this._processAxisRange(change.value);\n      } else {\n        throw new Error(\"Unknown IStreamEvent type\");\n      }\n    }));\n    this.states.create(\"hidden\", {\n      opacity: 1,\n      visible: false\n    });\n    this.onPrivate(\"startIndex\", () => {\n      this.root.events.once(\"frameended\", () => {\n        this.updateLegendValue();\n      });\n    });\n    this.onPrivate(\"endIndex\", () => {\n      this.root.events.once(\"frameended\", () => {\n        this.updateLegendValue();\n      });\n    });\n    this._makeFieldNames();\n  }\n  _processAxisRange(axisRange) {\n    const container = Container.new(this._root, {});\n    axisRange.container = container;\n    this.children.push(container);\n    axisRange.series = this;\n    const axisDataItem = axisRange.axisDataItem;\n    axisDataItem.setRaw(\"isRange\", true);\n    const axis = axisDataItem.component;\n    if (axis) {\n      axis._processAxisRange(axisDataItem, [\"range\", \"series\"]);\n      const bullet = axisDataItem.get(\"bullet\");\n      if (bullet) {\n        const sprite = bullet.get(\"sprite\");\n        if (sprite) {\n          sprite.setPrivate(\"visible\", false);\n        }\n      }\n      const axisFill = axisDataItem.get(\"axisFill\");\n      if (axisFill) {\n        container.set(\"mask\", axisFill);\n      }\n      axis._seriesAxisRanges.push(axisDataItem);\n    }\n  }\n  _onDataClear() {\n    super._onDataClear();\n    $object.each(this._dataSets, (_key, dataItems) => {\n      $array.each(dataItems, dataItem => {\n        dataItem.dispose();\n      });\n      dataItems.length = 0;\n    });\n  }\n  _removeAxisRange(axisRange) {\n    const axisDataItem = axisRange.axisDataItem;\n    const axis = axisDataItem.component;\n    axisDataItem.dispose();\n    $array.remove(axis._seriesAxisRanges, axisDataItem);\n    const container = axisRange.container;\n    if (container) {\n      container.dispose();\n    }\n  }\n  _updateFields() {\n    super._updateFields();\n    this._valueXFields = [];\n    this._valueYFields = [];\n    this._valueXShowFields = [];\n    this._valueYShowFields = [];\n    this.__valueXShowFields = [];\n    this.__valueYShowFields = [];\n    if (this.valueXFields) {\n      $array.each(this.valueXFields, key => {\n        const field = this.get(key + \"Field\");\n        if (field) {\n          this._valueXFields.push(key);\n          let field = this.get(key + \"Show\");\n          this.__valueXShowFields.push(field);\n          if (field.indexOf(\"Working\") != -1) {\n            this._valueXShowFields.push(field.split(\"Working\")[0]);\n          } else {\n            this._valueXShowFields.push(field);\n          }\n        }\n      });\n    }\n    if (this.valueYFields) {\n      $array.each(this.valueYFields, key => {\n        const field = this.get(key + \"Field\");\n        if (field) {\n          this._valueYFields.push(key);\n          let field = this.get(key + \"Show\");\n          this.__valueYShowFields.push(field);\n          if (field.indexOf(\"Working\") != -1) {\n            this._valueYShowFields.push(field.split(\"Working\")[0]);\n          } else {\n            this._valueYShowFields.push(field);\n          }\n        }\n      });\n    }\n  }\n  _dispose() {\n    super._dispose();\n    this._bullets = {};\n    const chart = this.chart;\n    if (chart) {\n      chart.series.removeValue(this);\n    }\n    $array.removeFirst(this.get(\"xAxis\").series, this);\n    $array.removeFirst(this.get(\"yAxis\").series, this);\n  }\n  // TODO use  SelectKeys<this[\"_privateSettings\"], number | undefined>\n  _min(key, value) {\n    let newValue = min(this.getPrivate(key), value);\n    this.setPrivate(key, newValue);\n  }\n  // TODO use  SelectKeys<this[\"_privateSettings\"], number | undefined>\n  _max(key, value) {\n    let newValue = max(this.getPrivate(key), value);\n    this.setPrivate(key, newValue);\n  }\n  _shouldMakeBullet(dataItem) {\n    const xAxis = this.get(\"xAxis\");\n    const yAxis = this.get(\"yAxis\");\n    const baseAxis = this.get(\"baseAxis\");\n    if (!xAxis.inited || !yAxis.inited) {\n      return false;\n    }\n    const minBulletDistance = this.get(\"minBulletDistance\", 0);\n    if (minBulletDistance > 0) {\n      let startIndex = this.startIndex();\n      let endIndex = this.endIndex();\n      let count = endIndex - startIndex;\n      if (xAxis == baseAxis) {\n        if (xAxis.get(\"renderer\").axisLength() / count < minBulletDistance / 5) {\n          return false;\n        }\n      } else if (yAxis == baseAxis) {\n        if (yAxis.get(\"renderer\").axisLength() / count < minBulletDistance / 5) {\n          return false;\n        }\n      }\n    }\n    if (dataItem.get(this._xField) != null && dataItem.get(this._yField) != null) {\n      return true;\n    }\n    return false;\n  }\n  _makeFieldNames() {\n    const xAxis = this.get(\"xAxis\");\n    const yAxis = this.get(\"yAxis\");\n    const xName = xAxis.getPrivate(\"name\");\n    const xCapName = $utils.capitalizeFirst(xName);\n    const yName = yAxis.getPrivate(\"name\");\n    const yCapName = $utils.capitalizeFirst(yName);\n    const xLetter = xAxis.get(\"renderer\").getPrivate(\"letter\");\n    const yLetter = yAxis.get(\"renderer\").getPrivate(\"letter\");\n    const open = \"open\";\n    const low = \"low\";\n    const high = \"high\";\n    const show = \"Show\";\n    if (xAxis.className === \"ValueAxis\") {\n      this._xField = this.get(xName + xLetter + show);\n      this._xOpenField = this.get(open + xCapName + xLetter + show);\n      this._xLowField = this.get(low + xCapName + xLetter + show);\n      this._xHighField = this.get(high + xCapName + xLetter + show);\n    } else {\n      this._xField = xName + xLetter;\n      this._xOpenField = open + xCapName + xLetter;\n      this._xLowField = low + xCapName + xLetter;\n      this._xHighField = high + xCapName + xLetter;\n    }\n    if (yAxis.className === \"ValueAxis\") {\n      this._yField = this.get(yName + yLetter + show);\n      this._yOpenField = this.get(open + yCapName + yLetter + show);\n      this._yLowField = this.get(low + yCapName + yLetter + show);\n      this._yHighField = this.get(high + yCapName + yLetter + show);\n    } else {\n      this._yField = yName + yLetter;\n      this._yOpenField = open + yCapName + yLetter;\n      this._yLowField = low + yCapName + yLetter;\n      this._yHighField = high + yCapName + yLetter;\n    }\n  }\n  _fixVC() {\n    const xAxis = this.get(\"xAxis\");\n    const yAxis = this.get(\"yAxis\");\n    const baseAxis = this.get(\"baseAxis\");\n    const hiddenState = this.states.lookup(\"hidden\");\n    const sequencedInterpolation = this.get(\"sequencedInterpolation\");\n    if (hiddenState) {\n      let value = 0;\n      if (sequencedInterpolation) {\n        value = 0.999999999999; // makes animate, good for stacked\n      }\n      if (xAxis === baseAxis) {\n        hiddenState.set(\"vcy\", value);\n      } else if (yAxis === baseAxis) {\n        hiddenState.set(\"vcx\", value);\n      } else {\n        hiddenState.set(\"vcy\", value);\n        hiddenState.set(\"vcx\", value);\n      }\n    }\n  }\n  _handleMaskBullets() {\n    if (this.isDirty(\"maskBullets\")) {\n      this.bulletsContainer.set(\"maskContent\", this.get(\"maskBullets\"));\n    }\n  }\n  _fixPosition() {\n    const xAxis = this.get(\"xAxis\");\n    const yAxis = this.get(\"yAxis\");\n    this.set(\"x\", xAxis.x() - $utils.relativeToValue(xAxis.get(\"centerX\", 0), xAxis.width()) - xAxis.parent.get(\"paddingLeft\", 0));\n    this.set(\"y\", yAxis.y() - $utils.relativeToValue(yAxis.get(\"centerY\", 0), yAxis.height()) - yAxis.parent.get(\"paddingTop\", 0));\n    this.bulletsContainer.set(\"y\", this.y());\n    this.bulletsContainer.set(\"x\", this.x());\n  }\n  _prepareChildren() {\n    super._prepareChildren();\n    this._bullets = {};\n    if (this.isDirty(\"valueYShow\") || this.isDirty(\"valueXShow\") || this.isDirty(\"openValueYShow\") || this.isDirty(\"openValueXShow\") || this.isDirty(\"lowValueYShow\") || this.isDirty(\"lowValueXShow\") || this.isDirty(\"highValueYShow\") || this.isDirty(\"highValueXShow\")) {\n      this._updateFields();\n      this._makeFieldNames();\n      this._valuesDirty = true;\n    }\n    if (this.isDirty(\"xAxis\") || this.isDirty(\"yAxis\")) {\n      this._valuesDirty = true;\n    }\n    this.set(\"width\", this.get(\"xAxis\").width());\n    this.set(\"height\", this.get(\"yAxis\").height());\n    this._handleMaskBullets();\n    const xAxis = this.get(\"xAxis\");\n    const yAxis = this.get(\"yAxis\");\n    const baseAxis = this.get(\"baseAxis\");\n    const tooltipPositionX = this.get(\"tooltipPositionX\");\n    let tooltipFieldX;\n    switch (tooltipPositionX) {\n      case \"open\":\n        tooltipFieldX = this._xOpenField;\n        break;\n      case \"low\":\n        tooltipFieldX = this._xLowField;\n        break;\n      case \"high\":\n        tooltipFieldX = this._xHighField;\n        break;\n      default:\n        tooltipFieldX = this._xField;\n    }\n    this._tooltipFieldX = tooltipFieldX;\n    const tooltipPositionY = this.get(\"tooltipPositionY\");\n    let tooltipFieldY;\n    switch (tooltipPositionY) {\n      case \"open\":\n        tooltipFieldY = this._yOpenField;\n        break;\n      case \"low\":\n        tooltipFieldY = this._yLowField;\n        break;\n      case \"high\":\n        tooltipFieldY = this._yHighField;\n        break;\n      default:\n        tooltipFieldY = this._yField;\n    }\n    this._tooltipFieldY = tooltipFieldY;\n    if (this.isDirty(\"baseAxis\")) {\n      this._fixVC();\n    }\n    this._fixPosition();\n    const stacked = this.get(\"stacked\");\n    if (this.isDirty(\"stacked\")) {\n      if (stacked) {\n        if (this._valuesDirty && !this._dataProcessed) {} else {\n          this._stack();\n        }\n      } else {\n        this._unstack();\n      }\n    }\n    if (this._valuesDirty && !this._dataProcessed) {\n      this._dataProcessed = true;\n      if (stacked) {\n        this._stack();\n      }\n      $array.each(this.dataItems, dataItem => {\n        $array.each(this._valueXShowFields, key => {\n          let value = dataItem.get(key);\n          if (value != null) {\n            if (stacked) {\n              value += this.getStackedXValue(dataItem, key);\n            }\n            this._min(\"minX\", value);\n            this._max(\"maxX\", value);\n          }\n        });\n        $array.each(this._valueYShowFields, key => {\n          let value = dataItem.get(key);\n          if (value != null) {\n            if (stacked) {\n              value += this.getStackedYValue(dataItem, key);\n            }\n            this._min(\"minY\", value);\n            this._max(\"maxY\", value);\n          }\n        });\n        xAxis.processSeriesDataItem(dataItem, this._valueXFields);\n        yAxis.processSeriesDataItem(dataItem, this._valueYFields);\n      });\n      xAxis._seriesValuesDirty = true;\n      yAxis._seriesValuesDirty = true;\n      if (!this.get(\"ignoreMinMax\")) {\n        if (this.isPrivateDirty(\"minX\") || this.isPrivateDirty(\"maxX\")) {\n          xAxis.markDirtyExtremes();\n        }\n        if (this.isPrivateDirty(\"minY\") || this.isPrivateDirty(\"maxY\")) {\n          yAxis.markDirtyExtremes();\n        }\n      }\n      this._markStakedDirtyStack();\n      //this.updateLegendMarker(undefined); // causes legend marker to change color instantly when on\n      if (!this.get(\"tooltipDataItem\")) {\n        this.updateLegendValue(undefined);\n      }\n    }\n    if (this.isDirty(\"vcx\") || this.isDirty(\"vcy\")) {\n      this._markStakedDirtyStack();\n    }\n    if (!this._dataGrouped) {\n      xAxis._groupSeriesData(this);\n      yAxis._groupSeriesData(this);\n      this._dataGrouped = true;\n    }\n    if (this._valuesDirty || this.isPrivateDirty(\"startIndex\") || this.isPrivateDirty(\"adjustedStartIndex\") || this.isPrivateDirty(\"endIndex\") || this.isDirty(\"vcx\") || this.isDirty(\"vcy\") || this._stackDirty || this._sizeDirty) {\n      let startIndex = this.startIndex();\n      let endIndex = this.endIndex();\n      let minBulletDistance = this.get(\"minBulletDistance\", 0);\n      if (minBulletDistance > 0 && baseAxis) {\n        if (baseAxis.get(\"renderer\").axisLength() / (endIndex - startIndex) > minBulletDistance) {\n          this._showBullets = true;\n        } else {\n          this._showBullets = false;\n        }\n      }\n      if ((this._psi != startIndex || this._pei != endIndex || this.isDirty(\"vcx\") || this.isDirty(\"vcy\") || this.isPrivateDirty(\"adjustedStartIndex\") || this._stackDirty || this._valuesDirty) && !this._selectionProcessed) {\n        this._selectionProcessed = true;\n        const vcx = this.get(\"vcx\", 1);\n        const vcy = this.get(\"vcy\", 1);\n        const stacked = this.get(\"stacked\", false);\n        const outOfSelection = this.getPrivate(\"outOfSelection\");\n        if (baseAxis === xAxis || !baseAxis) {\n          yAxis._calculateTotals();\n          this.setPrivateRaw(\"selectionMinY\", undefined);\n          this.setPrivateRaw(\"selectionMaxY\", undefined);\n          if (!outOfSelection) {\n            for (let i = startIndex; i < endIndex; i++) {\n              this.processYSelectionDataItem(this.dataItems[i], vcy, stacked);\n            }\n          } else {\n            yAxis.markDirtySelectionExtremes();\n          }\n        }\n        if (baseAxis === yAxis || !baseAxis) {\n          xAxis._calculateTotals();\n          this.setPrivateRaw(\"selectionMinX\", undefined);\n          this.setPrivateRaw(\"selectionMaxX\", undefined);\n          if (!outOfSelection) {\n            for (let i = startIndex; i < endIndex; i++) {\n              this.processXSelectionDataItem(this.dataItems[i], vcx, stacked);\n            }\n          } else {\n            yAxis.markDirtySelectionExtremes();\n          }\n        }\n        if (baseAxis === xAxis || !baseAxis) {\n          if (this.get(\"valueYShow\") !== \"valueYWorking\" || this.get(\"useSelectionExtremes\")) {\n            const selectionMinY = this.getPrivate(\"selectionMinY\");\n            if (selectionMinY != null) {\n              this.setPrivateRaw(\"minY\", selectionMinY);\n              yAxis.markDirtyExtremes();\n            }\n            const selectionMaxY = this.getPrivate(\"selectionMaxY\");\n            if (selectionMaxY != null) {\n              this.setPrivateRaw(\"maxY\", selectionMaxY);\n              yAxis.markDirtyExtremes();\n            }\n          }\n        }\n        if (baseAxis === yAxis || !baseAxis) {\n          if (this.get(\"valueXShow\") !== \"valueXWorking\" || this.get(\"useSelectionExtremes\")) {\n            const selectionMinX = this.getPrivate(\"selectionMinX\");\n            if (selectionMinX != null) {\n              this.setPrivateRaw(\"minX\", selectionMinX);\n              yAxis.markDirtyExtremes();\n            }\n            const selectionMaxX = this.getPrivate(\"selectionMaxX\");\n            if (selectionMaxX != null) {\n              this.setPrivateRaw(\"maxX\", selectionMaxX);\n              xAxis.markDirtyExtremes();\n            }\n          }\n        }\n        if (this.isPrivateDirty(\"selectionMinX\") || this.isPrivateDirty(\"selectionMaxX\")) {\n          xAxis.markDirtySelectionExtremes();\n        }\n        if (this.isPrivateDirty(\"selectionMinY\") || this.isPrivateDirty(\"selectionMaxY\")) {\n          yAxis.markDirtySelectionExtremes();\n        }\n        // this.updateLegendValue(undefined); flickers while panning\n      }\n    }\n  }\n  _makeRangeMask() {\n    if (this.axisRanges.length > 0) {\n      let mainContainerMask = this._mainContainerMask;\n      if (mainContainerMask == null) {\n        mainContainerMask = this.children.push(Graphics.new(this._root, {}));\n        this._mainContainerMask = mainContainerMask;\n        mainContainerMask.set(\"draw\", (display, target) => {\n          const parent = this.parent;\n          if (parent) {\n            const w = this._root.container.width();\n            const h = this._root.container.height();\n            display.moveTo(-w, -h);\n            display.lineTo(-w, h * 2);\n            display.lineTo(w * 2, h * 2);\n            display.lineTo(w * 2, -h);\n            display.lineTo(-w, -h);\n            this.axisRanges.each(axisRange => {\n              const fill = axisRange.axisDataItem.get(\"axisFill\");\n              if (parent) {\n                if (fill) {\n                  let draw = fill.get(\"draw\");\n                  if (draw) {\n                    draw(display, target);\n                  }\n                }\n              }\n            });\n          }\n          this.mainContainer._display.mask = mainContainerMask._display;\n        });\n      }\n      mainContainerMask.markDirty();\n      mainContainerMask._markDirtyKey(\"fill\");\n    } else {\n      this.mainContainer._display.mask = null;\n    }\n  }\n  _updateChildren() {\n    super._updateChildren();\n    // save for performance\n    this._x = this.x();\n    this._y = this.y();\n    this._makeRangeMask();\n  }\n  _stack() {\n    const chart = this.chart;\n    if (chart) {\n      const seriesIndex = chart.series.indexOf(this);\n      this._couldStackTo = [];\n      if (seriesIndex > 0) {\n        let series;\n        for (let i = seriesIndex - 1; i >= 0; i--) {\n          series = chart.series.getIndex(i);\n          if (series.get(\"xAxis\") === this.get(\"xAxis\") && series.get(\"yAxis\") === this.get(\"yAxis\") && series.className === this.className) {\n            this._couldStackTo.push(series);\n            if (!series.get(\"stacked\")) {\n              break;\n            }\n          }\n        }\n      }\n      this._stackDataItems();\n    }\n  }\n  _unstack() {\n    $object.each(this._reallyStackedTo, (_key, value) => {\n      delete value._stackedSeries[this.uid];\n    });\n    this._reallyStackedTo = {};\n    $array.each(this.dataItems, dataItem => {\n      dataItem.setRaw(\"stackToItemY\", undefined);\n      dataItem.setRaw(\"stackToItemX\", undefined);\n    });\n  }\n  _handleRemoved() {\n    const xAxis = this.get(\"xAxis\");\n    if (xAxis) {\n      xAxis._handleSeriesRemoved();\n    }\n    const yAxis = this.get(\"yAxis\");\n    if (yAxis) {\n      yAxis._handleSeriesRemoved();\n    }\n  }\n  _stackDataItems() {\n    // this works only with the same number of data @todo: search by date/category?\n    const baseAxis = this.get(\"baseAxis\");\n    const xAxis = this.get(\"xAxis\");\n    const yAxis = this.get(\"yAxis\");\n    let field;\n    let stackToItemKey;\n    if (baseAxis === xAxis) {\n      field = \"valueY\";\n      stackToItemKey = \"stackToItemY\";\n    } else if (baseAxis === yAxis) {\n      field = \"valueX\";\n      stackToItemKey = \"stackToItemX\";\n    }\n    let len = this._couldStackTo.length;\n    let index = 0;\n    const stackToNegative = this.get(\"stackToNegative\");\n    this._reallyStackedTo = {};\n    $array.each(this.dataItems, dataItem => {\n      for (let s = 0; s < len; s++) {\n        let stackToSeries = this._couldStackTo[s];\n        let stackToItem = stackToSeries.dataItems[index];\n        let value = dataItem.get(field);\n        if (stackToItem) {\n          let stackValue = stackToItem.get(field);\n          if (stackToNegative) {\n            if ($type.isNumber(value)) {\n              if ($type.isNumber(stackValue)) {\n                if (s == len - 1) {\n                  dataItem.setRaw(stackToItemKey, undefined);\n                }\n                if (value >= 0 && stackValue >= 0) {\n                  dataItem.setRaw(stackToItemKey, stackToItem);\n                  this._reallyStackedTo[stackToSeries.uid] = stackToSeries;\n                  stackToSeries._stackedSeries[this.uid] = this;\n                  break;\n                }\n                if (value < 0 && stackValue < 0) {\n                  dataItem.setRaw(stackToItemKey, stackToItem);\n                  this._reallyStackedTo[stackToSeries.uid] = stackToSeries;\n                  stackToSeries._stackedSeries[this.uid] = this;\n                  break;\n                }\n              }\n            } else {\n              break;\n            }\n          } else {\n            if ($type.isNumber(value) && $type.isNumber(stackValue)) {\n              dataItem.setRaw(stackToItemKey, stackToItem);\n              this._reallyStackedTo[stackToSeries.uid] = stackToSeries;\n              stackToSeries._stackedSeries[this.uid] = this;\n              break;\n            }\n          }\n        }\n      }\n      index++;\n    });\n  }\n  processXSelectionDataItem(dataItem, vcx, stacked) {\n    $array.each(this.__valueXShowFields, key => {\n      let value = dataItem.get(key);\n      if (value != null) {\n        if (stacked) {\n          value += this.getStackedXValueWorking(dataItem, key);\n        }\n        this._min(\"selectionMinX\", value);\n        this._max(\"selectionMaxX\", value * vcx);\n      }\n    });\n  }\n  processYSelectionDataItem(dataItem, vcy, stacked) {\n    $array.each(this.__valueYShowFields, key => {\n      let value = dataItem.get(key);\n      if (value != null) {\n        if (stacked) {\n          value += this.getStackedYValueWorking(dataItem, key);\n        }\n        this._min(\"selectionMinY\", value);\n        this._max(\"selectionMaxY\", value * vcy);\n      }\n    });\n  }\n  /**\r\n   * @ignore\r\n   */\n  getStackedYValueWorking(dataItem, key) {\n    const stackToItem = dataItem.get(\"stackToItemY\");\n    if (stackToItem) {\n      const stackedToSeries = stackToItem.component;\n      return stackToItem.get(key, 0) * stackedToSeries.get(\"vcy\", 1) + this.getStackedYValueWorking(stackToItem, key);\n    }\n    return 0;\n  }\n  /**\r\n   * @ignore\r\n   */\n  getStackedXValueWorking(dataItem, key) {\n    const stackToItem = dataItem.get(\"stackToItemX\");\n    if (stackToItem) {\n      const stackedToSeries = stackToItem.component;\n      return stackToItem.get(key, 0) * stackedToSeries.get(\"vcx\", 1) + this.getStackedXValueWorking(stackToItem, key);\n    }\n    return 0;\n  }\n  /**\r\n   * @ignore\r\n   */\n  getStackedYValue(dataItem, key) {\n    const stackToItem = dataItem.get(\"stackToItemY\");\n    if (stackToItem) {\n      return stackToItem.get(key, 0) + this.getStackedYValue(stackToItem, key);\n    }\n    return 0;\n  }\n  /**\r\n   * @ignore\r\n   */\n  getStackedXValue(dataItem, key) {\n    const stackToItem = dataItem.get(\"stackToItemX\");\n    if (stackToItem) {\n      return stackToItem.get(key, 0) + this.getStackedXValue(stackToItem, key);\n    }\n    return 0;\n  }\n  /**\r\n   * @ignore\r\n   */\n  createLegendMarker(_dataItem) {\n    this.updateLegendMarker();\n  }\n  _markDirtyAxes() {\n    this._axesDirty = true;\n    this.markDirty();\n  }\n  _markDataSetDirty() {\n    this._afterDataChange();\n    this._valuesDirty = true;\n    this._dataProcessed = false;\n    this._aggregatesCalculated = false;\n    this.markDirty();\n  }\n  _clearDirty() {\n    super._clearDirty();\n    this._axesDirty = false;\n    this._selectionProcessed = false;\n    this._stackDirty = false;\n    this._dataProcessed = false;\n  }\n  _positionBullet(bullet) {\n    let sprite = bullet.get(\"sprite\");\n    if (sprite) {\n      let dataItem = sprite.dataItem;\n      let locationX = bullet.get(\"locationX\", dataItem.get(\"locationX\", 0.5));\n      let locationY = bullet.get(\"locationY\", dataItem.get(\"locationY\", 0.5));\n      let xAxis = this.get(\"xAxis\");\n      let yAxis = this.get(\"yAxis\");\n      let exactLocationX = this.get(\"exactLocationX\", false);\n      let exactLocationY = this.get(\"exactLocationY\", false);\n      let positionX = xAxis.getDataItemPositionX(dataItem, this._xField, locationX, this.get(\"vcx\", 1), exactLocationX);\n      let positionY = yAxis.getDataItemPositionY(dataItem, this._yField, locationY, this.get(\"vcy\", 1), exactLocationY);\n      let point = this.getPoint(positionX, positionY);\n      let left = dataItem.get(\"left\", point.x);\n      let right = dataItem.get(\"right\", point.x);\n      let top = dataItem.get(\"top\", point.y);\n      let bottom = dataItem.get(\"bottom\", point.y);\n      let x = 0;\n      let y = 0;\n      let w = right - left;\n      let h = bottom - top;\n      if (this._shouldShowBullet(positionX, positionY)) {\n        sprite.setPrivate(\"visible\", !bullet.getPrivate(\"hidden\"));\n        let field = bullet.get(\"field\");\n        const baseAxis = this.get(\"baseAxis\");\n        const xAxis = this.get(\"xAxis\");\n        const yAxis = this.get(\"yAxis\");\n        if (field != undefined) {\n          let realField;\n          if (baseAxis == xAxis) {\n            if (field == \"value\") {\n              realField = this._yField;\n            } else if (field == \"open\") {\n              realField = this._yOpenField;\n            } else if (field == \"high\") {\n              realField = this._yHighField;\n            } else if (field == \"low\") {\n              realField = this._yLowField;\n            }\n            if (realField) {\n              positionY = yAxis.getDataItemPositionY(dataItem, realField, 0, this.get(\"vcy\", 1), exactLocationY);\n              point = yAxis.get(\"renderer\").positionToPoint(positionY);\n              y = point.y;\n              x = left + w * locationX;\n            }\n          } else {\n            if (field == \"value\") {\n              realField = this._xField;\n            } else if (field == \"open\") {\n              realField = this._xOpenField;\n            } else if (field == \"high\") {\n              realField = this._xHighField;\n            } else if (field == \"low\") {\n              realField = this._xLowField;\n            }\n            if (realField) {\n              positionX = xAxis.getDataItemPositionX(dataItem, realField, 0, this.get(\"vcx\", 1), exactLocationX);\n              point = xAxis.get(\"renderer\").positionToPoint(positionX);\n              x = point.x;\n              y = bottom - h * locationY;\n            }\n          }\n        } else {\n          x = left + w * locationX;\n          y = bottom - h * locationY;\n        }\n        const stacked = bullet.get(\"stacked\");\n        if (stacked) {\n          const chart = this.chart;\n          if (baseAxis == xAxis) {\n            let previousBullet = this._bullets[positionX + \"_\" + positionY];\n            if (previousBullet) {\n              let previousBounds = previousBullet.bounds();\n              let bounds = sprite.localBounds();\n              let yo = y;\n              y = previousBounds.top;\n              if (stacked == \"down\") {\n                y = previousBounds.bottom - bounds.top;\n              } else if (stacked == \"auto\") {\n                if (chart) {\n                  if (yo < chart.plotContainer.height() / 2) {\n                    y = previousBounds.bottom - bounds.top;\n                  } else {\n                    y += bounds.bottom;\n                  }\n                }\n              } else {\n                y += bounds.bottom;\n              }\n            }\n            this._bullets[positionX + \"_\" + positionY] = sprite;\n          } else {\n            let previousBullet = this._bullets[positionX + \"_\" + positionY];\n            if (previousBullet) {\n              let previousBounds = previousBullet.bounds();\n              let bounds = sprite.localBounds();\n              let xo = x;\n              x = previousBounds.right;\n              if (stacked == \"down\") {\n                x = previousBounds.left - bounds.right;\n              } else if (stacked == \"auto\") {\n                if (chart) {\n                  if (xo < chart.plotContainer.width() / 2) {\n                    x = previousBounds.left - bounds.right;\n                  } else {\n                    x -= bounds.left;\n                  }\n                }\n              } else {\n                x -= bounds.left;\n              }\n            }\n            this._bullets[positionX + \"_\" + positionY] = sprite;\n          }\n        }\n        if (sprite.isType(\"Label\")) {\n          sprite.setPrivate(\"maxWidth\", Math.abs(w));\n          sprite.setPrivate(\"maxHeight\", Math.abs(h));\n        }\n        sprite.setAll({\n          x,\n          y\n        });\n      } else {\n        sprite.setPrivate(\"visible\", false);\n      }\n    }\n  }\n  _shouldShowBullet(_positionX, _positionY) {\n    return this._showBullets;\n  }\n  /**\r\n   * @ignore\r\n   */\n  setDataSet(id) {\n    if (this._dataSets[id]) {\n      this._handleDataSetChange();\n      this._dataItems = this._dataSets[id];\n      this._markDataSetDirty();\n      this._dataSetId = id;\n      const type = \"datasetchanged\";\n      if (this.events.isEnabled(type)) {\n        this.events.dispatch(type, {\n          type: type,\n          target: this,\n          id: id\n        });\n      }\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  resetGrouping() {\n    $object.each(this._dataSets, (_key, dataSet) => {\n      if (dataSet != this._mainDataItems) {\n        $array.each(dataSet, dataItem => {\n          dataItem.dispose();\n        });\n      }\n    });\n    this._dataSets = {};\n    this._dataItems = this.mainDataItems;\n  }\n  _handleDataSetChange() {\n    $array.each(this._dataItems, dataItem => {\n      let bullets = dataItem.bullets;\n      if (bullets) {\n        $array.each(bullets, bullet => {\n          if (bullet) {\n            let sprite = bullet.get(\"sprite\");\n            if (sprite) {\n              sprite.setPrivate(\"visible\", false);\n            }\n          }\n        });\n      }\n    });\n    this._selectionProcessed = false; // for totals to be calculated\n  }\n  /**\r\n   * Shows hidden series.\r\n   *\r\n   * @param   duration  Duration of animation in milliseconds\r\n   * @return            Animation promise\r\n   */\n  show(duration) {\n    const _super = Object.create(null, {\n      show: {\n        get: () => super.show\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      this._fixVC();\n      let promises = [];\n      promises.push(_super.show.call(this, duration).then(() => {\n        this._isShowing = false;\n        let xAxis = this.get(\"xAxis\");\n        let yAxis = this.get(\"yAxis\");\n        let baseAxis = this.get(\"baseAxis\");\n        if (yAxis !== baseAxis) {\n          yAxis.markDirtySelectionExtremes();\n        }\n        if (xAxis !== baseAxis) {\n          xAxis.markDirtySelectionExtremes();\n        }\n      }));\n      promises.push(this.bulletsContainer.show(duration));\n      promises.push(this._sequencedShowHide(true, duration));\n      yield Promise.all(promises);\n    });\n  }\n  /**\r\n   * Hides series.\r\n   *\r\n   * @param   duration  Duration of animation in milliseconds\r\n   * @return            Animation promise\r\n   */\n  hide(duration) {\n    const _super = Object.create(null, {\n      hide: {\n        get: () => super.hide\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      this._fixVC();\n      let promises = [];\n      promises.push(_super.hide.call(this, duration).then(() => {\n        this._isHiding = false;\n      }));\n      promises.push(this.bulletsContainer.hide(duration));\n      promises.push(this._sequencedShowHide(false, duration));\n      yield Promise.all(promises);\n    });\n  }\n  /**\r\n   * Shows series's data item.\r\n   *\r\n   * @param   dataItem  Data item\r\n   * @param   duration  Animation duration in milliseconds\r\n   * @return            Promise\r\n   */\n  showDataItem(dataItem, duration) {\n    const _super = Object.create(null, {\n      showDataItem: {\n        get: () => super.showDataItem\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      const promises = [_super.showDataItem.call(this, dataItem, duration)];\n      if (!$type.isNumber(duration)) {\n        duration = this.get(\"stateAnimationDuration\", 0);\n      }\n      const easing = this.get(\"stateAnimationEasing\");\n      $array.each(this._valueFields, key => {\n        promises.push(dataItem.animate({\n          key: key + \"Working\",\n          to: dataItem.get(key),\n          duration: duration,\n          easing: easing\n        }).waitForStop());\n      });\n      yield Promise.all(promises);\n    });\n  }\n  /**\r\n   * Hides series's data item.\r\n   *\r\n   * @param   dataItem  Data item\r\n   * @param   duration  Animation duration in milliseconds\r\n   * @return            Promise\r\n   */\n  hideDataItem(dataItem, duration) {\n    const _super = Object.create(null, {\n      hideDataItem: {\n        get: () => super.hideDataItem\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      const promises = [_super.hideDataItem.call(this, dataItem, duration)];\n      const hiddenState = this.states.create(\"hidden\", {});\n      if (!$type.isNumber(duration)) {\n        duration = hiddenState.get(\"stateAnimationDuration\", this.get(\"stateAnimationDuration\", 0));\n      }\n      const easing = hiddenState.get(\"stateAnimationEasing\", this.get(\"stateAnimationEasing\"));\n      const xAxis = this.get(\"xAxis\");\n      const yAxis = this.get(\"yAxis\");\n      const baseAxis = this.get(\"baseAxis\");\n      const stacked = this.get(\"stacked\");\n      if (baseAxis === xAxis || !baseAxis) {\n        $array.each(this._valueYFields, key => {\n          let min = yAxis.getPrivate(\"min\");\n          let baseValue = yAxis.baseValue();\n          if ($type.isNumber(min) && min > baseValue) {\n            baseValue = min;\n          }\n          if (stacked) {\n            baseValue = 0;\n          }\n          let value = dataItem.get(key);\n          if (value != null) {\n            promises.push(dataItem.animate({\n              key: key + \"Working\",\n              to: baseValue,\n              duration: duration,\n              easing: easing\n            }).waitForStop());\n          }\n        });\n      }\n      if (baseAxis === yAxis || !baseAxis) {\n        let min = xAxis.getPrivate(\"min\");\n        let baseValue = xAxis.baseValue();\n        if ($type.isNumber(min) && min > baseValue) {\n          baseValue = min;\n        }\n        if (stacked) {\n          baseValue = 0;\n        }\n        $array.each(this._valueXFields, key => {\n          let value = dataItem.get(key);\n          if (value != null) {\n            promises.push(dataItem.animate({\n              key: key + \"Working\",\n              to: baseValue,\n              duration: duration,\n              easing: easing\n            }).waitForStop());\n          }\n        });\n      }\n      yield Promise.all(promises);\n    });\n  }\n  _markDirtyStack() {\n    this._stackDirty = true;\n    this.markDirty();\n    this._markStakedDirtyStack();\n  }\n  _markStakedDirtyStack() {\n    const stackedSeries = this._stackedSeries;\n    if (stackedSeries) {\n      $object.each(stackedSeries, (_key, value) => {\n        if (!value._stackDirty) {\n          value._markDirtyStack();\n        }\n      });\n    }\n  }\n  _afterChanged() {\n    super._afterChanged();\n    if (this._skipped) {\n      this._markDirtyAxes();\n      this._skipped = false;\n    }\n  }\n  /**\r\n   * Shows a tooltip for specific data item.\r\n   *\r\n   * @param  dataItem  Data item\r\n   */\n  showDataItemTooltip(dataItem) {\n    if (!this.getPrivate(\"doNotUpdateLegend\")) {\n      this.updateLegendMarker(dataItem);\n      this.updateLegendValue(dataItem);\n    }\n    const tooltip = this.get(\"tooltip\");\n    const exactLocationX = this.get(\"exactLocationX\", false);\n    const exactLocationY = this.get(\"exactLocationY\", false);\n    if (tooltip) {\n      if (!this.isHidden() && this.get(\"visible\")) {\n        tooltip._setDataItem(dataItem);\n        if (dataItem) {\n          let locationX = this.get(\"locationX\", 0);\n          let locationY = this.get(\"locationY\", 1);\n          let itemLocationX = dataItem.get(\"locationX\", locationX);\n          let itemLocationY = dataItem.get(\"locationY\", locationY);\n          const xAxis = this.get(\"xAxis\");\n          const yAxis = this.get(\"yAxis\");\n          const vcx = this.get(\"vcx\", 1);\n          const vcy = this.get(\"vcy\", 1);\n          const xPos = xAxis.getDataItemPositionX(dataItem, this._tooltipFieldX, this._aLocationX0 + (this._aLocationX1 - this._aLocationX0) * itemLocationX, vcx, exactLocationX);\n          const yPos = yAxis.getDataItemPositionY(dataItem, this._tooltipFieldY, this._aLocationY0 + (this._aLocationY1 - this._aLocationY0) * itemLocationY, vcy, exactLocationY);\n          const point = this.getPoint(xPos, yPos);\n          let show = true;\n          $array.each(this._valueFields, field => {\n            if (dataItem.get(field) == null) {\n              show = false;\n            }\n          });\n          if (show) {\n            const chart = this.chart;\n            if (chart && chart.inPlot(point)) {\n              tooltip.label.text.markDirtyText();\n              tooltip.set(\"tooltipTarget\", this._getTooltipTarget(dataItem));\n              tooltip.set(\"pointTo\", this._display.toGlobal({\n                x: point.x,\n                y: point.y\n              }));\n            } else {\n              tooltip._setDataItem(undefined);\n            }\n          } else {\n            tooltip._setDataItem(undefined);\n          }\n        }\n      } else {\n        this.hideTooltip();\n      }\n    }\n  }\n  hideTooltip() {\n    const tooltip = this.get(\"tooltip\");\n    if (tooltip) {\n      tooltip.set(\"tooltipTarget\", this);\n    }\n    return super.hideTooltip();\n  }\n  _getTooltipTarget(dataItem) {\n    if (this.get(\"seriesTooltipTarget\") == \"bullet\") {\n      const bullets = dataItem.bullets;\n      if (bullets && bullets.length > 0) {\n        const bullet = bullets[0];\n        const sprite = bullet.get(\"sprite\");\n        if (sprite) {\n          return sprite;\n        }\n      }\n    }\n    return this;\n  }\n  /**\r\n   * @ignore\r\n   */\n  updateLegendValue(dataItem) {\n    const legendDataItem = this.get(\"legendDataItem\");\n    if (legendDataItem) {\n      const label = legendDataItem.get(\"label\");\n      if (label) {\n        let txt = \"\";\n        if (dataItem) {\n          label._setDataItem(dataItem);\n          txt = this.get(\"legendLabelText\", label.get(\"text\", this.get(\"name\", \"\")));\n        } else {\n          label._setDataItem(this._emptyDataItem);\n          txt = this.get(\"legendRangeLabelText\", this.get(\"legendLabelText\", label.get(\"text\", this.get(\"name\", \"\"))));\n        }\n        label.set(\"text\", txt);\n      }\n      const valueLabel = legendDataItem.get(\"valueLabel\");\n      if (valueLabel) {\n        let txt = \"\";\n        if (dataItem) {\n          valueLabel._setDataItem(dataItem);\n          txt = this.get(\"legendValueText\", valueLabel.get(\"text\", \"\"));\n        } else {\n          valueLabel._setDataItem(this._emptyDataItem);\n          txt = this.get(\"legendRangeValueText\", valueLabel.get(\"text\", \"\"));\n        }\n        valueLabel.set(\"text\", txt);\n      }\n    }\n  }\n  _getItemReaderLabel() {\n    let text = \"X: {\" + this._xField;\n    if (this.get(\"xAxis\").isType(\"DateAxis\")) {\n      text += \".formatDate()\";\n    }\n    text += \"}; Y: {\" + this._yField;\n    if (this.get(\"yAxis\").isType(\"DateAxis\")) {\n      text += \".formatDate()\";\n    }\n    text += \"}\";\n    return text;\n  }\n  /**\r\n   * @ignore\r\n   */\n  getPoint(positionX, positionY) {\n    let x = this.get(\"xAxis\").get(\"renderer\").positionToCoordinate(positionX);\n    let y = this.get(\"yAxis\").get(\"renderer\").positionToCoordinate(positionY);\n    // if coordinate is super big, canvas fails to draw line, capping to some big number (won't make any visual difference)\n    let max = 999999999;\n    if (y < -max) {\n      y = -max;\n    }\n    if (y > max) {\n      y = max;\n    }\n    if (x < -max) {\n      x = -max;\n    }\n    if (x > max) {\n      x = max;\n    }\n    return {\n      x: x,\n      y: y\n    };\n  }\n  _shouldInclude(_position) {\n    return true;\n  }\n  /**\r\n   * @ignore\r\n   */\n  handleCursorHide() {\n    this.hideTooltip();\n    this.updateLegendValue(undefined);\n    this.updateLegendMarker(undefined);\n  }\n  _afterDataChange() {\n    super._afterDataChange();\n    this.get(\"xAxis\")._markDirtyKey(\"start\");\n    this.get(\"yAxis\")._markDirtyKey(\"start\");\n    this.resetExtremes();\n  }\n  /**\r\n   * Resets cached axis scale values.\r\n   */\n  resetExtremes() {\n    this.setPrivate(\"selectionMinX\", undefined);\n    this.setPrivate(\"selectionMaxX\", undefined);\n    this.setPrivate(\"selectionMinY\", undefined);\n    this.setPrivate(\"selectionMaxY\", undefined);\n    this.setPrivate(\"minX\", undefined);\n    this.setPrivate(\"minY\", undefined);\n    this.setPrivate(\"maxX\", undefined);\n    this.setPrivate(\"maxY\", undefined);\n  }\n  /**\r\n   * Creates and returns an axis range object.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/} for more info\r\n   * @param   axisDataItem  Axis data item\r\n   * @return                Axis range\r\n   */\n  createAxisRange(axisDataItem) {\n    return this.axisRanges.push({\n      axisDataItem: axisDataItem\n    });\n  }\n  /**\r\n   * A list of series's main (ungrouped) data items.\r\n   *\r\n   * @return  Data items\r\n   */\n  get mainDataItems() {\n    return this._mainDataItems;\n  }\n  /**\r\n   * @ignore\r\n   */\n  _adjustStartIndex(index) {\n    const xAxis = this.get(\"xAxis\");\n    const baseAxis = this.get(\"baseAxis\");\n    if (baseAxis == xAxis && xAxis.isType(\"DateAxis\")) {\n      const baseDuration = xAxis.baseDuration();\n      const minSelection = xAxis.getPrivate(\"selectionMin\", xAxis.getPrivate(\"min\", 0));\n      const dl = baseDuration * this.get(\"locationX\", 0.5);\n      let value = -Infinity;\n      while (value < minSelection) {\n        const dataItem = this.dataItems[index];\n        if (dataItem) {\n          const open = dataItem.open;\n          if (open) {\n            value = open[\"valueX\"];\n          } else {\n            value = dataItem.get(\"valueX\", 0);\n          }\n          value += dl;\n          if (value < minSelection) {\n            index++;\n          } else {\n            break;\n          }\n        } else {\n          break;\n        }\n      }\n    }\n    return index;\n  }\n}\nObject.defineProperty(XYSeries, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"XYSeries\"\n});\nObject.defineProperty(XYSeries, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Series.classNames.concat([XYSeries.className])\n});\n", "import { __awaiter } from \"tslib\";\nimport { XYSeries } from \"./XYSeries\";\nimport { Percent } from \"../../../core/util/Percent\";\nimport { visualSettings } from \"../../../core/render/Graphics\";\nimport * as $array from \"../../../core/util/Array\";\nimport * as $type from \"../../../core/util/Type\";\n/**\r\n * Base class for all \"column-based\" series\r\n */\nexport class BaseColumnSeries extends XYSeries {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"_ph\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_pw\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n  }\n  _makeGraphics(listTemplate, dataItem) {\n    return this.makeColumn(dataItem, listTemplate);\n  }\n  _makeFieldNames() {\n    super._makeFieldNames();\n    const xAxis = this.get(\"xAxis\");\n    const yAxis = this.get(\"yAxis\");\n    const categoryAxis = \"CategoryAxis\";\n    const valueAxis = \"ValueAxis\";\n    if (xAxis.isType(categoryAxis)) {\n      if (!this.get(\"openCategoryXField\")) {\n        this._xOpenField = this._xField;\n      }\n    }\n    if (xAxis.isType(valueAxis)) {\n      if (!this.get(\"openValueXField\")) {\n        this._xOpenField = this._xField;\n      }\n    }\n    if (yAxis.isType(categoryAxis)) {\n      if (!this.get(\"openCategoryYField\")) {\n        this._yOpenField = this._yField;\n      }\n    }\n    if (yAxis.isType(valueAxis)) {\n      if (!this.get(\"openValueYField\")) {\n        this._yOpenField = this._yField;\n      }\n    }\n  }\n  _prepareChildren() {\n    super._prepareChildren();\n    const xAxis = this.get(\"xAxis\");\n    const yAxis = this.get(\"yAxis\");\n    const len = this.dataItems.length;\n    const startIndex = Math.max(0, this.startIndex() - 2);\n    const endIndex = Math.min(this.endIndex() + 2, len - 1);\n    if (xAxis.inited && yAxis.inited) {\n      for (let i = startIndex; i <= endIndex; i++) {\n        let dataItem = this.dataItems[i];\n        this._createGraphics(dataItem);\n      }\n    }\n  }\n  _updateChildren() {\n    const chart = this.chart;\n    if (chart) {\n      this._ph = chart.plotContainer.height();\n      this._pw = chart.plotContainer.width();\n    }\n    const xAxis = this.get(\"xAxis\");\n    const yAxis = this.get(\"yAxis\");\n    const baseAxis = this.get(\"baseAxis\");\n    const columnsTemplate = this.columns.template;\n    if (this.isDirty(\"fill\")) {\n      if (columnsTemplate.get(\"fill\") == null) {\n        columnsTemplate.set(\"fill\", this.get(\"fill\"));\n      }\n    }\n    if (this.isDirty(\"fillPattern\")) {\n      if (columnsTemplate.get(\"fillPattern\") == null) {\n        columnsTemplate.set(\"fillPattern\", this.get(\"fillPattern\"));\n      }\n    }\n    if (this.isDirty(\"stroke\")) {\n      if (columnsTemplate.get(\"stroke\") == null) {\n        columnsTemplate.set(\"stroke\", this.get(\"stroke\"));\n      }\n    }\n    let index = 0;\n    let clusterCount = 0;\n    let i = 0;\n    $array.each(baseAxis.series, series => {\n      if (series instanceof BaseColumnSeries) {\n        const stacked = series.get(\"stacked\");\n        if (stacked && i == 0) {\n          clusterCount++;\n        }\n        if (!stacked && series.get(\"clustered\")) {\n          clusterCount++;\n        }\n      }\n      if (series === this) {\n        index = clusterCount - 1;\n      }\n      i++;\n    });\n    if (!this.get(\"clustered\")) {\n      index = 0;\n      clusterCount = 1;\n    }\n    if (clusterCount === 0) {\n      clusterCount = 1;\n      index = 0;\n    }\n    const xRenderer = xAxis.get(\"renderer\");\n    const yRenderer = yAxis.get(\"renderer\");\n    const cellStartLocation = \"cellStartLocation\";\n    const cellEndLocation = \"cellEndLocation\";\n    const cellLocationX0 = xRenderer.get(cellStartLocation, 0);\n    const cellLocationX1 = xRenderer.get(cellEndLocation, 1);\n    const cellLocationY0 = yRenderer.get(cellStartLocation, 0);\n    const cellLocationY1 = yRenderer.get(cellEndLocation, 1);\n    this._aLocationX0 = cellLocationX0 + index / clusterCount * (cellLocationX1 - cellLocationX0);\n    this._aLocationX1 = cellLocationX0 + (index + 1) / clusterCount * (cellLocationX1 - cellLocationX0);\n    ;\n    this._aLocationY0 = cellLocationY0 + index / clusterCount * (cellLocationY1 - cellLocationY0);\n    this._aLocationY1 = cellLocationY0 + (index + 1) / clusterCount * (cellLocationY1 - cellLocationY0);\n    if (xAxis.inited && yAxis.inited) {\n      if (this._axesDirty || this._valuesDirty || this._stackDirty || this.isDirty(\"vcx\") || this.isDirty(\"vcy\") || this._sizeDirty) {\n        const len = this.dataItems.length;\n        let startIndex = Math.max(0, this.startIndex() - 2);\n        let endIndex = Math.min(this.endIndex() + 2, len - 1);\n        for (let i = 0; i < startIndex; i++) {\n          this._toggleColumn(this.dataItems[i], false);\n        }\n        let previous = this.dataItems[startIndex];\n        for (let i = startIndex; i <= endIndex; i++) {\n          let dataItem = this.dataItems[i];\n          if (dataItem.get(\"valueX\") != null && dataItem.get(\"valueY\") != null) {\n            previous = dataItem;\n            if (i > 0 && startIndex > 0) {\n              for (let j = i - 1; j >= 0; j--) {\n                let dataItem = this.dataItems[j];\n                if (dataItem.get(\"valueX\") != null && dataItem.get(\"valueY\") != null) {\n                  previous = dataItem;\n                  break;\n                }\n              }\n            }\n            break;\n          } else {\n            this._toggleColumn(dataItem, false);\n          }\n        }\n        for (let i = startIndex; i <= endIndex; i++) {\n          let dataItem = this.dataItems[i];\n          this._updateGraphics(dataItem, previous);\n          if (dataItem.get(\"valueX\") != null && dataItem.get(\"valueY\") != null) {\n            previous = dataItem;\n          }\n        }\n        for (let i = endIndex + 1; i < len; i++) {\n          this._toggleColumn(this.dataItems[i], false);\n        }\n      }\n    } else {\n      this._skipped = true;\n    }\n    if (!this.getPrivate(\"doNotUpdateLegend\")) {\n      this.updateLegendMarker(this.get(\"tooltipDataItem\"));\n    }\n    super._updateChildren();\n  }\n  _createGraphics(dataItem) {\n    let graphics = dataItem.get(\"graphics\");\n    if (!graphics) {\n      graphics = this._makeGraphics(this.columns, dataItem);\n      dataItem.set(\"graphics\", graphics);\n      graphics._setDataItem(dataItem);\n      const legendDataItem = dataItem.get(\"legendDataItem\");\n      if (legendDataItem) {\n        const markerRectangle = legendDataItem.get(\"markerRectangle\");\n        if (markerRectangle) {\n          const ds = markerRectangle.states.lookup(\"default\");\n          $array.each(visualSettings, setting => {\n            const value = graphics.get(setting, this.get(setting));\n            markerRectangle.set(setting, value);\n            ds.set(setting, value);\n          });\n        }\n      }\n      let graphicsArray = dataItem.get(\"rangeGraphics\");\n      if (graphicsArray) {\n        $array.each(graphicsArray, graphics => {\n          graphics.dispose();\n        });\n      }\n      graphicsArray = [];\n      dataItem.setRaw(\"rangeGraphics\", graphicsArray);\n      this.axisRanges.each(axisRange => {\n        const container = axisRange.container;\n        const rangeGraphics = this._makeGraphics(axisRange.columns, dataItem);\n        if (graphicsArray) {\n          graphicsArray.push(rangeGraphics);\n        }\n        rangeGraphics.setPrivate(\"list\", axisRange.columns);\n        container.children.push(rangeGraphics);\n      });\n    }\n  }\n  createAxisRange(axisDataItem) {\n    $array.each(this.dataItems, dataItem => {\n      const graphics = dataItem.get(\"graphics\");\n      if (graphics) {\n        graphics.dispose();\n        dataItem.set(\"graphics\", undefined);\n      }\n    });\n    return super.createAxisRange(axisDataItem);\n  }\n  _updateGraphics(dataItem, previousDataItem) {\n    let graphics = dataItem.get(\"graphics\");\n    //if (!graphics) {\n    //\tthis._createGraphics(dataItem);\n    //\tgraphics = dataItem.get(\"graphics\")!;\n    //}\n    const xField = this._xField;\n    const yField = this._yField;\n    const valueX = dataItem.get(xField);\n    const valueY = dataItem.get(yField);\n    if (valueX != null && valueY != null) {\n      const xOpenField = this._xOpenField;\n      const yOpenField = this._yOpenField;\n      const locationX = this.get(\"locationX\", dataItem.get(\"locationX\", 0.5));\n      const locationY = this.get(\"locationY\", dataItem.get(\"locationY\", 0.5));\n      const openLocationX = this.get(\"openLocationX\", dataItem.get(\"openLocationX\", locationX));\n      const openLocationY = this.get(\"openLocationY\", dataItem.get(\"openLocationY\", locationY));\n      const width = graphics.get(\"width\");\n      const height = graphics.get(\"height\");\n      const stacked = this.get(\"stacked\");\n      const xAxis = this.get(\"xAxis\");\n      const yAxis = this.get(\"yAxis\");\n      const baseAxis = this.get(\"baseAxis\");\n      const xStart = xAxis.get(\"start\");\n      const xEnd = xAxis.get(\"end\");\n      const yStart = yAxis.get(\"start\");\n      const yEnd = yAxis.get(\"end\");\n      let l;\n      let r;\n      let t;\n      let b;\n      let vcy = this.get(\"vcy\", 1);\n      let vcx = this.get(\"vcx\", 1);\n      let fitW = false;\n      let fitH = false;\n      if (yAxis.isType(\"CategoryAxis\") && xAxis.isType(\"CategoryAxis\")) {\n        let startLocation = this._aLocationX0 + openLocationX - 0.5;\n        let endLocation = this._aLocationX1 + locationX - 0.5;\n        if (width instanceof Percent) {\n          let offset = (endLocation - startLocation) * (1 - width.value) / 2;\n          startLocation += offset;\n          endLocation -= offset;\n        }\n        l = xAxis.getDataItemPositionX(dataItem, xOpenField, startLocation, vcx);\n        r = xAxis.getDataItemPositionX(dataItem, xField, endLocation, vcx);\n        startLocation = this._aLocationY0 + openLocationY - 0.5;\n        endLocation = this._aLocationY1 + locationY - 0.5;\n        if (height instanceof Percent) {\n          let offset = (endLocation - startLocation) * (1 - height.value) / 2;\n          startLocation += offset;\n          endLocation -= offset;\n        }\n        t = yAxis.getDataItemPositionY(dataItem, yOpenField, startLocation, vcy);\n        b = yAxis.getDataItemPositionY(dataItem, yField, endLocation, vcy);\n        dataItem.setRaw(\"point\", {\n          x: l + (r - l) / 2,\n          y: t + (b - t) / 2\n        });\n      } else if (xAxis === baseAxis) {\n        let startLocation = this._aLocationX0 + openLocationX - 0.5;\n        let endLocation = this._aLocationX1 + locationX - 0.5;\n        if (width instanceof Percent) {\n          let offset = (endLocation - startLocation) * (1 - width.value) / 2;\n          startLocation += offset;\n          endLocation -= offset;\n        }\n        l = xAxis.getDataItemPositionX(dataItem, xOpenField, startLocation, vcx);\n        r = xAxis.getDataItemPositionX(dataItem, xField, endLocation, vcx);\n        t = yAxis.getDataItemPositionY(dataItem, yField, locationY, vcy);\n        if (this._yOpenField !== this._yField) {\n          b = yAxis.getDataItemPositionY(dataItem, yOpenField, openLocationY, vcy);\n        } else {\n          if (stacked) {\n            let stackToItemY = dataItem.get(\"stackToItemY\");\n            if (stackToItemY) {\n              b = yAxis.getDataItemPositionY(stackToItemY, yField, openLocationY, stackToItemY.component.get(\"vcy\"));\n            } else {\n              b = yAxis.basePosition();\n            }\n          } else {\n            b = yAxis.basePosition();\n          }\n        }\n        dataItem.setRaw(\"point\", {\n          x: l + (r - l) / 2,\n          y: t\n        });\n        fitH = true;\n      } else if (yAxis === baseAxis) {\n        let startLocation = this._aLocationY0 + openLocationY - 0.5;\n        let endLocation = this._aLocationY1 + locationY - 0.5;\n        if (height instanceof Percent) {\n          let offset = (endLocation - startLocation) * (1 - height.value) / 2;\n          startLocation += offset;\n          endLocation -= offset;\n        }\n        t = yAxis.getDataItemPositionY(dataItem, yOpenField, startLocation, vcy);\n        b = yAxis.getDataItemPositionY(dataItem, yField, endLocation, vcy);\n        r = xAxis.getDataItemPositionX(dataItem, xField, locationX, vcx);\n        if (this._xOpenField !== this._xField) {\n          l = xAxis.getDataItemPositionX(dataItem, xOpenField, openLocationX, vcx);\n        } else {\n          if (stacked) {\n            let stackToItemX = dataItem.get(\"stackToItemX\");\n            if (stackToItemX) {\n              l = xAxis.getDataItemPositionX(stackToItemX, xField, openLocationX, stackToItemX.component.get(\"vcx\"));\n            } else {\n              l = xAxis.basePosition();\n            }\n          } else {\n            l = xAxis.basePosition();\n          }\n        }\n        fitW = true;\n        dataItem.setRaw(\"point\", {\n          x: r,\n          y: t + (b - t) / 2\n        });\n      }\n      this._updateSeriesGraphics(dataItem, graphics, l, r, t, b, fitW, fitH);\n      if (l < xStart && r < xStart || l > xEnd && r > xEnd || t < yStart && b <= yStart || t >= yEnd && b > yEnd || $type.isNaN(l) || $type.isNaN(t)) {\n        this._toggleColumn(dataItem, false);\n      } else {\n        this._toggleColumn(dataItem, true);\n      }\n      let rangeGraphics = dataItem.get(\"rangeGraphics\");\n      if (rangeGraphics) {\n        $array.each(rangeGraphics, graphics => {\n          this._updateSeriesGraphics(dataItem, graphics, l, r, t, b, fitW, fitH);\n        });\n      }\n      this._applyGraphicsStates(dataItem, previousDataItem);\n    } else {\n      this._toggleColumn(dataItem, false);\n    }\n  }\n  _updateSeriesGraphics(dataItem, graphics, l, r, t, b, fitW, fitH) {\n    const width = graphics.get(\"width\");\n    const height = graphics.get(\"height\");\n    const maxWidth = graphics.get(\"maxWidth\");\n    const maxHeight = graphics.get(\"maxHeight\");\n    const ptl = this.getPoint(l, t);\n    const pbr = this.getPoint(r, b);\n    const tooltipPoint = dataItem.get(\"point\");\n    if (tooltipPoint) {\n      const point = this.getPoint(tooltipPoint.x, tooltipPoint.y);\n      tooltipPoint.x = point.x + this._x;\n      tooltipPoint.y = point.y + this._y;\n    }\n    l = ptl.x;\n    r = pbr.x;\n    t = ptl.y;\n    b = pbr.y;\n    if ($type.isNumber(width)) {\n      const offset = (r - l - width) / 2;\n      l += offset;\n      r -= offset;\n    }\n    if ($type.isNumber(maxWidth) && maxWidth < Math.abs(r - l)) {\n      const offset = (r - l - maxWidth) / 2;\n      l += offset;\n      r -= offset;\n    }\n    if ($type.isNumber(height)) {\n      const offset = (b - t - height) / 2;\n      t += offset;\n      b -= offset;\n    }\n    if ($type.isNumber(maxHeight) && maxHeight < Math.abs(b - t)) {\n      const offset = (b - t - maxHeight) / 2;\n      t += offset;\n      b -= offset;\n    }\n    if (this.get(\"adjustBulletPosition\")) {\n      if (fitW) {\n        r = Math.min(Math.max(0, r), this._pw);\n        l = Math.min(Math.max(0, l), this._pw);\n      }\n      if (fitH) {\n        t = Math.min(Math.max(0, t), this._ph);\n        b = Math.min(Math.max(0, b), this._ph);\n      }\n    }\n    dataItem.setRaw(\"left\", l);\n    dataItem.setRaw(\"right\", r);\n    dataItem.setRaw(\"top\", t);\n    dataItem.setRaw(\"bottom\", b);\n    graphics.setPrivate(\"width\", r - l);\n    graphics.setPrivate(\"height\", b - t);\n    graphics.set(\"x\", l);\n    graphics.set(\"y\", b - (b - t));\n  }\n  _handleDataSetChange() {\n    super._handleDataSetChange();\n    $array.each(this._dataItems, dataItem => {\n      this._toggleColumn(dataItem, false);\n    });\n  }\n  _applyGraphicsStates(dataItem, previousDataItem) {\n    const graphics = dataItem.get(\"graphics\");\n    const dropFromOpen = graphics.states.lookup(\"dropFromOpen\");\n    const riseFromOpen = graphics.states.lookup(\"riseFromOpen\");\n    const dropFromPrevious = graphics.states.lookup(\"dropFromPrevious\");\n    const riseFromPrevious = graphics.states.lookup(\"riseFromPrevious\");\n    if (dropFromOpen || dropFromPrevious || riseFromOpen || riseFromPrevious) {\n      const xAxis = this.get(\"xAxis\");\n      const yAxis = this.get(\"yAxis\");\n      const baseAxis = this.get(\"baseAxis\");\n      let open;\n      let close;\n      let previousClose;\n      if (baseAxis === xAxis && yAxis.isType(\"ValueAxis\")) {\n        open = dataItem.get(this._yOpenField);\n        close = dataItem.get(this._yField);\n        previousClose = previousDataItem.get(this._yField);\n      } else if (baseAxis === yAxis && xAxis.isType(\"ValueAxis\")) {\n        open = dataItem.get(this._xOpenField);\n        close = dataItem.get(this._xField);\n        previousClose = previousDataItem.get(this._xField);\n      }\n      if ($type.isNumber(open) && $type.isNumber(close)) {\n        if (close < open) {\n          if (dropFromOpen) {\n            dropFromOpen.apply();\n          }\n        } else {\n          if (riseFromOpen) {\n            riseFromOpen.apply();\n          }\n        }\n        if ($type.isNumber(previousClose)) {\n          if (close < previousClose) {\n            if (dropFromPrevious) {\n              dropFromPrevious.apply();\n            }\n          } else {\n            if (riseFromPrevious) {\n              riseFromPrevious.apply();\n            }\n          }\n        }\n      }\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  disposeDataItem(dataItem) {\n    super.disposeDataItem(dataItem);\n    const graphics = dataItem.get(\"graphics\");\n    if (graphics) {\n      this.columns.removeValue(graphics);\n      graphics.dispose();\n    }\n    const rangeGraphics = dataItem.get(\"rangeGraphics\");\n    if (rangeGraphics) {\n      $array.each(rangeGraphics, graphics => {\n        const list = graphics.getPrivate(\"list\");\n        if (list) {\n          list.removeValue(graphics);\n        }\n        graphics.dispose();\n      });\n    }\n  }\n  /**\r\n   * Hides series's data item.\r\n   *\r\n   * @param   dataItem  Data item\r\n   * @param   duration  Animation duration in milliseconds\r\n   * @return            Promise\r\n   */\n  hideDataItem(dataItem, duration) {\n    const _super = Object.create(null, {\n      hideDataItem: {\n        get: () => super.hideDataItem\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      const promises = [_super.hideDataItem.call(this, dataItem, duration)];\n      const graphics = dataItem.get(\"graphics\");\n      if (graphics) {\n        promises.push(graphics.hide(duration));\n      }\n      const rangeGraphics = dataItem.get(\"rangeGraphics\");\n      if (rangeGraphics) {\n        $array.each(rangeGraphics, graphics => {\n          promises.push(graphics.hide(duration));\n        });\n      }\n      yield Promise.all(promises);\n    });\n  }\n  _toggleColumn(dataItem, visible) {\n    const graphics = dataItem.get(\"graphics\");\n    if (graphics) {\n      graphics.setPrivate(\"visible\", visible);\n    }\n    const rangeGraphics = dataItem.get(\"rangeGraphics\");\n    if (rangeGraphics) {\n      $array.each(rangeGraphics, graphics => {\n        graphics.setPrivate(\"visible\", visible);\n      });\n    }\n    const bullets = dataItem.bullets;\n    if (bullets) {\n      $array.each(bullets, bullet => {\n        bullet.setPrivate(\"hidden\", !visible);\n      });\n    }\n  }\n  /**\r\n   * Shows series's data item.\r\n   *\r\n   * @param   dataItem  Data item\r\n   * @param   duration  Animation duration in milliseconds\r\n   * @return            Promise\r\n   */\n  showDataItem(dataItem, duration) {\n    const _super = Object.create(null, {\n      showDataItem: {\n        get: () => super.showDataItem\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      const promises = [_super.showDataItem.call(this, dataItem, duration)];\n      const graphics = dataItem.get(\"graphics\");\n      if (graphics) {\n        promises.push(graphics.show(duration));\n      }\n      const rangeGraphics = dataItem.get(\"rangeGraphics\");\n      if (rangeGraphics) {\n        $array.each(rangeGraphics, graphics => {\n          promises.push(graphics.show(duration));\n        });\n      }\n      yield Promise.all(promises);\n    });\n  }\n  /**\r\n   * @ignore\r\n   */\n  updateLegendMarker(dataItem) {\n    let legendDataItem = this.get(\"legendDataItem\");\n    if (this.get(\"useLastColorForLegendMarker\")) {\n      if (!dataItem) {\n        const lastDataItem = this.dataItems[this.endIndex() - 1];\n        if (lastDataItem) {\n          dataItem = lastDataItem;\n        }\n      }\n    }\n    if (legendDataItem) {\n      let graphics = this.columns.template;\n      if (dataItem) {\n        let column = dataItem.get(\"graphics\");\n        if (column) {\n          graphics = column;\n        }\n      }\n      const markerRectangle = legendDataItem.get(\"markerRectangle\");\n      if (markerRectangle) {\n        if (!legendDataItem.get(\"itemContainer\").get(\"disabled\")) {\n          const ds = markerRectangle.states.lookup(\"default\");\n          $array.each(visualSettings, setting => {\n            const value = graphics.get(setting, this.get(setting));\n            markerRectangle.set(setting, value);\n            ds.set(setting, value);\n          });\n        }\n      }\n    }\n  }\n  _getTooltipTarget(dataItem) {\n    if (this.get(\"seriesTooltipTarget\") == \"bullet\") {\n      return super._getTooltipTarget(dataItem);\n    }\n    let column = dataItem.get(\"graphics\");\n    if (column) {\n      return column;\n    }\n    return this;\n  }\n}\nObject.defineProperty(BaseColumnSeries, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"BaseColumnSeries\"\n});\nObject.defineProperty(BaseColumnSeries, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: XYSeries.classNames.concat([BaseColumnSeries.className])\n});\n", "import { DataItem } from \"../../../core/render/Component\";\nimport { Component } from \"../../../core/render/Component\";\nimport { Container } from \"../../../core/render/Container\";\nimport { p100 } from \"../../../core/util/Percent\";\nimport { List } from \"../../../core/util/List\";\nimport { Rectangle } from \"../../../core/render/Rectangle\";\nimport * as $array from \"../../../core/util/Array\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $utils from \"../../../core/util/Utils\";\n/**\r\n * A base class for all axes.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Adding_axes} for more info\r\n */\nexport class Axis extends Component {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"_series\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, \"_isPanning\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    /**\r\n     * Array of minor data items.\r\n     */\n    Object.defineProperty(this, \"minorDataItems\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    /**\r\n     * A [[Container]] that holds all the axis label elements.\r\n     *\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"labelsContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.children.push(Container.new(this._root, {}))\n    });\n    /**\r\n     * A [[Container]] that holds all the axis grid and fill elements.\r\n     *\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"gridContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: Container.new(this._root, {\n        width: p100,\n        height: p100\n      })\n    });\n    /**\r\n     * A [[Container]] that holds axis grid elements which goes above the series.\r\n     *\r\n     * @default Container.new()\r\n     */\n    Object.defineProperty(this, \"topGridContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: Container.new(this._root, {\n        width: p100,\n        height: p100\n      })\n    });\n    /**\r\n     * A [[Container]] that holds all the axis bullet elements.\r\n     *\r\n     * @default new Container\r\n     */\n    Object.defineProperty(this, \"bulletsContainer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.children.push(Container.new(this._root, {\n        isMeasured: false,\n        width: p100,\n        height: p100,\n        position: \"absolute\"\n      }))\n    });\n    /**\r\n     * A referenece to the the chart the axis belongs to.\r\n     */\n    Object.defineProperty(this, \"chart\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_rangesDirty\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_panStart\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_panEnd\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(this, \"_sAnimation\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_eAnimation\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_skipSync\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    /**\r\n     * A list of axis ranges.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/} for more info\r\n     * @default new List()\r\n     */\n    Object.defineProperty(this, \"axisRanges\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new List()\n    });\n    Object.defineProperty(this, \"_seriesAxisRanges\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    /**\r\n     * A control label that is invisible but is used to keep width the width of\r\n     * the axis constant.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/#Ghost_label} for more info\r\n     */\n    Object.defineProperty(this, \"ghostLabel\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_cursorPosition\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: -1\n    });\n    Object.defineProperty(this, \"_snapToSeries\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_seriesValuesDirty\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_seriesAdded\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    /**\r\n     * A container above the axis that can be used to add additional stuff into\r\n     * it. For example a legend, label, or an icon.\r\n     *\r\n     * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-headers/} for more info\r\n     * @default new Container\r\n     */\n    Object.defineProperty(this, \"axisHeader\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.children.push(Container.new(this._root, {\n        themeTags: [\"axis\", \"header\"],\n        position: \"absolute\",\n        background: Rectangle.new(this._root, {\n          themeTags: [\"header\", \"background\"],\n          fill: this._root.interfaceColors.get(\"background\")\n        })\n      }))\n    });\n    Object.defineProperty(this, \"_bullets\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n  }\n  _dispose() {\n    // these could be in other parents, so disposing just in case\n    this.gridContainer.dispose();\n    this.topGridContainer.dispose();\n    this.bulletsContainer.dispose();\n    this.labelsContainer.dispose();\n    this.axisHeader.dispose();\n    super._dispose();\n  }\n  _afterNew() {\n    super._afterNew();\n    this.setPrivate(\"updateScrollbar\", true);\n    this._disposers.push(this.axisRanges.events.onAll(change => {\n      if (change.type === \"clear\") {\n        $array.each(change.oldValues, dataItem => {\n          dataItem.dispose();\n        });\n      } else if (change.type === \"push\") {\n        this._processAxisRange(change.newValue, [\"range\"]);\n      } else if (change.type === \"setIndex\") {\n        this._processAxisRange(change.newValue, [\"range\"]);\n      } else if (change.type === \"insertIndex\") {\n        this._processAxisRange(change.newValue, [\"range\"]);\n      } else if (change.type === \"removeIndex\") {\n        this.disposeDataItem(change.oldValue);\n      } else if (change.type === \"moveIndex\") {\n        this._processAxisRange(change.value, [\"range\"]);\n      } else {\n        throw new Error(\"Unknown IStreamEvent type\");\n      }\n    }));\n    const renderer = this.get(\"renderer\");\n    if (renderer) {\n      renderer.axis = this;\n      renderer.processAxis();\n    }\n    this.children.push(renderer);\n    this.ghostLabel = renderer.makeLabel(new DataItem(this, undefined, {}), []);\n    this.ghostLabel.adapters.disable(\"text\");\n    this.ghostLabel.setAll({\n      opacity: 0,\n      tooltipText: undefined,\n      tooltipHTML: undefined,\n      interactive: false\n    });\n    this.ghostLabel.events.disable();\n  }\n  _updateFinals(_start, _end) {}\n  /**\r\n   * Zooms the axis to relative locations.\r\n   *\r\n   * Both `start` and `end` are relative: 0 means start of the axis, 1 - end.\r\n   *\r\n   * @param   start     Relative start\r\n   * @param   end       Relative end\r\n   * @param   duration  Duration of the zoom animation in milliseconds\r\n   * @return            Zoom animation\r\n   */\n  zoom(start, end, duration, priority) {\n    if (this.get(\"zoomable\", true)) {\n      this._updateFinals(start, end);\n      if (this.get(\"start\") !== start || this.get(\"end\") != end) {\n        let sAnimation = this._sAnimation;\n        let eAnimation = this._eAnimation;\n        let maxDeviation = this.get(\"maxDeviation\", 0.5) * Math.min(1, end - start);\n        if (start < -maxDeviation) {\n          start = -maxDeviation;\n        }\n        if (end > 1 + maxDeviation) {\n          end = 1 + maxDeviation;\n        }\n        if (start > end) {\n          [start, end] = [end, start];\n        }\n        if (!$type.isNumber(duration)) {\n          duration = this.get(\"interpolationDuration\", 0);\n        }\n        if (!priority) {\n          priority = \"end\";\n        }\n        let maxZoomFactor = this.getPrivate(\"maxZoomFactor\", this.get(\"maxZoomFactor\", 100));\n        let maxZoomFactorReal = maxZoomFactor;\n        if (end === 1 && start !== 0) {\n          if (start < this.get(\"start\", 0)) {\n            priority = \"start\";\n          } else {\n            priority = \"end\";\n          }\n        }\n        if (start === 0 && end !== 1) {\n          if (end > this.get(\"end\", 1)) {\n            priority = \"end\";\n          } else {\n            priority = \"start\";\n          }\n        }\n        let minZoomCount = this.get(\"minZoomCount\", 0);\n        let maxZoomCount = this.get(\"maxZoomCount\", Infinity);\n        if ($type.isNumber(minZoomCount)) {\n          maxZoomFactor = maxZoomFactorReal / minZoomCount;\n        }\n        let minZoomFactor = 1;\n        if ($type.isNumber(maxZoomCount)) {\n          minZoomFactor = maxZoomFactorReal / maxZoomCount;\n        }\n        // most likely we are dragging left scrollbar grip here, so we tend to modify end\n        if (priority === \"start\") {\n          if (maxZoomCount > 0) {\n            // add to the end\n            if (1 / (end - start) < minZoomFactor) {\n              end = start + 1 / minZoomFactor;\n            }\n          }\n          // add to the end\n          if (1 / (end - start) > maxZoomFactor) {\n            end = start + 1 / maxZoomFactor;\n          }\n          //unless end is > 0\n          if (end > 1 && end - start < 1 / maxZoomFactor) {\n            //end = 1;\n            start = end - 1 / maxZoomFactor;\n          }\n        }\n        // most likely we are dragging right, so we modify left\n        else {\n          if (maxZoomCount > 0) {\n            // add to the end\n            if (1 / (end - start) < minZoomFactor) {\n              start = end - 1 / minZoomFactor;\n            }\n          }\n          // remove from start\n          if (1 / (end - start) > maxZoomFactor) {\n            start = end - 1 / maxZoomFactor;\n          }\n          if (start < 0 && end - start < 1 / maxZoomFactor) {\n            //start = 0;\n            end = start + 1 / maxZoomFactor;\n          }\n        }\n        if (1 / (end - start) > maxZoomFactor) {\n          end = start + 1 / maxZoomFactor;\n        }\n        if (1 / (end - start) > maxZoomFactor) {\n          start = end - 1 / maxZoomFactor;\n        }\n        if (maxZoomCount != null && minZoomCount != null && start == this.get(\"start\") && end == this.get(\"end\")) {\n          const chart = this.chart;\n          if (chart) {\n            chart._handleAxisSelection(this, true);\n          }\n        }\n        if ((sAnimation && sAnimation.playing && sAnimation.to == start || this.get(\"start\") == start) && (eAnimation && eAnimation.playing && eAnimation.to == end || this.get(\"end\") == end)) {\n          return;\n        }\n        if (duration > 0) {\n          let easing = this.get(\"interpolationEasing\");\n          let sAnimation, eAnimation;\n          if (this.get(\"start\") != start) {\n            sAnimation = this.animate({\n              key: \"start\",\n              to: start,\n              duration: duration,\n              easing: easing\n            });\n          }\n          if (this.get(\"end\") != end) {\n            eAnimation = this.animate({\n              key: \"end\",\n              to: end,\n              duration: duration,\n              easing: easing\n            });\n          }\n          this._sAnimation = sAnimation;\n          this._eAnimation = eAnimation;\n          if (sAnimation) {\n            return sAnimation;\n          } else if (eAnimation) {\n            return eAnimation;\n          }\n        } else {\n          this.set(\"start\", start);\n          this.set(\"end\", end);\n        }\n      } else {\n        if (this._sAnimation) {\n          this._sAnimation.stop();\n        }\n        if (this._eAnimation) {\n          this._eAnimation.stop();\n        }\n      }\n    }\n  }\n  /**\r\n   * A list of series using this axis.\r\n   *\r\n   * @return Series\r\n   */\n  get series() {\n    return this._series;\n  }\n  _processAxisRange(dataItem, themeTags) {\n    dataItem.setRaw(\"isRange\", true);\n    this._createAssets(dataItem, themeTags);\n    this._rangesDirty = true;\n    this._prepareDataItem(dataItem);\n    const above = dataItem.get(\"above\");\n    const container = this.topGridContainer;\n    const grid = dataItem.get(\"grid\");\n    if (above && grid) {\n      container.children.moveValue(grid);\n    }\n    const fill = dataItem.get(\"axisFill\");\n    if (above && fill) {\n      container.children.moveValue(fill);\n    }\n  }\n  _prepareDataItem(_dataItem, _index) {}\n  /**\r\n   * @ignore\r\n   */\n  markDirtyExtremes() {}\n  /**\r\n   * @ignore\r\n   */\n  markDirtySelectionExtremes() {}\n  _calculateTotals() {}\n  _updateAxisRanges() {\n    this._bullets = {};\n    this.axisRanges.each(axisRange => {\n      this._prepareDataItem(axisRange);\n    });\n    $array.each(this._seriesAxisRanges, axisRange => {\n      this._prepareDataItem(axisRange);\n    });\n  }\n  _prepareChildren() {\n    super._prepareChildren();\n    if (this.get(\"fixAxisSize\")) {\n      this.ghostLabel.set(\"visible\", true);\n    } else {\n      this.ghostLabel.set(\"visible\", false);\n    }\n    if (this.isDirty(\"start\") || this.isDirty(\"end\")) {\n      const chart = this.chart;\n      if (chart) {\n        chart._updateCursor();\n      }\n      let start = this.get(\"start\", 0);\n      let end = this.get(\"end\", 1);\n      let maxDeviation = this.get(\"maxDeviation\", 0.5) * Math.min(1, end - start);\n      if (start < -maxDeviation) {\n        let delta = start + maxDeviation;\n        start = -maxDeviation;\n        this.setRaw(\"start\", start);\n        if (this.isDirty(\"end\")) {\n          this.setRaw(\"end\", end - delta);\n        }\n      }\n      if (end > 1 + maxDeviation) {\n        let delta = end - 1 - maxDeviation;\n        end = 1 + maxDeviation;\n        this.setRaw(\"end\", end);\n        if (this.isDirty(\"start\")) {\n          this.setRaw(\"start\", start - delta);\n        }\n      }\n    }\n    const renderer = this.get(\"renderer\");\n    renderer._start = this.get(\"start\");\n    renderer._end = this.get(\"end\");\n    renderer._inversed = renderer.get(\"inversed\", false);\n    renderer._axisLength = renderer.axisLength() / (renderer._end - renderer._start);\n    renderer._updateLC();\n    if (this.isDirty(\"tooltip\")) {\n      const tooltip = this.get(\"tooltip\");\n      if (tooltip) {\n        const rendererTags = renderer.get(\"themeTags\");\n        tooltip.addTag(\"axis\");\n        tooltip.addTag(this.className.toLowerCase());\n        tooltip._applyThemes();\n        if (rendererTags) {\n          tooltip.set(\"themeTags\", $utils.mergeTags(tooltip.get(\"themeTags\"), rendererTags));\n          tooltip.label._applyThemes();\n        }\n      }\n    }\n  }\n  _updateTooltipBounds() {\n    const tooltip = this.get(\"tooltip\");\n    if (tooltip) {\n      this.get(\"renderer\").updateTooltipBounds(tooltip);\n    }\n  }\n  _updateBounds() {\n    super._updateBounds();\n    this._updateTooltipBounds();\n  }\n  /**\r\n   * @ignore\r\n   */\n  processChart(chart) {\n    this.chart = chart;\n    const renderer = this.get(\"renderer\");\n    renderer.chart = chart;\n    chart.gridContainer.children.push(this.gridContainer);\n    chart.topGridContainer.children.push(this.topGridContainer);\n    chart.axisHeadersContainer.children.push(this.axisHeader);\n    this.on(\"start\", () => {\n      chart._handleAxisSelection(this);\n    });\n    this.on(\"end\", () => {\n      chart._handleAxisSelection(this);\n    });\n    chart.plotContainer.onPrivate(\"width\", () => {\n      this.markDirtySize();\n    });\n    chart.plotContainer.onPrivate(\"height\", () => {\n      this.markDirtySize();\n    });\n    chart.processAxis(this);\n  }\n  /**\r\n   * @ignore\r\n   */\n  hideDataItem(dataItem) {\n    this._toggleFHDataItem(dataItem, true);\n    return super.hideDataItem(dataItem);\n  }\n  /**\r\n   * @ignore\r\n   */\n  showDataItem(dataItem) {\n    this._toggleFHDataItem(dataItem, false);\n    return super.showDataItem(dataItem);\n  }\n  _toggleFHDataItem(dataItem, forceHidden) {\n    const fh = \"forceHidden\";\n    const label = dataItem.get(\"label\");\n    if (label) {\n      label.set(fh, forceHidden);\n    }\n    const grid = dataItem.get(\"grid\");\n    if (grid) {\n      grid.set(fh, forceHidden);\n    }\n    const tick = dataItem.get(\"tick\");\n    if (tick) {\n      tick.set(fh, forceHidden);\n    }\n    const axisFill = dataItem.get(\"axisFill\");\n    if (axisFill) {\n      axisFill.set(fh, forceHidden);\n    }\n    const bullet = dataItem.get(\"bullet\");\n    if (bullet) {\n      const sprite = bullet.get(\"sprite\");\n      if (sprite) {\n        sprite.set(fh, forceHidden);\n      }\n    }\n  }\n  _toggleDataItem(dataItem, visible) {\n    const label = dataItem.get(\"label\");\n    const v = \"visible\";\n    if (label) {\n      label.setPrivate(v, visible);\n    }\n    const grid = dataItem.get(\"grid\");\n    if (grid) {\n      grid.setPrivate(v, visible);\n    }\n    const tick = dataItem.get(\"tick\");\n    if (tick) {\n      tick.setPrivate(v, visible);\n    }\n    const axisFill = dataItem.get(\"axisFill\");\n    if (axisFill) {\n      axisFill.setPrivate(v, visible);\n    }\n    const bullet = dataItem.get(\"bullet\");\n    if (bullet) {\n      const sprite = bullet.get(\"sprite\");\n      if (sprite) {\n        sprite.setPrivate(v, visible);\n      }\n    }\n  }\n  _createAssets(dataItem, tags, minor) {\n    var _a, _b, _c;\n    const renderer = this.get(\"renderer\");\n    let m = \"minor\";\n    const label = dataItem.get(\"label\");\n    if (!label) {\n      renderer.makeLabel(dataItem, tags);\n    } else {\n      let themeTags = label.get(\"themeTags\");\n      let remove = false;\n      if (minor) {\n        if ((themeTags === null || themeTags === void 0 ? void 0 : themeTags.indexOf(m)) == -1) {\n          remove = true;\n        }\n      } else {\n        if ((themeTags === null || themeTags === void 0 ? void 0 : themeTags.indexOf(m)) != -1) {\n          remove = true;\n        }\n      }\n      if (remove) {\n        (_a = label.parent) === null || _a === void 0 ? void 0 : _a.children.removeValue(label);\n        renderer.makeLabel(dataItem, tags);\n        label.dispose();\n        renderer.labels.removeValue(label);\n      }\n    }\n    const grid = dataItem.get(\"grid\");\n    if (!grid) {\n      renderer.makeGrid(dataItem, tags);\n    } else {\n      let themeTags = grid.get(\"themeTags\");\n      let remove = false;\n      if (minor) {\n        if ((themeTags === null || themeTags === void 0 ? void 0 : themeTags.indexOf(m)) == -1) {\n          remove = true;\n        }\n      } else {\n        if ((themeTags === null || themeTags === void 0 ? void 0 : themeTags.indexOf(m)) != -1) {\n          remove = true;\n        }\n      }\n      if (remove) {\n        (_b = grid.parent) === null || _b === void 0 ? void 0 : _b.children.removeValue(grid);\n        renderer.makeGrid(dataItem, tags);\n        grid.dispose();\n        renderer.grid.removeValue(grid);\n      }\n    }\n    const tick = dataItem.get(\"tick\");\n    if (!tick) {\n      renderer.makeTick(dataItem, tags);\n    } else {\n      let remove = false;\n      let themeTags = tick.get(\"themeTags\");\n      if (minor) {\n        if ((themeTags === null || themeTags === void 0 ? void 0 : themeTags.indexOf(m)) == -1) {\n          remove = true;\n        }\n      } else {\n        if ((themeTags === null || themeTags === void 0 ? void 0 : themeTags.indexOf(m)) != -1) {\n          remove = true;\n        }\n      }\n      if (remove) {\n        (_c = tick.parent) === null || _c === void 0 ? void 0 : _c.children.removeValue(tick);\n        renderer.makeTick(dataItem, tags);\n        tick.dispose();\n        renderer.ticks.removeValue(tick);\n      }\n    }\n    if (!minor && !dataItem.get(\"axisFill\")) {\n      renderer.makeAxisFill(dataItem, tags);\n    }\n    this._processBullet(dataItem);\n  }\n  _processBullet(dataItem) {\n    let bullet = dataItem.get(\"bullet\");\n    let axisBullet = this.get(\"bullet\");\n    if (!bullet && axisBullet && !dataItem.get(\"isRange\")) {\n      bullet = axisBullet(this._root, this, dataItem);\n    }\n    if (bullet) {\n      bullet.axis = this;\n      const sprite = bullet.get(\"sprite\");\n      if (sprite) {\n        sprite._setDataItem(dataItem);\n        dataItem.setRaw(\"bullet\", bullet);\n        if (!sprite.parent) {\n          this.bulletsContainer.children.push(sprite);\n        }\n      }\n    }\n  }\n  _afterChanged() {\n    super._afterChanged();\n    const chart = this.chart;\n    if (chart) {\n      chart._updateChartLayout();\n      chart.axisHeadersContainer.markDirtySize();\n    }\n    this.get(\"renderer\")._updatePositions();\n    this._seriesAdded = false;\n  }\n  /**\r\n   * @ignore\r\n   */\n  disposeDataItem(dataItem) {\n    super.disposeDataItem(dataItem);\n    const renderer = this.get(\"renderer\");\n    const label = dataItem.get(\"label\");\n    if (label) {\n      renderer.labels.removeValue(label);\n      label.dispose();\n    }\n    const tick = dataItem.get(\"tick\");\n    if (tick) {\n      renderer.ticks.removeValue(tick);\n      tick.dispose();\n    }\n    const grid = dataItem.get(\"grid\");\n    if (grid) {\n      renderer.grid.removeValue(grid);\n      grid.dispose();\n    }\n    const axisFill = dataItem.get(\"axisFill\");\n    if (axisFill) {\n      renderer.axisFills.removeValue(axisFill);\n      axisFill.dispose();\n    }\n    const bullet = dataItem.get(\"bullet\");\n    if (bullet) {\n      bullet.dispose();\n    }\n  }\n  _updateGhost() {\n    this.setPrivate(\"cellWidth\", this.getCellWidthPosition() * this.get(\"renderer\").axisLength());\n    const ghostLabel = this.ghostLabel;\n    if (!ghostLabel.isHidden()) {\n      const bounds = ghostLabel.localBounds();\n      const gWidth = Math.ceil(bounds.right - bounds.left);\n      let text = ghostLabel.get(\"text\");\n      $array.each(this.dataItems, dataItem => {\n        const label = dataItem.get(\"label\");\n        if (label && !label.isHidden()) {\n          const bounds = label.localBounds();\n          const w = Math.ceil(bounds.right - bounds.left);\n          if (w > gWidth) {\n            text = label.text._getText();\n          }\n        }\n      });\n      ghostLabel.set(\"text\", text);\n    }\n    let start = this.get(\"start\", 0);\n    let end = this.get(\"end\", 1);\n    this.get(\"renderer\").updateLabel(ghostLabel, start + (end - start) * 0.5);\n  }\n  _handleCursorPosition(position, snapToSeries) {\n    const renderer = this.get(\"renderer\");\n    position = renderer.toAxisPosition(position);\n    this._cursorPosition = position;\n    this._snapToSeries = snapToSeries;\n    this.updateTooltip();\n  }\n  /**\r\n   * Can be called when axis zoom changes and you need to update tooltip\r\n   * position.\r\n   */\n  updateTooltip() {\n    const snapToSeries = this._snapToSeries;\n    let position = this._cursorPosition;\n    const tooltip = this.get(\"tooltip\");\n    const renderer = this.get(\"renderer\");\n    if ($type.isNumber(position)) {\n      $array.each(this.series, series => {\n        if (series.get(\"baseAxis\") === this) {\n          const dataItem = this.getSeriesItem(series, position, this.get(\"tooltipLocation\"));\n          if (snapToSeries && snapToSeries.indexOf(series) != -1) {\n            series.updateLegendMarker(dataItem);\n            series.updateLegendValue(dataItem);\n            series._settings.tooltipDataItem = dataItem;\n          } else {\n            series.showDataItemTooltip(dataItem);\n            series.setRaw(\"tooltipDataItem\", dataItem);\n          }\n        }\n      });\n      if (this.get(\"snapTooltip\")) {\n        position = this.roundAxisPosition(position, this.get(\"tooltipLocation\", 0.5));\n      }\n      this.setPrivateRaw(\"tooltipPosition\", position);\n      if (tooltip) {\n        renderer.updateTooltipBounds(tooltip);\n        if (!$type.isNaN(position)) {\n          this._updateTooltipText(tooltip, position);\n          renderer.positionTooltip(tooltip, position);\n          if (position < this.get(\"start\", 0) || position > this.get(\"end\", 1)) {\n            tooltip.hide(0);\n          } else {\n            tooltip.show(0);\n          }\n        } else {\n          tooltip.hide(0);\n        }\n      }\n    }\n  }\n  _updateTooltipText(tooltip, position) {\n    tooltip.label.set(\"text\", this.getTooltipText(position));\n  }\n  /**\r\n   * @ignore\r\n   */\n  roundAxisPosition(position, _location) {\n    return position;\n  }\n  _handleSeriesRemoved() {}\n  /**\r\n   * @ignore\r\n   */\n  handleCursorShow() {\n    let tooltip = this.get(\"tooltip\");\n    if (tooltip) {\n      tooltip.show();\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  handleCursorHide() {\n    let tooltip = this.get(\"tooltip\");\n    if (tooltip) {\n      tooltip.hide();\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  processSeriesDataItem(_dataItem, _fields) {}\n  _clearDirty() {\n    super._clearDirty();\n    this._sizeDirty = false;\n    this._rangesDirty = false;\n  }\n  /**\r\n   * Converts pixel coordinate to a relative position on axis.\r\n   *\r\n   * @param   coordinate  Coordinate\r\n   * @return              Relative position\r\n   */\n  coordinateToPosition(coordinate) {\n    const renderer = this.get(\"renderer\");\n    return renderer.toAxisPosition(coordinate / renderer.axisLength());\n  }\n  /**\r\n   * Converts relative position of the plot area to relative position of the\r\n   * axis with zoom taken into account.\r\n   *\r\n   * @param position Position\r\n   * @return Relative position\r\n   */\n  toAxisPosition(position) {\n    return this.get(\"renderer\").toAxisPosition(position);\n  }\n  /**\r\n   * Converts relative position of the axis to a global position taking current\r\n   * zoom into account (opposite to what `toAxisPosition` does).\r\n   *\r\n   * @since 5.4.2\r\n   * @param position Position\r\n   * @return Global position\r\n   */\n  toGlobalPosition(position) {\n    return this.get(\"renderer\").toGlobalPosition(position);\n  }\n  /**\r\n   * Adjusts position with inversed taken into account.\r\n   *\r\n   * @ignore\r\n   */\n  fixPosition(position) {\n    return this.get(\"renderer\").fixPosition(position);\n  }\n  /**\r\n   * @ignore\r\n   */\n  shouldGap(_dataItem, _nextItem, _autoGapCount, _fieldName) {\n    return false;\n  }\n  /**\r\n   * Creates and returns an axis range object.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/axis-ranges/} for more info\r\n   * @param   axisDataItem  Axis data item\r\n   * @return                Axis range\r\n   */\n  createAxisRange(axisDataItem) {\n    return this.axisRanges.push(axisDataItem);\n  }\n  /**\r\n   * @ignore\r\n   */\n  _groupSeriesData(_series) {}\n  /**\r\n   * Returns relative position between two grid lines of the axis.\r\n   *\r\n   * @return Position\r\n   */\n  getCellWidthPosition() {\n    return 0.05;\n  }\n}\nObject.defineProperty(Axis, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"Axis\"\n});\nObject.defineProperty(Axis, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Component.classNames.concat([Axis.className])\n});\n", "import { DataItem } from \"../../../core/render/Component\";\nimport { Axis } from \"./Axis\";\nimport { MultiDisposer } from \"../../../core/util/Disposer\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $array from \"../../../core/util/Array\";\nimport * as $math from \"../../../core/util/Math\";\nimport * as $utils from \"../../../core/util/Utils\";\n/**\r\n * Creates a value axis.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/value-axis/} for more info\r\n * @important\r\n */\nexport class ValueAxis extends Axis {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"_dirtyExtremes\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_dirtySelectionExtremes\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_dseHandled\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_deltaMinMax\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(this, \"_minReal\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_maxReal\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_minRealLog\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_baseValue\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_syncDp\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_minLogAdjusted\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n  }\n  /**\r\n   * @ignore\r\n   */\n  markDirtyExtremes() {\n    this._dirtyExtremes = true;\n    this.markDirty();\n  }\n  /**\r\n   * @ignore\r\n   */\n  markDirtySelectionExtremes() {\n    this._dirtySelectionExtremes = true;\n    this.markDirty();\n  }\n  _afterNew() {\n    this._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"axis\"]);\n    this.setPrivateRaw(\"name\", \"value\");\n    this.addTag(\"value\");\n    super._afterNew();\n  }\n  _prepareChildren() {\n    super._prepareChildren();\n    if (this.isDirty(\"syncWithAxis\")) {\n      let previousValue = this._prevSettings.syncWithAxis;\n      if (previousValue) {\n        if (this._syncDp) {\n          this._syncDp.dispose();\n        }\n      }\n      let syncWithAxis = this.get(\"syncWithAxis\");\n      if (syncWithAxis) {\n        this._syncDp = new MultiDisposer([syncWithAxis.onPrivate(\"selectionMinFinal\", () => {\n          this._dirtySelectionExtremes = true;\n        }), syncWithAxis.onPrivate(\"selectionMaxFinal\", () => {\n          this._dirtySelectionExtremes = true;\n        })]);\n      }\n    }\n    let someDirty = false;\n    if (this.isDirty(\"min\") || this.isDirty(\"max\") || this.isDirty(\"maxPrecision\") || this.isDirty(\"numberFormat\")) {\n      someDirty = true;\n      this.ghostLabel.set(\"text\", \"\");\n    }\n    //if (this._dirtyExtremes || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\") || this.isDirty(\"min\") || this.isDirty(\"max\") || this.isDirty(\"extraMin\") || this.isDirty(\"extraMax\") || this.isDirty(\"logarithmic\") || this.isDirty(\"treatZeroAs\") || this.isDirty(\"baseValue\") || this.isDirty(\"strictMinMax\") || this.isDirty(\"maxPrecision\")) {\n    if (this._sizeDirty || this._dirtyExtremes || this._valuesDirty || someDirty || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\") || this.isDirty(\"extraMin\") || this.isDirty(\"extraMax\") || this.isDirty(\"logarithmic\") || this.isDirty(\"treatZeroAs\") || this.isDirty(\"baseValue\") || this.isDirty(\"strictMinMax\") || this.isDirty(\"strictMinMaxSelection\")) {\n      this._getMinMax();\n      this._dirtyExtremes = false;\n    }\n    this._handleSizeDirty();\n    if (this._dirtySelectionExtremes && !this._isPanning && this.get(\"autoZoom\", true)) {\n      const chart = this.chart;\n      let getMM = false;\n      // #1563\n      if (chart) {\n        const letter = this.get(\"renderer\").getPrivate(\"letter\");\n        if (letter == \"Y\") {\n          chart.xAxes.each(axis => {\n            if (axis.className != \"ValueAxis\") {\n              getMM = true;\n            }\n          });\n        } else if (letter == \"X\") {\n          chart.yAxes.each(axis => {\n            if (axis.className != \"ValueAxis\") {\n              getMM = true;\n            }\n          });\n        }\n      }\n      if (getMM) {\n        this._getSelectionMinMax();\n      }\n      this._dirtySelectionExtremes = false;\n    }\n    this._groupData();\n    if (this._sizeDirty || this._valuesDirty || this.isDirty(\"start\") || this.isDirty(\"end\") || this.isPrivateDirty(\"min\") || this.isPrivateDirty(\"selectionMax\") || this.isPrivateDirty(\"selectionMin\") || this.isPrivateDirty(\"max\") || this.isPrivateDirty(\"step\") || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\") || this.isDirty(\"logarithmic\")) {\n      this._handleRangeChange();\n      this._prepareAxisItems();\n      this._updateAxisRanges();\n    }\n    this._baseValue = this.baseValue();\n  }\n  _handleSizeDirty() {\n    if (this._sizeDirty && !this._dseHandled) {\n      this._dirtySelectionExtremes = true;\n      this._dseHandled = true;\n      if (this.getPrivate(\"selectionMinFinal\") != this.getPrivate(\"selectionMin\") || this.getPrivate(\"selectionMaxFinal\") != this.getPrivate(\"selectionMax\")) {\n        this._dirtySelectionExtremes = false;\n      }\n    }\n  }\n  _clearDirty() {\n    super._clearDirty();\n    this._dseHandled = false;\n  }\n  _groupData() {}\n  _formatText(value) {\n    const numberFormat = this.get(\"numberFormat\");\n    const formatter = this.getNumberFormatter();\n    let text = \"\";\n    if (numberFormat) {\n      text = formatter.format(value, numberFormat);\n    } else {\n      text = formatter.format(value, undefined, this.getPrivate(\"stepDecimalPlaces\"));\n    }\n    return text;\n  }\n  _prepareAxisItems() {\n    const min = this.getPrivate(\"min\");\n    const max = this.getPrivate(\"max\");\n    if ($type.isNumber(min) && $type.isNumber(max)) {\n      const logarithmic = this.get(\"logarithmic\");\n      const step = this.getPrivate(\"step\");\n      const selectionMin = this.getPrivate(\"selectionMin\");\n      const selectionMax = this.getPrivate(\"selectionMax\") + step;\n      let value = selectionMin - step;\n      let differencePower = 1;\n      let minLog = min;\n      if (logarithmic) {\n        value = this._minLogAdjusted;\n        if (value < selectionMin) {\n          while (value < selectionMin) {\n            value += step;\n          }\n        }\n        minLog = value;\n        if (minLog <= 0) {\n          minLog = 1;\n          if (step < 1) {\n            if ($type.isNumber(this._minRealLog)) {\n              minLog = this._minRealLog;\n            } else {\n              minLog = Math.pow(10, -50);\n            }\n          }\n        }\n        differencePower = Math.log(selectionMax - step) * Math.LOG10E - Math.log(minLog) * Math.LOG10E;\n        if (differencePower > 2) {\n          value = Math.pow(10, Math.log(minLog) * Math.LOG10E - 50);\n        }\n      }\n      /// minor grid\n      const renderer = this.get(\"renderer\");\n      const minorLabelsEnabled = renderer.get(\"minorLabelsEnabled\");\n      const minorGridEnabled = renderer.get(\"minorGridEnabled\", minorLabelsEnabled);\n      let stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));\n      const stepAdjusted = Math.round(step / stepPower);\n      let minorGridCount = 2;\n      if ($math.round(stepAdjusted / 5, 10) % 1 == 0) {\n        minorGridCount = 5;\n      }\n      if ($math.round(stepAdjusted / 10, 10) % 1 == 0) {\n        minorGridCount = 10;\n      }\n      let minorStep = step / minorGridCount;\n      // end of minor grid\n      let i = 0;\n      let m = 0;\n      let previous = -Infinity;\n      while (value < selectionMax) {\n        let dataItem;\n        if (this.dataItems.length < i + 1) {\n          dataItem = new DataItem(this, undefined, {});\n          this._dataItems.push(dataItem);\n          this.processDataItem(dataItem);\n        } else {\n          dataItem = this.dataItems[i];\n        }\n        this._createAssets(dataItem, []);\n        this._toggleDataItem(dataItem, true);\n        dataItem.setRaw(\"value\", value);\n        const label = dataItem.get(\"label\");\n        if (label) {\n          label.set(\"text\", this._formatText(value));\n        }\n        this._prepareDataItem(dataItem);\n        let nextValue = value;\n        if (!logarithmic) {\n          nextValue += step;\n        } else {\n          if (differencePower > 2) {\n            nextValue = Math.pow(10, Math.log(minLog) * Math.LOG10E + i - 50);\n          } else {\n            nextValue += step;\n          }\n        }\n        // minor grid\n        if (minorGridEnabled) {\n          let minorValue = value + minorStep;\n          if (logarithmic) {\n            if (differencePower > 2) {\n              let minorMinMaxStep = this._adjustMinMax(value, nextValue, 10);\n              minorStep = minorMinMaxStep.step;\n            }\n            minorValue = value + minorStep;\n          }\n          while (minorValue < nextValue - step * 0.00000000001) {\n            let minorDataItem;\n            if (this.minorDataItems.length < m + 1) {\n              minorDataItem = new DataItem(this, undefined, {});\n              this.minorDataItems.push(minorDataItem);\n              this.processDataItem(minorDataItem);\n            } else {\n              minorDataItem = this.minorDataItems[m];\n            }\n            this._createAssets(minorDataItem, [\"minor\"], true);\n            this._toggleDataItem(minorDataItem, true);\n            minorDataItem.setRaw(\"value\", minorValue);\n            const minorLabel = minorDataItem.get(\"label\");\n            if (minorLabel) {\n              if (minorLabelsEnabled) {\n                minorLabel.set(\"text\", this._formatText(minorValue));\n              } else {\n                minorLabel.setPrivate(\"visible\", false);\n              }\n            }\n            this._prepareDataItem(minorDataItem);\n            minorValue += minorStep;\n            m++;\n          }\n        }\n        value = nextValue;\n        if (previous == value) {\n          break;\n        }\n        let stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));\n        if (stepPower < 1 && !logarithmic) {\n          // exponent is less then 1 too. Count decimals of exponent\n          let decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 2;\n          // round value to avoid floating point issues\n          value = $math.round(value, decCount);\n        }\n        i++;\n        // #103520\n        if (logarithmic && differencePower <= 2) {\n          if (value - step < step) {\n            value = step;\n          }\n        }\n        previous = value;\n      }\n      for (let j = i; j < this.dataItems.length; j++) {\n        this._toggleDataItem(this.dataItems[j], false);\n      }\n      for (let j = m; j < this.minorDataItems.length; j++) {\n        this._toggleDataItem(this.minorDataItems[j], false);\n      }\n      $array.each(this.series, series => {\n        if (series.inited) {\n          series._markDirtyAxes();\n        }\n      });\n      this._updateGhost();\n    }\n  }\n  _prepareDataItem(dataItem, count) {\n    let renderer = this.get(\"renderer\");\n    let value = dataItem.get(\"value\");\n    let endValue = dataItem.get(\"endValue\");\n    let position = this.valueToPosition(value);\n    let endPosition = position;\n    let fillEndPosition = this.valueToPosition(value + this.getPrivate(\"step\"));\n    if ($type.isNumber(endValue)) {\n      endPosition = this.valueToPosition(endValue);\n      fillEndPosition = endPosition;\n    }\n    if (dataItem.get(\"isRange\")) {\n      if (endValue == null) {\n        fillEndPosition = position;\n      }\n    }\n    let labelEndPosition = endPosition;\n    let labelEndValue = dataItem.get(\"labelEndValue\");\n    if (labelEndValue != null) {\n      labelEndPosition = this.valueToPosition(labelEndValue);\n    }\n    renderer.updateLabel(dataItem.get(\"label\"), position, labelEndPosition, count);\n    const grid = dataItem.get(\"grid\");\n    renderer.updateGrid(grid, position, endPosition);\n    if (grid) {\n      if (value == this.get(\"baseValue\", 0)) {\n        grid.addTag(\"base\");\n        grid._applyThemes();\n      } else if (grid.hasTag(\"base\")) {\n        grid.removeTag(\"base\");\n        grid._applyThemes();\n      }\n    }\n    renderer.updateTick(dataItem.get(\"tick\"), position, labelEndPosition, count);\n    renderer.updateFill(dataItem.get(\"axisFill\"), position, fillEndPosition);\n    this._processBullet(dataItem);\n    renderer.updateBullet(dataItem.get(\"bullet\"), position, endPosition);\n    if (!dataItem.get(\"isRange\")) {\n      const fillRule = this.get(\"fillRule\");\n      if (fillRule) {\n        fillRule(dataItem);\n      }\n    }\n  }\n  _handleRangeChange() {\n    let selectionMin = this.positionToValue(this.get(\"start\", 0));\n    let selectionMax = this.positionToValue(this.get(\"end\", 1));\n    const gridCount = this.get(\"renderer\").gridCount();\n    let minMaxStep = this._adjustMinMax(selectionMin, selectionMax, gridCount, true);\n    let stepDecimalPlaces = $utils.decimalPlaces(minMaxStep.step);\n    this.setPrivateRaw(\"stepDecimalPlaces\", stepDecimalPlaces);\n    selectionMin = $math.round(selectionMin, stepDecimalPlaces);\n    selectionMax = $math.round(selectionMax, stepDecimalPlaces);\n    minMaxStep = this._adjustMinMax(selectionMin, selectionMax, gridCount, true);\n    let step = minMaxStep.step;\n    selectionMin = minMaxStep.min;\n    selectionMax = minMaxStep.max;\n    if (this.getPrivate(\"selectionMin\") !== selectionMin || this.getPrivate(\"selectionMax\") !== selectionMax || this.getPrivate(\"step\") !== step) {\n      // do not change to setPrivate, will cause SO\n      this.setPrivateRaw(\"selectionMin\", selectionMin);\n      this.setPrivateRaw(\"selectionMax\", selectionMax);\n      this.setPrivateRaw(\"step\", step);\n    }\n  }\n  /**\r\n   * Converts a relative position to a corresponding numeric value from axis\r\n   * scale.\r\n   *\r\n   * @param   position  Relative position\r\n   * @return            Value\r\n   */\n  positionToValue(position) {\n    const min = this.getPrivate(\"min\");\n    const max = this.getPrivate(\"max\");\n    if (!this.get(\"logarithmic\")) {\n      return position * (max - min) + min;\n    } else {\n      return Math.pow(Math.E, (position * (Math.log(max) * Math.LOG10E - Math.log(min) * Math.LOG10E) + Math.log(min) * Math.LOG10E) / Math.LOG10E);\n    }\n  }\n  /**\r\n   * Convers value to a relative position on axis.\r\n   *\r\n   * @param   value  Value\r\n   * @return         Relative position\r\n   */\n  valueToPosition(value) {\n    const min = this.getPrivate(\"min\");\n    const max = this.getPrivate(\"max\");\n    if (!this.get(\"logarithmic\")) {\n      return (value - min) / (max - min);\n    } else {\n      if (value <= 0) {\n        let treatZeroAs = this.get(\"treatZeroAs\");\n        if ($type.isNumber(treatZeroAs)) {\n          value = treatZeroAs;\n        }\n      }\n      return (Math.log(value) * Math.LOG10E - Math.log(min) * Math.LOG10E) / (Math.log(max) * Math.LOG10E - Math.log(min) * Math.LOG10E);\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  valueToFinalPosition(value) {\n    const min = this.getPrivate(\"minFinal\");\n    const max = this.getPrivate(\"maxFinal\");\n    if (!this.get(\"logarithmic\")) {\n      return (value - min) / (max - min);\n    } else {\n      if (value <= 0) {\n        let treatZeroAs = this.get(\"treatZeroAs\");\n        if ($type.isNumber(treatZeroAs)) {\n          value = treatZeroAs;\n        }\n      }\n      return (Math.log(value) * Math.LOG10E - Math.log(min) * Math.LOG10E) / (Math.log(max) * Math.LOG10E - Math.log(min) * Math.LOG10E);\n    }\n  }\n  /**\r\n   * Returns X coordinate in pixels corresponding to specific value.\r\n   *\r\n   * @param   value     Numeric value\r\n   * @param   location  Location\r\n   * @param   baseValue Base value\r\n   * @return            X coordinate\r\n   */\n  getX(value, location, baseValue) {\n    value = baseValue + (value - baseValue) * location;\n    const position = this.valueToPosition(value);\n    return this._settings.renderer.positionToCoordinate(position);\n  }\n  /**\r\n   * Returns X coordinate in pixels corresponding to specific value.\r\n   *\r\n   * @param   value     Numeric value\r\n   * @param   location  Location\r\n   * @param   baseValue Base value\r\n   * @return            X coordinate\r\n   */\n  getY(value, location, baseValue) {\n    value = baseValue + (value - baseValue) * location;\n    const position = this.valueToPosition(value);\n    return this._settings.renderer.positionToCoordinate(position);\n  }\n  /**\r\n   * @ignore\r\n   */\n  getDataItemCoordinateX(dataItem, field, _cellLocation, axisLocation) {\n    return this._settings.renderer.positionToCoordinate(this.getDataItemPositionX(dataItem, field, _cellLocation, axisLocation));\n  }\n  /**\r\n   * @ignore\r\n   */\n  getDataItemPositionX(dataItem, field, _cellLocation, axisLocation) {\n    let value = dataItem.get(field);\n    const stackToItem = dataItem.get(\"stackToItemX\");\n    if (stackToItem) {\n      const series = dataItem.component;\n      value = value * axisLocation + series.getStackedXValueWorking(dataItem, field);\n    } else {\n      value = this._baseValue + (value - this._baseValue) * axisLocation;\n    }\n    return this.valueToPosition(value);\n  }\n  /**\r\n   * @ignore\r\n   */\n  getDataItemCoordinateY(dataItem, field, _cellLocation, axisLocation) {\n    return this._settings.renderer.positionToCoordinate(this.getDataItemPositionY(dataItem, field, _cellLocation, axisLocation));\n  }\n  /**\r\n   * @ignore\r\n   */\n  getDataItemPositionY(dataItem, field, _cellLocation, axisLocation) {\n    let value = dataItem.get(field);\n    const stackToItem = dataItem.get(\"stackToItemY\");\n    if (stackToItem) {\n      const series = dataItem.component;\n      value = value * axisLocation + series.getStackedYValueWorking(dataItem, field);\n    } else {\n      value = this._baseValue + (value - this._baseValue) * axisLocation;\n    }\n    return this.valueToPosition(value);\n  }\n  /**\r\n   * Returns relative position of axis' `baseValue`.\r\n   *\r\n   * @return  Base value position\r\n   */\n  basePosition() {\n    return this.valueToPosition(this.baseValue());\n  }\n  /**\r\n   * Base value of the [[ValueAxis]], which determines positive and negative\r\n   * values.\r\n   *\r\n   * @return Base value\r\n   */\n  baseValue() {\n    const min = Math.min(this.getPrivate(\"minFinal\", -Infinity), this.getPrivate(\"selectionMin\", -Infinity));\n    const max = Math.max(this.getPrivate(\"maxFinal\", Infinity), this.getPrivate(\"selectionMax\", Infinity));\n    let baseValue = this.get(\"baseValue\", 0);\n    if (baseValue < min) {\n      baseValue = min;\n    }\n    if (baseValue > max) {\n      baseValue = max;\n    }\n    return baseValue;\n  }\n  /**\r\n   * @ignore\r\n   */\n  cellEndValue(value) {\n    return value;\n  }\n  fixSmallStep(step) {\n    // happens because of floating point error\n    if (1 + step === 1) {\n      step *= 2;\n      return this.fixSmallStep(step);\n    }\n    return step;\n  }\n  _fixMin(min) {\n    return min;\n  }\n  _fixMax(max) {\n    return max;\n  }\n  _calculateTotals() {\n    if (this.get(\"calculateTotals\")) {\n      let series = this.series[0];\n      if (series) {\n        let startIndex = series.startIndex();\n        if (series.dataItems.length > 0) {\n          if (startIndex > 0) {\n            startIndex--;\n          }\n          let endIndex = series.endIndex();\n          if (endIndex < series.dataItems.length) {\n            endIndex++;\n          }\n          let field;\n          let vc;\n          if (series.get(\"yAxis\") == this) {\n            field = \"valueY\";\n            vc = \"vcy\";\n          } else if (series.get(\"xAxis\") == this) {\n            field = \"valueX\";\n            vc = \"vcx\";\n          }\n          let fieldWorking = field + \"Working\";\n          if (field) {\n            for (let i = startIndex; i < endIndex; i++) {\n              let sum = 0;\n              let total = 0;\n              $array.each(this.series, series => {\n                if (!series.get(\"excludeFromTotal\")) {\n                  let dataItem = series.dataItems[i];\n                  if (dataItem) {\n                    let value = dataItem.get(fieldWorking) * series.get(vc);\n                    if (!$type.isNaN(value)) {\n                      sum += value;\n                      total += Math.abs(value);\n                    }\n                  }\n                }\n              });\n              $array.each(this.series, series => {\n                if (!series.get(\"excludeFromTotal\")) {\n                  let dataItem = series.dataItems[i];\n                  if (dataItem) {\n                    let value = dataItem.get(fieldWorking) * series.get(vc);\n                    if (!$type.isNaN(value)) {\n                      dataItem.set(field + \"Total\", total);\n                      dataItem.set(field + \"Sum\", sum);\n                      dataItem.set(field + \"TotalPercent\", value / total * 100);\n                    }\n                  }\n                }\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n  _getSelectionMinMax() {\n    const min = this.getPrivate(\"minFinal\");\n    const max = this.getPrivate(\"maxFinal\");\n    const minDefined = this.get(\"min\");\n    const maxDefined = this.get(\"max\");\n    let extraMin = this.get(\"extraMin\", 0);\n    let extraMax = this.get(\"extraMax\", 0);\n    if (this.get(\"logarithmic\")) {\n      if (this.get(\"extraMin\") == null) {\n        extraMin = 0.1;\n      }\n      if (this.get(\"extraMax\") == null) {\n        extraMax = 0.2;\n      }\n    }\n    const gridCount = this.get(\"renderer\").gridCount();\n    const selectionStrictMinMax = this.get(\"strictMinMaxSelection\");\n    let strictMinMax = this.get(\"strictMinMax\");\n    if ($type.isNumber(min) && $type.isNumber(max)) {\n      let selectionMin = max;\n      let selectionMax = min;\n      $array.each(this.series, series => {\n        if (!series.get(\"ignoreMinMax\")) {\n          let seriesMin;\n          let seriesMax;\n          const outOfSelection = series.getPrivate(\"outOfSelection\");\n          if (series.get(\"xAxis\") === this) {\n            if (!outOfSelection) {\n              let minX = series.getPrivate(\"minX\");\n              let maxX = series.getPrivate(\"maxX\");\n              // solves #90085\n              if (series.startIndex() != 0 || series.endIndex() != series.dataItems.length) {\n                minX = undefined;\n                maxX = undefined;\n              }\n              seriesMin = series.getPrivate(\"selectionMinX\", minX);\n              seriesMax = series.getPrivate(\"selectionMaxX\", maxX);\n            }\n          } else if (series.get(\"yAxis\") === this) {\n            if (!outOfSelection) {\n              let minY = series.getPrivate(\"minY\");\n              let maxY = series.getPrivate(\"maxY\");\n              // solves #90085\n              if (series.startIndex() != 0 || series.endIndex() != series.dataItems.length) {\n                minY = undefined;\n                maxY = undefined;\n              }\n              seriesMin = series.getPrivate(\"selectionMinY\", minY);\n              seriesMax = series.getPrivate(\"selectionMaxY\", maxY);\n            }\n          }\n          if (!series.isHidden() && !series.isShowing()) {\n            if ($type.isNumber(seriesMin)) {\n              selectionMin = Math.min(selectionMin, seriesMin);\n            }\n            if ($type.isNumber(seriesMax)) {\n              selectionMax = Math.max(selectionMax, seriesMax);\n            }\n          }\n        }\n      });\n      this.axisRanges.each(range => {\n        if (range.get(\"affectsMinMax\")) {\n          let value = range.get(\"value\");\n          if (value != null) {\n            selectionMin = Math.min(selectionMin, value);\n            selectionMax = Math.max(selectionMax, value);\n          }\n          value = range.get(\"endValue\");\n          if (value != null) {\n            selectionMin = Math.min(selectionMin, value);\n            selectionMax = Math.max(selectionMax, value);\n          }\n        }\n      });\n      if (selectionMin > selectionMax) {\n        [selectionMin, selectionMax] = [selectionMax, selectionMin];\n      }\n      if ($type.isNumber(minDefined)) {\n        if (strictMinMax) {\n          selectionMin = minDefined;\n        } else {\n          selectionMin = min;\n        }\n      } else if (strictMinMax) {\n        if ($type.isNumber(this._minReal)) {\n          selectionMin = this._minReal;\n        }\n      }\n      if ($type.isNumber(maxDefined)) {\n        if (strictMinMax) {\n          selectionMax = maxDefined;\n        } else {\n          selectionMax = max;\n        }\n      } else if (strictMinMax) {\n        if ($type.isNumber(this._maxReal)) {\n          selectionMax = this._maxReal;\n        }\n      }\n      if (selectionMin === selectionMax) {\n        let smin = selectionMin;\n        selectionMin -= this._deltaMinMax;\n        selectionMax += this._deltaMinMax;\n        if (selectionMin < min) {\n          let d = smin - min;\n          if (d == 0) {\n            d = this._deltaMinMax;\n          }\n          selectionMin = smin - d;\n          selectionMax = smin + d;\n          strictMinMax = true;\n        }\n        let minMaxStep2 = this._adjustMinMax(selectionMin, selectionMax, gridCount, strictMinMax);\n        selectionMin = minMaxStep2.min;\n        selectionMax = minMaxStep2.max;\n      }\n      let selectionMinReal = selectionMin;\n      let selectionMaxReal = selectionMax;\n      let delta = selectionMax - selectionMin;\n      selectionMin -= delta * extraMin;\n      selectionMax += delta * extraMax;\n      let minMaxStep = this._adjustMinMax(selectionMin, selectionMax, gridCount);\n      selectionMin = minMaxStep.min;\n      selectionMax = minMaxStep.max;\n      selectionMin = $math.fitToRange(selectionMin, min, max);\n      selectionMax = $math.fitToRange(selectionMax, min, max);\n      // do it for the second time !important\t\t\t\n      minMaxStep = this._adjustMinMax(selectionMin, selectionMax, gridCount, true);\n      if (!strictMinMax) {\n        selectionMin = minMaxStep.min;\n        selectionMax = minMaxStep.max;\n      }\n      const syncWithAxis = this.get(\"syncWithAxis\");\n      if (syncWithAxis) {\n        minMaxStep = this._syncAxes(selectionMin, selectionMax, minMaxStep.step, syncWithAxis.getPrivate(\"selectionMinFinal\", syncWithAxis.getPrivate(\"minFinal\", 0)), syncWithAxis.getPrivate(\"selectionMaxFinal\", syncWithAxis.getPrivate(\"maxFinal\", 1)), syncWithAxis.getPrivate(\"selectionStepFinal\", syncWithAxis.getPrivate(\"step\", 1)));\n        if (minMaxStep.min < min) {\n          minMaxStep.min = min;\n        }\n        if (minMaxStep.max > max) {\n          minMaxStep.max = max;\n        }\n        selectionMin = minMaxStep.min;\n        selectionMax = minMaxStep.max;\n      }\n      if (strictMinMax) {\n        if ($type.isNumber(minDefined)) {\n          selectionMin = Math.max(selectionMin, minDefined);\n        }\n        if ($type.isNumber(maxDefined)) {\n          selectionMax = Math.min(selectionMax, maxDefined);\n        }\n      }\n      if (selectionStrictMinMax) {\n        selectionMin = selectionMinReal - (selectionMaxReal - selectionMinReal) * extraMin;\n        selectionMax = selectionMaxReal + (selectionMaxReal - selectionMinReal) * extraMax;\n      }\n      if (strictMinMax) {\n        if ($type.isNumber(minDefined)) {\n          selectionMin = minDefined;\n        } else {\n          selectionMin = selectionMinReal;\n        }\n        if ($type.isNumber(maxDefined)) {\n          selectionMax = maxDefined;\n        } else {\n          selectionMax = selectionMaxReal;\n        }\n        if (selectionMax - selectionMin <= 0.00000001) {\n          selectionMin -= this._deltaMinMax;\n          selectionMax += this._deltaMinMax;\n        }\n        let delta = selectionMax - selectionMin;\n        selectionMin -= delta * extraMin;\n        selectionMax += delta * extraMax;\n      }\n      if (this.get(\"logarithmic\")) {\n        if (selectionMin <= 0) {\n          selectionMin = selectionMinReal * (1 - Math.min(extraMin, 0.99));\n        }\n        if (selectionMin < min) {\n          selectionMin = min;\n        }\n        if (selectionMax > max) {\n          selectionMax = max;\n        }\n      }\n      let len = Math.min(20, Math.ceil(Math.log(this.getPrivate(\"maxZoomFactor\", 100) + 1) / Math.LN10) + 2);\n      let start = $math.round(this.valueToFinalPosition(selectionMin), len);\n      let end = $math.round(this.valueToFinalPosition(selectionMax), len);\n      this.setPrivateRaw(\"selectionMinFinal\", selectionMin);\n      this.setPrivateRaw(\"selectionMaxFinal\", selectionMax);\n      this.setPrivateRaw(\"selectionStepFinal\", minMaxStep.step);\n      this.zoom(start, end);\n    }\n  }\n  _getMinMax() {\n    let minDefined = this.get(\"min\");\n    let maxDefined = this.get(\"max\");\n    let min = Infinity;\n    let max = -Infinity;\n    let extraMin = this.get(\"extraMin\", 0);\n    let extraMax = this.get(\"extraMax\", 0);\n    if (this.get(\"logarithmic\")) {\n      if (!this.get(\"strictMinMax\")) {\n        if (this.get(\"extraMin\") == null) {\n          extraMin = 0.1;\n        }\n        if (this.get(\"extraMax\") == null) {\n          extraMax = 0.2;\n        }\n      }\n    }\n    let minDiff = Infinity;\n    $array.each(this.series, series => {\n      if (!series.get(\"ignoreMinMax\")) {\n        let seriesMin;\n        let seriesMax;\n        if (series.get(\"xAxis\") === this) {\n          seriesMin = series.getPrivate(\"minX\");\n          seriesMax = series.getPrivate(\"maxX\");\n        } else if (series.get(\"yAxis\") === this) {\n          seriesMin = series.getPrivate(\"minY\");\n          seriesMax = series.getPrivate(\"maxY\");\n        }\n        if ($type.isNumber(seriesMin) && $type.isNumber(seriesMax)) {\n          min = Math.min(min, seriesMin);\n          max = Math.max(max, seriesMax);\n          let diff = seriesMax - seriesMin;\n          if (diff <= 0) {\n            diff = Math.abs(seriesMax / 100);\n          }\n          if (diff < minDiff) {\n            minDiff = diff;\n          }\n        }\n      }\n    });\n    this.axisRanges.each(range => {\n      if (range.get(\"affectsMinMax\")) {\n        let value = range.get(\"value\");\n        if (value != null) {\n          min = Math.min(min, value);\n          max = Math.max(max, value);\n        }\n        value = range.get(\"endValue\");\n        if (value != null) {\n          min = Math.min(min, value);\n          max = Math.max(max, value);\n        }\n      }\n    });\n    if (this.get(\"logarithmic\")) {\n      let treatZeroAs = this.get(\"treatZeroAs\");\n      if ($type.isNumber(treatZeroAs)) {\n        if (min <= 0) {\n          min = treatZeroAs;\n        }\n      }\n      if (min <= 0) {\n        new Error(\"Logarithmic value axis can not have values <= 0.\");\n      }\n    }\n    if (min === 0 && max === 0) {\n      max = 0.9;\n      min = -0.9;\n    }\n    if ($type.isNumber(minDefined)) {\n      min = minDefined;\n    }\n    if ($type.isNumber(maxDefined)) {\n      max = maxDefined;\n    }\n    // meaning no min/max found on series/ranges and no min/max was defined\n    if (min === Infinity || max === -Infinity) {\n      this.setPrivate(\"minFinal\", undefined);\n      this.setPrivate(\"maxFinal\", undefined);\n      return;\n    }\n    if (min > max) {\n      [min, max] = [max, min];\n    }\n    const initialMin = min;\n    const initialMax = max;\n    // adapter\n    let minAdapted = this.adapters.fold(\"min\", min);\n    let maxAdapted = this.adapters.fold(\"max\", max);\n    this._minRealLog = min;\n    if ($type.isNumber(minAdapted)) {\n      min = minAdapted;\n    }\n    if ($type.isNumber(maxAdapted)) {\n      max = maxAdapted;\n    }\n    // DateAxis does some magic here\n    min = this._fixMin(min);\n    max = this._fixMax(max);\n    // this happens if starLocation and endLocation are 0.5 and DateAxis has only one date\t\t\n    if (max - min <= 1 / Math.pow(10, 15)) {\n      if (max - min !== 0) {\n        this._deltaMinMax = (max - min) / 2;\n      } else {\n        this._getDelta(max);\n      }\n      min -= this._deltaMinMax;\n      max += this._deltaMinMax;\n    }\n    // add extras\n    min -= (max - min) * extraMin;\n    max += (max - min) * extraMax;\n    if (this.get(\"logarithmic\")) {\n      // don't let min go below 0 if real min is >= 0\n      if (min < 0 && initialMin >= 0) {\n        min = 0;\n      }\n      // don't let max go above 0 if real max is <= 0\n      if (max > 0 && initialMax <= 0) {\n        max = 0;\n      }\n    }\n    this._minReal = min;\n    this._maxReal = max;\n    let strictMinMax = this.get(\"strictMinMax\");\n    let strictMinMaxSelection = this.get(\"strictMinMaxSelection\", false);\n    if (strictMinMaxSelection) {\n      strictMinMax = strictMinMaxSelection;\n    }\n    let strict = strictMinMax;\n    if ($type.isNumber(maxDefined)) {\n      strict = true;\n    }\n    let gridCount = this.get(\"renderer\").gridCount();\n    let minMaxStep = this._adjustMinMax(min, max, gridCount, strict);\n    min = minMaxStep.min;\n    max = minMaxStep.max;\n    // do it for the second time with strict true (importat!)\n    minMaxStep = this._adjustMinMax(min, max, gridCount, true);\n    min = minMaxStep.min;\n    max = minMaxStep.max;\n    // return min max if strict\n    if (strictMinMax) {\n      if ($type.isNumber(minDefined)) {\n        min = minDefined;\n      } else {\n        min = this._minReal;\n      }\n      if ($type.isNumber(maxDefined)) {\n        max = maxDefined;\n      } else {\n        max = this._maxReal;\n      }\n      if (max - min <= 0.00000001) {\n        min -= this._deltaMinMax;\n        max += this._deltaMinMax;\n      }\n      let delta = max - min;\n      min -= delta * extraMin;\n      max += delta * extraMax;\n    }\n    minAdapted = this.adapters.fold(\"min\", min);\n    maxAdapted = this.adapters.fold(\"max\", max);\n    if ($type.isNumber(minAdapted)) {\n      min = minAdapted;\n    }\n    if ($type.isNumber(maxAdapted)) {\n      max = maxAdapted;\n    }\n    if (minDiff == Infinity) {\n      minDiff = max - min;\n    }\n    // this is to avoid floating point number error\n    let decCount = Math.round(Math.abs(Math.log(Math.abs(max - min)) * Math.LOG10E)) + 5;\n    min = $math.round(min, decCount);\n    max = $math.round(max, decCount);\n    const syncWithAxis = this.get(\"syncWithAxis\");\n    if (syncWithAxis) {\n      minMaxStep = this._syncAxes(min, max, minMaxStep.step, syncWithAxis.getPrivate(\"minFinal\", syncWithAxis.getPrivate(\"min\", 0)), syncWithAxis.getPrivate(\"maxFinal\", syncWithAxis.getPrivate(\"max\", 1)), syncWithAxis.getPrivate(\"step\", 1));\n      min = minMaxStep.min;\n      max = minMaxStep.max;\n    }\n    this.setPrivateRaw(\"maxZoomFactor\", Math.max(1, Math.ceil((max - min) / minDiff * this.get(\"maxZoomFactor\", 100))));\n    this._fixZoomFactor();\n    if (this.get(\"logarithmic\")) {\n      this._minLogAdjusted = min;\n      min = this._minReal;\n      max = this._maxReal;\n      if (min <= 0) {\n        min = initialMin * (1 - Math.min(extraMin, 0.99));\n      }\n    }\n    if ($type.isNumber(min) && $type.isNumber(max)) {\n      if (this.getPrivate(\"minFinal\") !== min || this.getPrivate(\"maxFinal\") !== max) {\n        this.setPrivate(\"minFinal\", min);\n        this.setPrivate(\"maxFinal\", max);\n        this._saveMinMax(min, max);\n        const duration = this.get(\"interpolationDuration\", 0);\n        const easing = this.get(\"interpolationEasing\");\n        this.animatePrivate({\n          key: \"min\",\n          to: min,\n          duration,\n          easing\n        });\n        this.animatePrivate({\n          key: \"max\",\n          to: max,\n          duration,\n          easing\n        });\n      }\n    }\n  }\n  _fixZoomFactor() {}\n  _getDelta(max) {\n    // the number by which we need to raise 10 to get difference\n    let exponent = Math.log(Math.abs(max)) * Math.LOG10E;\n    // here we find a number which is power of 10 and has the same count of numbers as difference has\n    let power = Math.pow(10, Math.floor(exponent));\n    // reduce this number by 10 times\n    power = power / 10;\n    this._deltaMinMax = power;\n  }\n  _saveMinMax(_min, _max) {}\n  _adjustMinMax(min, max, gridCount, strictMode) {\n    // will fail if 0\n    if (gridCount <= 1) {\n      gridCount = 1;\n    }\n    gridCount = Math.round(gridCount);\n    let initialMin = min;\n    let initialMax = max;\n    let difference = max - min;\n    // in case min and max is the same, use max\n    if (difference === 0) {\n      difference = Math.abs(max);\n    }\n    // the number by which we need to raise 10 to get difference\n    let exponent = Math.log(Math.abs(difference)) * Math.LOG10E;\n    // here we find a number which is power of 10 and has the same count of numbers as difference has\n    let power = Math.pow(10, Math.floor(exponent));\n    // reduce this number by 10 times\n    power = power / 10;\n    let extra = power;\n    if (strictMode) {\n      extra = 0;\n    }\n    // round down min\n    if (strictMode) {\n      min = Math.floor(min / power) * power;\n      // round up max\n      max = Math.ceil(max / power) * power;\n    } else {\n      min = Math.ceil(min / power) * power - extra;\n      // round up max\n      max = Math.floor(max / power) * power + extra;\n    }\n    // don't let min go below 0 if real min is >= 0\n    if (min < 0 && initialMin >= 0) {\n      min = 0;\n    }\n    // don't let max go above 0 if real max is <= 0\n    if (max > 0 && initialMax <= 0) {\n      max = 0;\n    }\n    exponent = Math.log(Math.abs(difference)) * Math.LOG10E;\n    power = Math.pow(10, Math.floor(exponent));\n    power = power / 100; // used to be 10 in v4, but this caused issue that there could be limited number of grids with even very small minGridDistance\n    // approximate difference between two grid lines\n    let step = Math.ceil(difference / gridCount / power) * power;\n    let stepPower = Math.pow(10, Math.floor(Math.log(Math.abs(step)) * Math.LOG10E));\n    // the step should divide by  2, 5, and 10.\n    let stepDivisor = Math.ceil(step / stepPower); // number 0 - 10\n    if (stepDivisor > 5) {\n      stepDivisor = 10;\n    } else if (stepDivisor <= 5 && stepDivisor > 2) {\n      stepDivisor = 5;\n    }\n    // now get real step\n    step = Math.ceil(step / (stepPower * stepDivisor)) * stepPower * stepDivisor;\n    let maxPrecision = this.get(\"maxPrecision\");\n    if ($type.isNumber(maxPrecision)) {\n      let ceiledStep = $math.ceil(step, maxPrecision);\n      if (maxPrecision < Number.MAX_VALUE && step !== ceiledStep) {\n        step = ceiledStep;\n        if (step == 0) {\n          step = 1;\n        }\n      }\n    }\n    let decCount = 0;\n    // in case numbers are smaller than 1\n    if (stepPower < 1) {\n      // exponent is less then 1 too. Count decimals of exponent\n      decCount = Math.round(Math.abs(Math.log(Math.abs(stepPower)) * Math.LOG10E)) + 1;\n      // round step\n      step = $math.round(step, decCount);\n    }\n    // final min and max\n    let minCount = Math.floor(min / step);\n    min = $math.round(step * minCount, decCount);\n    let maxCount;\n    if (!strictMode) {\n      maxCount = Math.ceil(max / step);\n    } else {\n      maxCount = Math.floor(max / step);\n    }\n    if (maxCount === minCount) {\n      maxCount++;\n    }\n    max = $math.round(step * maxCount, decCount);\n    if (max < initialMax) {\n      max = max + step;\n    }\n    if (min > initialMin) {\n      min = min - step;\n    }\n    step = this.fixSmallStep(step);\n    return {\n      min: min,\n      max: max,\n      step: step\n    };\n  }\n  /**\r\n   * Returns text to be used in an axis tooltip for specific relative position.\r\n   *\r\n   * @param   position  Position\r\n   * @return            Tooltip text\r\n   */\n  getTooltipText(position, _adjustPosition) {\n    const numberFormat = this.get(\"tooltipNumberFormat\", this.get(\"numberFormat\"));\n    const formatter = this.getNumberFormatter();\n    const extraDecimals = this.get(\"extraTooltipPrecision\", 0);\n    const decimals = this.getPrivate(\"stepDecimalPlaces\", 0) + extraDecimals;\n    const value = $math.round(this.positionToValue(position), decimals);\n    if (numberFormat) {\n      return formatter.format(value, numberFormat);\n    } else {\n      return formatter.format(value, undefined, decimals);\n    }\n  }\n  /**\r\n   * Returns a data item from series that is closest to the `position`.\r\n   *\r\n   * @param   series    Series\r\n   * @param   position  Relative position\r\n   * @return            Data item\r\n   */\n  getSeriesItem(series, position) {\n    let fieldName = this.getPrivate(\"name\") + this.get(\"renderer\").getPrivate(\"letter\");\n    let value = this.positionToValue(position);\n    let index = undefined;\n    let oldDiff;\n    $array.each(series.dataItems, (dataItem, i) => {\n      const diff = Math.abs(dataItem.get(fieldName) - value);\n      if (index === undefined || diff < oldDiff) {\n        index = i;\n        oldDiff = diff;\n      }\n    });\n    if (index != null) {\n      return series.dataItems[index];\n    }\n  }\n  /**\r\n   * Zooms the axis to specific `start` and `end` values.\r\n   *\r\n   * Optional `duration` specifies duration of zoom animation in milliseconds.\r\n   *\r\n   * @param  start     Start value\r\n   * @param  end       End value\r\n   * @param  duration  Duration in milliseconds\r\n   */\n  zoomToValues(start, end, duration) {\n    const min = this.getPrivate(\"minFinal\", 0);\n    const max = this.getPrivate(\"maxFinal\", 0);\n    if (this.getPrivate(\"min\") != null && this.getPrivate(\"max\") != null) {\n      this.zoom((start - min) / (max - min), (end - min) / (max - min), duration);\n    }\n  }\n  /**\r\n   * Syncs with a target axis.\r\n   *\r\n   * @param  min  Min\r\n   * @param  max  Max\r\n   * @param  step Step\r\n   */\n  _syncAxes(min, max, step, syncMin, syncMax, syncStep) {\n    let axis = this.get(\"syncWithAxis\");\n    if (axis) {\n      let count = Math.round(syncMax - syncMin) / syncStep;\n      let currentCount = Math.round((max - min) / step);\n      let gridCount = this.get(\"renderer\").gridCount();\n      if ($type.isNumber(count) && $type.isNumber(currentCount)) {\n        let synced = false;\n        let c = 0;\n        let diff = (max - min) * 0.01;\n        let omin = min;\n        let omax = max;\n        let ostep = step;\n        while (synced != true) {\n          synced = this._checkSync(omin, omax, ostep, count);\n          c++;\n          if (c > 500) {\n            synced = true;\n          }\n          if (!synced) {\n            if (c / 3 == Math.round(c / 3)) {\n              omin = min - diff * c;\n              if (min >= 0 && omin < 0) {\n                omin = 0;\n              }\n            } else {\n              omax = max + diff * c;\n              if (omax <= 0 && omax > 0) {\n                omax = 0;\n              }\n            }\n            let minMaxStep = this._adjustMinMax(omin, omax, gridCount, true);\n            omin = minMaxStep.min;\n            omax = minMaxStep.max;\n            ostep = minMaxStep.step;\n          } else {\n            min = omin;\n            max = omax;\n            step = ostep;\n          }\n        }\n      }\n    }\n    return {\n      min: min,\n      max: max,\n      step: step\n    };\n  }\n  /**\r\n   * Returns `true` if axis needs to be resunced with some other axis.\r\n   */\n  _checkSync(min, max, step, count) {\n    let currentCount = (max - min) / step;\n    for (let i = 1; i < count; i++) {\n      if ($math.round(currentCount / i, 1) == count || currentCount * i == count) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\r\n   * Returns relative position between two grid lines of the axis.\r\n   *\r\n   * @return Position\r\n   */\n  getCellWidthPosition() {\n    let max = this.getPrivate(\"selectionMax\", this.getPrivate(\"max\"));\n    let min = this.getPrivate(\"selectionMin\", this.getPrivate(\"min\"));\n    if ($type.isNumber(max) && $type.isNumber(min)) {\n      return this.getPrivate(\"step\", 1) / (max - min);\n    }\n    return 0.05;\n  }\n  /**\r\n   * @ignore\r\n   */\n  nextPosition(count) {\n    if (count == null) {\n      count = 1;\n    }\n    if (this.get(\"renderer\").getPrivate(\"letter\") == \"Y\") {\n      count *= -1;\n    }\n    let value = this.positionToValue(this.getPrivate(\"tooltipPosition\", 0));\n    value += this.getPrivate(\"step\", 1) * count;\n    value = $math.fitToRange(value, this.getPrivate(\"selectionMin\", 0), this.getPrivate(\"selectionMax\", 1));\n    return this.toGlobalPosition(this.valueToPosition(value));\n  }\n}\nObject.defineProperty(ValueAxis, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"ValueAxis\"\n});\nObject.defineProperty(ValueAxis, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Axis.classNames.concat([ValueAxis.className])\n});\n", "import { Axis } from \"./Axis\";\nimport * as $array from \"../../../core/util/Array\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $math from \"../../../core/util/Math\";\nimport * as $utils from \"../../../core/util/Utils\";\nimport { populateString } from \"../../../core/util/PopulateString\";\nimport { ValueAxis } from \"./ValueAxis\";\n/**\r\n * Creates a category axis.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/category-axis/} for more info\r\n * @important\r\n */\nexport class CategoryAxis extends Axis {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"_frequency\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(this, \"_itemMap\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n  }\n  _afterNew() {\n    this._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"axis\"]);\n    this.fields.push(\"category\");\n    this.setPrivateRaw(\"name\", \"category\");\n    this.addTag(\"category\");\n    super._afterNew();\n  }\n  _prepareChildren() {\n    super._prepareChildren();\n    const len = this.dataItems.length;\n    let i = 0;\n    if (this._valuesDirty) {\n      this._itemMap = {};\n      $array.each(this.dataItems, dataItem => {\n        dataItem.setRaw(\"index\", i);\n        this._itemMap[dataItem.get(\"category\")] = dataItem;\n        i++;\n      });\n      this.setPrivateRaw(\"maxZoomFactor\", len);\n    }\n    this.setPrivateRaw(\"startIndex\", Math.max(Math.round(this.get(\"start\", 0) * len), 0));\n    this.setPrivateRaw(\"endIndex\", Math.min(Math.round(this.get(\"end\", 1) * len), len));\n    if (this._sizeDirty || this._valuesDirty || this.isDirty(\"start\") || this.isDirty(\"end\") || this.isPrivateDirty(\"endIndex\") || this.isPrivateDirty(\"startIndex\") || this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\")) {\n      if (this.dataItems.length > 0) {\n        this._handleRangeChange();\n        this._prepareAxisItems();\n        this._updateAxisRanges();\n      }\n    }\n  }\n  _handleRangeChange() {\n    $array.each(this.series, series => {\n      let startCategory = this.dataItems[this.startIndex()].get(\"category\");\n      let endCategory = this.dataItems[this.endIndex() - 1].get(\"category\");\n      let baseAxis = series.get(\"baseAxis\");\n      let xAxis = series.get(\"xAxis\");\n      let yAxis = series.get(\"yAxis\");\n      if (xAxis instanceof CategoryAxis && yAxis instanceof CategoryAxis) {\n        series._markDirtyAxes();\n      } else if (baseAxis === this) {\n        let key;\n        let openKey;\n        let otherAxis = yAxis;\n        if (xAxis === baseAxis) {\n          if (series.get(\"categoryXField\")) {\n            key = \"categoryX\";\n          }\n          if (series.get(\"openCategoryXField\")) {\n            openKey = \"openCategoryX\";\n          }\n        } else if (yAxis === baseAxis) {\n          if (series.get(\"categoryYField\")) {\n            key = \"categoryY\";\n          }\n          if (series.get(\"openCategoryYField\")) {\n            openKey = \"openCategoryY\";\n          }\n          otherAxis = xAxis;\n        }\n        if (otherAxis instanceof ValueAxis) {\n          if (key || openKey) {\n            let startDataItem;\n            let endDataItem;\n            for (let i = 0, len = series.dataItems.length; i < len; i++) {\n              let dataItem = series.dataItems[i];\n              if (key) {\n                if (dataItem.get(key) === startCategory) {\n                  startDataItem = dataItem;\n                  break;\n                }\n              }\n              if (openKey) {\n                if (dataItem.get(openKey) === startCategory) {\n                  startDataItem = dataItem;\n                  break;\n                }\n              }\n            }\n            for (let i = series.dataItems.length - 1; i >= 0; i--) {\n              let dataItem = series.dataItems[i];\n              if (key) {\n                if (dataItem.get(key) === endCategory) {\n                  endDataItem = dataItem;\n                  break;\n                }\n              }\n              if (openKey) {\n                if (dataItem.get(openKey) === endCategory) {\n                  endDataItem = dataItem;\n                  break;\n                }\n              }\n            }\n            let startIndex = 0;\n            let endIndex = series.dataItems.length;\n            if (startDataItem) {\n              startIndex = series.dataItems.indexOf(startDataItem);\n            }\n            if (endDataItem) {\n              endIndex = series.dataItems.indexOf(endDataItem) + 1;\n            }\n            series.setPrivate(\"startIndex\", startIndex);\n            series.setPrivate(\"endIndex\", endIndex);\n            let hasValue = false;\n            for (let i = startIndex; i < endIndex; i++) {\n              const dataItem = series.dataItems[i];\n              $array.each(series.__valueXShowFields, key => {\n                let value = dataItem.get(key);\n                if (value != null) {\n                  hasValue = true;\n                }\n              });\n              $array.each(series.__valueYShowFields, key => {\n                let value = dataItem.get(key);\n                if (value != null) {\n                  hasValue = true;\n                }\n              });\n              if (hasValue) {\n                break;\n              }\n            }\n            series.setPrivate(\"outOfSelection\", !hasValue);\n          }\n        }\n        series._markDirtyAxes(); // must be outside\n      }\n    });\n  }\n  _prepareAxisItems() {\n    var _a;\n    const renderer = this.get(\"renderer\");\n    const len = this.dataItems.length;\n    let startIndex = this.startIndex();\n    if (startIndex > 0) {\n      startIndex--;\n    }\n    let endIndex = this.endIndex();\n    if (endIndex < len) {\n      endIndex++;\n    }\n    const minorLabelsEnabled = renderer.get(\"minorLabelsEnabled\");\n    const minorGridEnabled = renderer.get(\"minorGridEnabled\", minorLabelsEnabled);\n    let maxCount = renderer.axisLength() / Math.max(renderer.get(\"minGridDistance\"), 1);\n    let frequency = Math.max(1, Math.min(len, Math.ceil((endIndex - startIndex) / maxCount)));\n    startIndex = Math.floor(startIndex / frequency) * frequency;\n    this._frequency = frequency;\n    for (let j = 0; j < len; j++) {\n      this._toggleDataItem(this.dataItems[j], false);\n    }\n    let f = this.dataItems[startIndex].get(\"index\", 0);\n    for (let i = startIndex; i < endIndex; i = i + frequency) {\n      let dataItem = this.dataItems[i];\n      this._createAssets(dataItem, []);\n      this._toggleDataItem(dataItem, true);\n      let count = frequency;\n      if (minorGridEnabled) {\n        count = 1;\n      }\n      this._prepareDataItem(dataItem, f, count);\n      f++;\n    }\n    if (renderer.get(\"minorGridEnabled\")) {\n      for (let i = startIndex; i < endIndex; i++) {\n        let dataItem = this.dataItems[i];\n        if (i % frequency != 0) {\n          this._createAssets(dataItem, [\"minor\"], true);\n          this._toggleDataItem(dataItem, true);\n          this._prepareDataItem(dataItem, 0, 1);\n          if (!minorLabelsEnabled) {\n            (_a = dataItem.get(\"label\")) === null || _a === void 0 ? void 0 : _a.setPrivate(\"visible\", false);\n          }\n        }\n      }\n    }\n    this._updateGhost();\n  }\n  _prepareDataItem(dataItem, fillIndex, count) {\n    let renderer = this.get(\"renderer\");\n    let categoryLocation = dataItem.get(\"categoryLocation\", 0);\n    let endCategoryLocation = dataItem.get(\"endCategoryLocation\", 1);\n    let index = dataItem.get(\"index\");\n    if (!$type.isNumber(index)) {\n      index = this.categoryToIndex(dataItem.get(\"category\"));\n    }\n    let position = this.indexToPosition(index, categoryLocation);\n    let endCategory = dataItem.get(\"endCategory\");\n    let endIndex;\n    if (endCategory) {\n      endIndex = this.categoryToIndex(endCategory);\n      if (!$type.isNumber(endIndex)) {\n        endIndex = index;\n      }\n    } else {\n      endIndex = index;\n    }\n    let endPosition = this.indexToPosition(endIndex, endCategoryLocation);\n    let fillEndIndex;\n    let fillEndPosition;\n    if (dataItem.get(\"isRange\")) {\n      fillEndIndex = endIndex;\n    } else {\n      fillEndIndex = index + this._frequency - 1;\n    }\n    fillEndPosition = this.indexToPosition(fillEndIndex, endCategoryLocation);\n    renderer.updateLabel(dataItem.get(\"label\"), position, endPosition, count);\n    renderer.updateGrid(dataItem.get(\"grid\"), position, endPosition);\n    renderer.updateTick(dataItem.get(\"tick\"), position, endPosition, count);\n    renderer.updateFill(dataItem.get(\"axisFill\"), position, fillEndPosition);\n    this._processBullet(dataItem);\n    renderer.updateBullet(dataItem.get(\"bullet\"), position, endPosition);\n    const fillRule = this.get(\"fillRule\");\n    if (fillRule) {\n      fillRule(dataItem, fillIndex);\n    }\n  }\n  startIndex() {\n    let len = this.dataItems.length;\n    return Math.min(Math.max(this.getPrivate(\"startIndex\", 0), 0), len - 1);\n  }\n  endIndex() {\n    let len = this.dataItems.length;\n    return Math.max(1, Math.min(this.getPrivate(\"endIndex\", len), len));\n  }\n  /**\r\n   * @ignore\r\n   */\n  baseValue() {}\n  /**\r\n   * @ignore\r\n   */\n  basePosition() {\n    return 0;\n  }\n  /**\r\n   * Returns X coordinate in pixels corresponding to specific category index.\r\n   *\r\n   * @param   value  Index\r\n   * @return         X coordinate\r\n   */\n  getX(value) {\n    let axisDataItem = this._itemMap[value];\n    if (axisDataItem) {\n      return this._settings.renderer.positionToCoordinate(this.indexToPosition(axisDataItem.get(\"index\", 0)));\n    }\n    return NaN;\n  }\n  /**\r\n   * Returns Y coordinate in pixels corresponding to specific category index.\r\n   *\r\n   * @param   value  Index\r\n   * @return         Y coordinate\r\n   */\n  getY(value) {\n    let axisDataItem = this._itemMap[value];\n    if (axisDataItem) {\n      return this._settings.renderer.positionToCoordinate(this.indexToPosition(axisDataItem.get(\"index\", 0)));\n    }\n    return NaN;\n  }\n  /**\r\n   * @ignore\r\n   */\n  getDataItemPositionX(dataItem, field, cellLocation, _axisLocation) {\n    const category = dataItem.get(field);\n    const axisDataItem = this._itemMap[category];\n    if (axisDataItem) {\n      return this.indexToPosition(axisDataItem.get(\"index\", 0), cellLocation);\n    }\n    return NaN;\n  }\n  /**\r\n   * @ignore\r\n   */\n  getDataItemCoordinateX(dataItem, field, cellLocation, _axisLocation) {\n    return this._settings.renderer.positionToCoordinate(this.getDataItemPositionX(dataItem, field, cellLocation, _axisLocation));\n  }\n  /**\r\n   * @ignore\r\n   */\n  getDataItemPositionY(dataItem, field, cellLocation, _axisLocation) {\n    const category = dataItem.get(field);\n    const axisDataItem = this._itemMap[category];\n    if (axisDataItem) {\n      return this.indexToPosition(axisDataItem.get(\"index\", 0), cellLocation);\n    }\n    return NaN;\n  }\n  /**\r\n   * @ignore\r\n   */\n  getDataItemCoordinateY(dataItem, field, cellLocation, _axisLocation) {\n    return this._settings.renderer.positionToCoordinate(this.getDataItemPositionY(dataItem, field, cellLocation, _axisLocation));\n  }\n  /**\r\n   * Converts category index to a relative position.\r\n   *\r\n   * `location` indicates relative position within category: 0 - start, 1 - end.\r\n   *\r\n   * If not set, will use middle (0.5) of the category.\r\n   *\r\n   * @param   index     Index\r\n   * @param   location  Location\r\n   * @return            Index\r\n   */\n  indexToPosition(index, location) {\n    if (!$type.isNumber(location)) {\n      location = 0.5;\n    }\n    let len = this.dataItems.length;\n    let startLocation = this.get(\"startLocation\", 0);\n    let endLocation = this.get(\"endLocation\", 1);\n    len -= startLocation;\n    len -= 1 - endLocation;\n    let position = (index + location - startLocation) / len;\n    let dataItem = this.dataItems[index];\n    if (dataItem) {\n      position += dataItem.get(\"deltaPosition\", 0);\n    }\n    return position;\n  }\n  /**\r\n   * Returns a position of a category.\r\n   *\r\n   * @param   category  Category to look up\r\n   * @return            Position\r\n   */\n  categoryToPosition(category) {\n    let dataItem = this._itemMap[category];\n    if (dataItem) {\n      return this.indexToPosition(dataItem.get(\"index\"));\n    }\n    return NaN;\n  }\n  /**\r\n   * Returns an index of a category.\r\n   *\r\n   * @param   category  Category to look up\r\n   * @return            Index\r\n   */\n  categoryToIndex(category) {\n    let dataItem = this._itemMap[category];\n    if (dataItem) {\n      return dataItem.get(\"index\");\n    }\n    return NaN;\n  }\n  /**\r\n   * @ignore\r\n   */\n  dataItemToPosition(dataItem) {\n    return this.indexToPosition(dataItem.get(\"index\"));\n  }\n  /**\r\n   * @ignore\r\n   */\n  roundAxisPosition(position, location) {\n    position += (0.5 - location) / this.dataItems.length;\n    return this.indexToPosition(this.axisPositionToIndex(position), location);\n  }\n  /**\r\n   * Returns an index of the category that corresponds to specific pixel\r\n   * position within axis.\r\n   *\r\n   * @param position  Position (px)\r\n   * @return Category index\r\n   */\n  axisPositionToIndex(position) {\n    let len = this.dataItems.length;\n    return $math.fitToRange(Math.floor(position * len), 0, len - 1); //$math.fitToRange(Math.floor((end - start) * len * position + len * start), 0, len - 1);\n  }\n  /**\r\n   * Returns text to be used in an axis tooltip for specific relative position.\r\n   *\r\n   * @param   position  Position\r\n   * @return            Tooltip text\r\n   */\n  getTooltipText(position, _adjustPosition) {\n    //@todo number formatter + tag\n    const dataItem = this.dataItems[this.axisPositionToIndex(position)];\n    if (dataItem) {\n      const label = dataItem.get(\"label\");\n      if (label) {\n        return populateString(label, this.get(\"tooltipText\", \"\"));\n      }\n    }\n  }\n  _updateTooltipText(tooltip, position) {\n    tooltip._setDataItem(this.dataItems[this.axisPositionToIndex(position)]);\n    tooltip.label.text.markDirtyText();\n  }\n  /**\r\n   * Returns a data item from series that is closest to the `position`.\r\n   *\r\n   * @param   series    Series\r\n   * @param   position  Relative position\r\n   * @return            Data item\r\n   */\n  getSeriesItem(series, position) {\n    if (this.dataItems.length > 0) {\n      let fieldName = this.getPrivate(\"name\") + this.get(\"renderer\").getPrivate(\"letter\");\n      let index = this.axisPositionToIndex(position);\n      // try simple first\n      let seriesDataItem = series.dataItems[index];\n      let axisDataItem = this.dataItems[index];\n      let category = axisDataItem.get(\"category\");\n      if (seriesDataItem && axisDataItem) {\n        if (seriesDataItem.get(fieldName) === category) {\n          return seriesDataItem;\n        }\n      }\n      // if not found, try looking\n      for (let i = 0, len = series.dataItems.length; i < len; i++) {\n        let dataItem = series.dataItems[i];\n        if (dataItem.get(fieldName) === category) {\n          return dataItem;\n        }\n      }\n    }\n  }\n  /**\r\n   * Zooms the axis to specific `start` and `end` indexes.\r\n   *\r\n   * Optional `duration` specifies duration of zoom animation in milliseconds.\r\n   *\r\n   * @param  start     Start index\r\n   * @param  end       End index\r\n   * @param  duration  Duration in milliseconds\r\n   */\n  zoomToIndexes(start, end, duration) {\n    let len = this.dataItems.length;\n    this.zoom(start / len, end / len, duration);\n  }\n  zoomToCategories(startCategory, endCategory, duration) {\n    this.zoomToIndexes(this.categoryToIndex(startCategory), this.categoryToIndex(endCategory) + 1, duration);\n  }\n  /**\r\n   * Returns position span between start and end of a single cell in axis.\r\n   *\r\n   * @since 5.2.30\r\n   * @return Position\r\n   */\n  getCellWidthPosition() {\n    return this._frequency / this.dataItems.length / (this.get(\"end\", 1) - this.get(\"start\", 0));\n  }\n  /**\r\n   * @ignore\r\n   */\n  nextPosition(count) {\n    if (count == null) {\n      count = 1;\n    }\n    if (this.get(\"renderer\").getPrivate(\"letter\") == \"Y\") {\n      count *= -1;\n    }\n    const position = this.getPrivate(\"tooltipPosition\", 0);\n    const index = $math.fitToRange(this.axisPositionToIndex(position) + count, 0, this.dataItems.length - 1);\n    return this.toGlobalPosition(this.indexToPosition(index));\n  }\n}\nObject.defineProperty(CategoryAxis, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"CategoryAxis\"\n});\nObject.defineProperty(CategoryAxis, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Axis.classNames.concat([CategoryAxis.className])\n});\n", "import { CategoryAxis } from \"./CategoryAxis\";\nimport * as $time from \"../../../core/util/Time\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $array from \"../../../core/util/Array\";\nimport * as $utils from \"../../../core/util/Utils\";\n/**\r\n * Category-based date axis.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/category-date-axis/} for more info\r\n * @important\r\n */\nexport class CategoryDateAxis extends CategoryAxis {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"_frequency\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(this, \"_itemMap\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n  }\n  _afterNew() {\n    this._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"axis\"]);\n    this.fields.push(\"category\");\n    super._afterNew();\n  }\n  _prepareAxisItems() {\n    // temp\n    this.setPrivateRaw(\"baseInterval\", this.get(\"baseInterval\"));\n    const renderer = this.get(\"renderer\");\n    const len = this.dataItems.length;\n    let startIndex = this.startIndex();\n    if (startIndex > 0) {\n      startIndex--;\n    }\n    let endIndex = this.endIndex();\n    if (endIndex < len) {\n      endIndex++;\n    }\n    let maxCount = renderer.axisLength() / Math.max(renderer.get(\"minGridDistance\"), 1 / Number.MAX_SAFE_INTEGER);\n    let frequency = Math.min(len, Math.ceil((endIndex - startIndex) / maxCount));\n    startIndex = Math.floor(startIndex / frequency) * frequency;\n    this._frequency = frequency;\n    for (let j = 0; j < len; j++) {\n      this._toggleDataItem(this.dataItems[j], false);\n    }\n    let startTime = Number(this.dataItems[startIndex].get(\"category\"));\n    let endTime = Number(this.dataItems[endIndex - 1].get(\"category\"));\n    let realDuration = endTime - startTime;\n    if (endIndex - startIndex < maxCount) {\n      realDuration = endTime - startTime - ((endTime - startTime) / this.baseDuration() - (endIndex - startIndex)) * this.baseDuration();\n    }\n    // if all items are on axis\n    let gridInterval = $time.chooseInterval(0, realDuration, maxCount, this.get(\"gridIntervals\"));\n    const nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\n    const baseInterval = this.getPrivate(\"baseInterval\");\n    if ($time.getIntervalDuration(gridInterval) < this.baseDuration()) {\n      gridInterval = Object.assign({}, baseInterval);\n    }\n    const formats = this.get(\"dateFormats\");\n    let previousValue = -Infinity;\n    let previousIndex = -Infinity;\n    let previousUnitValue = -Infinity;\n    let format;\n    let selectedItems = [];\n    let changed = false;\n    for (let i = startIndex; i < endIndex; i++) {\n      let dataItem = this.dataItems[i];\n      let index = dataItem.get(\"index\");\n      let skip = false;\n      let value = Number(dataItem.get(\"category\"));\n      let date = new Date(value);\n      let unitValue = $time.getUnitValue(date, gridInterval.timeUnit);\n      format = formats[gridInterval.timeUnit];\n      let added = false;\n      if (gridInterval.timeUnit != \"year\" && gridInterval.timeUnit != \"week\") {\n        if (nextGridUnit && this.get(\"markUnitChange\") && $type.isNumber(previousValue)) {\n          if ($time.checkChange(value, previousValue, nextGridUnit, this._root.utc)) {\n            format = this.get(\"periodChangeDateFormats\")[gridInterval.timeUnit];\n            if (index - frequency * 0.5 < previousIndex) {\n              selectedItems.pop();\n            }\n            selectedItems.push({\n              format: format,\n              dataItem: dataItem\n            });\n            changed = true;\n            added = true;\n            previousIndex = index;\n            previousUnitValue = unitValue;\n          }\n        }\n      }\n      let shouldAdd = false;\n      if (gridInterval.timeUnit === \"day\" || gridInterval.timeUnit === \"week\") {\n        if (index - previousIndex >= frequency) {\n          shouldAdd = true;\n        }\n      } else {\n        if (unitValue % gridInterval.count === 0) {\n          if (unitValue != previousUnitValue) {\n            shouldAdd = true;\n          }\n        }\n      }\n      if (!added && shouldAdd) {\n        if (index - frequency * 0.7 < previousIndex) {\n          if (changed) {\n            skip = true;\n          }\n        }\n        if (!skip) {\n          selectedItems.push({\n            format: format,\n            dataItem: dataItem\n          });\n          previousIndex = index;\n          previousUnitValue = unitValue;\n        }\n        changed = false;\n      }\n      previousValue = value;\n    }\n    if (selectedItems.length > 0) {\n      let f = selectedItems[0].dataItem.get(\"index\", 0);\n      $array.each(selectedItems, item => {\n        const dataItem = item.dataItem;\n        const format = item.format;\n        this._createAssets(dataItem, []);\n        this._toggleDataItem(dataItem, true);\n        let value = Number(dataItem.get(\"category\"));\n        let date = new Date(value);\n        const label = dataItem.get(\"label\");\n        if (label) {\n          label.set(\"text\", this._root.dateFormatter.format(date, format));\n        }\n        f++;\n        this._prepareDataItem(dataItem, f, frequency);\n      });\n    }\n  }\n  /**\r\n   * Returns a duration of currently active `baseInterval` in milliseconds.\r\n   *\r\n   * @return Duration\r\n   */\n  baseDuration() {\n    return $time.getIntervalDuration(this.getPrivate(\"baseInterval\"));\n  }\n  /**\r\n   * Returns text to be used in an axis tooltip for specific relative position.\r\n   *\r\n   * @param   position  Position\r\n   * @return            Tooltip text\r\n   */\n  getTooltipText(position, _adjustPosition) {\n    //@todo number formatter + tag\n    let dataItem = this.dataItems[this.axisPositionToIndex(position)];\n    if (dataItem) {\n      let format = this.get(\"dateFormats\")[this.getPrivate(\"baseInterval\").timeUnit];\n      return this._root.dateFormatter.format(new Date(dataItem.get(\"category\", 0)), this.get(\"tooltipDateFormat\", format));\n    }\n  }\n  _updateTooltipText(tooltip, position) {\n    tooltip.label.set(\"text\", this.getTooltipText(position));\n  }\n}\nObject.defineProperty(CategoryDateAxis, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"CategoryDateAxis\"\n});\nObject.defineProperty(CategoryDateAxis, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: CategoryAxis.classNames.concat([CategoryDateAxis.className])\n});\n", "import { DataItem } from \"../../../core/render/Component\";\nimport { ValueAxis } from \"./ValueAxis\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $math from \"../../../core/util/Math\";\nimport * as $order from \"../../../core/util/Order\";\nimport * as $array from \"../../../core/util/Array\";\nimport * as $object from \"../../../core/util/Object\";\nimport * as $utils from \"../../../core/util/Utils\";\nimport * as $time from \"../../../core/util/Time\";\n/**\r\n * Creates a date axis.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/} for more info\r\n * @important\r\n */\nexport class DateAxis extends ValueAxis {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"_dataGrouped\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_seriesDataGrouped\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_groupingCalculated\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_intervalDuration\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(this, \"_baseDuration\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(this, \"_intervalMax\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_intervalMin\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n  }\n  _afterNew() {\n    this._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"axis\"]);\n    super._afterNew();\n    this._setBaseInterval(this.get(\"baseInterval\"));\n    this.on(\"baseInterval\", () => {\n      this._setBaseInterval(this.get(\"baseInterval\"));\n    });\n  }\n  _setBaseInterval(interval) {\n    this.setPrivateRaw(\"baseInterval\", interval);\n    this._baseDuration = $time.getIntervalDuration(interval);\n  }\n  _fixZoomFactor() {\n    const maxZoomFactor = this.get(\"maxZoomFactor\");\n    if (maxZoomFactor != null && maxZoomFactor != Infinity) {\n      this.setPrivateRaw(\"maxZoomFactor\", maxZoomFactor);\n    } else {\n      this.setPrivateRaw(\"maxZoomFactor\", Math.round((this.getPrivate(\"max\", 0) - this.getPrivate(\"min\", 0)) / this.baseMainDuration()));\n    }\n  }\n  _groupData() {\n    const min = this.getPrivate(\"min\");\n    const max = this.getPrivate(\"max\");\n    if ($type.isNumber(min) && $type.isNumber(max)) {\n      this._fixZoomFactor();\n      const groupInterval = this.getPrivate(\"groupInterval\");\n      if (groupInterval) {\n        this._setBaseInterval(groupInterval);\n      } else {\n        this._setBaseInterval(this.get(\"baseInterval\"));\n      }\n      if (this.isDirty(\"groupInterval\")) {\n        let groupInterval = this.get(\"groupInterval\");\n        if (groupInterval) {\n          this.setRaw(\"groupIntervals\", [groupInterval]);\n          this._handleRangeChange();\n        }\n      }\n      if (this.isDirty(\"groupData\")) {\n        if (!this._dataGrouped) {\n          if (this.get(\"groupData\")) {\n            $array.each(this.series, series => {\n              this._groupSeriesData(series);\n            });\n            this._handleRangeChange();\n          } else {\n            let baseInterval = this.get(\"baseInterval\");\n            let mainDataSetId = baseInterval.timeUnit + baseInterval.count;\n            $array.each(this.series, series => {\n              series.setDataSet(mainDataSetId);\n              series.resetGrouping();\n            });\n            this._setBaseInterval(baseInterval);\n            this.setPrivateRaw(\"groupInterval\", undefined);\n            this.markDirtyExtremes();\n          }\n          this._dataGrouped = true;\n        }\n      }\n    }\n  }\n  _groupSeriesData(series) {\n    if (this.get(\"groupData\") && !series.get(\"groupDataDisabled\")) {\n      this._dataGrouped = true; // helps to avoid double grouping\n      this._seriesDataGrouped = true;\n      // make array of intervals which will be used;\n      let intervals = [];\n      let baseDuration = this.baseMainDuration();\n      let groupIntervals = this.get(\"groupIntervals\");\n      if (groupIntervals) {}\n      $array.each(groupIntervals, interval => {\n        let intervalDuration = $time.getIntervalDuration(interval);\n        if (intervalDuration > baseDuration) {\n          intervals.push(interval);\n        }\n      });\n      series._dataSets = {};\n      const key = this.getPrivate(\"name\") + this.get(\"renderer\").getPrivate(\"letter\");\n      let fields;\n      const baseAxis = series.get(\"baseAxis\");\n      if (series.get(\"xAxis\") === baseAxis) {\n        fields = series._valueYFields;\n      } else if (series.get(\"yAxis\") === baseAxis) {\n        fields = series._valueXFields;\n      }\n      let dataItems = series._mainDataItems;\n      let baseInterval = this.get(\"baseInterval\");\n      let mainDataSetId = baseInterval.timeUnit + baseInterval.count;\n      series._dataSets[mainDataSetId] = dataItems;\n      const groupCallback = series.get(\"groupDataCallback\");\n      let groupOriginals = series.get(\"groupDataWithOriginals\", false);\n      if (groupCallback) {\n        groupOriginals = true;\n      }\n      $array.each(intervals, interval => {\n        let previousTime = -Infinity;\n        let dataSetId = interval.timeUnit + interval.count;\n        series._dataSets[dataSetId] = [];\n        let newDataItem;\n        let sum = {};\n        let count = {};\n        let groupFieldValues = {};\n        let workingFields = {};\n        $array.each(fields, field => {\n          sum[field] = 0;\n          count[field] = 0;\n          groupFieldValues[field] = series.get(field + \"Grouped\");\n          workingFields[field] = field + \"Working\";\n        });\n        let intervalDuration = $time.getDuration(interval.timeUnit);\n        let firstItem = dataItems[0];\n        let firstTime;\n        if (firstItem) {\n          firstTime = dataItems[0].get(key);\n        }\n        let prevNewDataItem;\n        $array.each(dataItems, dataItem => {\n          let time = dataItem.get(key);\n          //let roundedTime = $time.round(new Date(time), interval.timeUnit, interval.count, firstDay, utc, firstDate, timezone).getTime();\n          let roundedTime = $time.roun(time, interval.timeUnit, interval.count, this._root, firstTime);\n          let dataContext;\n          if (previousTime < roundedTime - intervalDuration / 24) {\n            dataContext = $object.copy(dataItem.dataContext);\n            newDataItem = new DataItem(series, dataContext, series._makeDataItem(dataContext));\n            newDataItem.setRaw(key, roundedTime);\n            series._dataSets[dataSetId].push(newDataItem);\n            $array.each(fields, field => {\n              let value = dataItem.get(field);\n              if ($type.isNumber(value)) {\n                newDataItem.setRaw(field, value);\n                newDataItem.setRaw(workingFields[field], value);\n                count[field] = 1;\n                sum[field] = value;\n              } else {\n                sum[field] = 0;\n                count[field] = 0;\n              }\n            });\n            if (groupOriginals) {\n              newDataItem.set(\"originals\", [dataItem]);\n            }\n            if (groupCallback && prevNewDataItem) {\n              groupCallback(prevNewDataItem, interval);\n            }\n            prevNewDataItem = newDataItem;\n          } else {\n            $array.each(fields, field => {\n              let groupKey = groupFieldValues[field];\n              let value = dataItem.get(field);\n              if (value != null) {\n                let currentValue = newDataItem.get(field);\n                switch (groupKey) {\n                  case \"close\":\n                    newDataItem.setRaw(field, value);\n                    break;\n                  case \"sum\":\n                    newDataItem.setRaw(field, currentValue + value);\n                    break;\n                  case \"open\":\n                    break;\n                  case \"low\":\n                    if (value < currentValue) {\n                      newDataItem.setRaw(field, value);\n                    }\n                    break;\n                  case \"high\":\n                    if (value > currentValue) {\n                      newDataItem.setRaw(field, value);\n                    }\n                    break;\n                  case \"average\":\n                    count[field]++;\n                    sum[field] += value;\n                    let average = sum[field] / count[field];\n                    newDataItem.setRaw(field, average);\n                    break;\n                  case \"extreme\":\n                    if (Math.abs(value) > Math.abs(currentValue)) {\n                      newDataItem.setRaw(field, value);\n                    }\n                    break;\n                }\n                newDataItem.setRaw(workingFields[field], newDataItem.get(field));\n                let dataContext = $object.copy(dataItem.dataContext);\n                dataContext[key] = roundedTime;\n                newDataItem.dataContext = dataContext;\n              }\n            });\n            if (groupOriginals) {\n              newDataItem.get(\"originals\").push(dataItem);\n            }\n          }\n          previousTime = roundedTime;\n        });\n        if (groupCallback && prevNewDataItem) {\n          groupCallback(prevNewDataItem, interval);\n        }\n      });\n      if (series._dataSetId) {\n        series.setDataSet(series._dataSetId);\n      }\n      this.markDirtySize();\n      // solves problem if new series was added\n      if (this._seriesAdded) {\n        this._root.events.once(\"frameended\", () => {\n          this.markDirtySize();\n        });\n      }\n    }\n  }\n  _clearDirty() {\n    super._clearDirty();\n    this._groupingCalculated = false;\n    this._dataGrouped = false;\n  }\n  /**\r\n   * Returns a time interval axis would group data to for a specified duration.\r\n   *\r\n   * @since 5.2.1\r\n   */\n  getGroupInterval(duration) {\n    let baseInterval = this.get(\"baseInterval\");\n    let groupInterval = $time.chooseInterval(0, duration, this.get(\"groupCount\", Infinity), this.get(\"groupIntervals\"));\n    if ($time.getIntervalDuration(groupInterval) < $time.getIntervalDuration(baseInterval)) {\n      groupInterval = Object.assign({}, baseInterval);\n    }\n    return groupInterval;\n  }\n  /**\r\n   * Return `max` of a specified time interval.\r\n   *\r\n   * Will work only if the axis was grouped to this interval at least once.\r\n   *\r\n   * @since 5.2.1\r\n   * @param   interval  Interval\r\n   * @return            Max\r\n   */\n  getIntervalMax(interval) {\n    return this._intervalMax[interval.timeUnit + interval.count];\n  }\n  /**\r\n   * Return `min` of a specified time interval.\r\n   *\r\n   * Will work only if the axis was grouped to this interval at least once.\r\n   *\r\n   * @since 5.2.1\r\n   * @param   interval  Interval\r\n   * @return            Min\r\n   */\n  getIntervalMin(interval) {\n    return this._intervalMin[interval.timeUnit + interval.count];\n  }\n  _handleRangeChange() {\n    super._handleRangeChange();\n    let selectionMin = Math.round(this.getPrivate(\"selectionMin\"));\n    let selectionMax = Math.round(this.getPrivate(\"selectionMax\"));\n    if ($type.isNumber(selectionMin) && $type.isNumber(selectionMax)) {\n      if (this.get(\"endLocation\") == 0) {\n        selectionMax += 1;\n      }\n      if (this.get(\"groupData\") && !this._groupingCalculated) {\n        this._groupingCalculated = true;\n        let groupInterval = this.get(\"groupInterval\");\n        let current = this.getPrivate(\"groupInterval\");\n        let modifiedDifference = selectionMax - selectionMin + (this.get(\"startLocation\", 0) + (1 - this.get(\"endLocation\", 1)) * this.baseDuration());\n        if (current) {\n          let duration = $time.getIntervalDuration(current);\n          modifiedDifference = Math.ceil(modifiedDifference / duration) * duration;\n        }\n        if (!groupInterval) {\n          groupInterval = this.getGroupInterval(modifiedDifference);\n        }\n        if (groupInterval && (!current || current.timeUnit !== groupInterval.timeUnit || current.count !== groupInterval.count || this._seriesDataGrouped)) {\n          this._seriesDataGrouped = false;\n          this.setPrivateRaw(\"groupInterval\", groupInterval);\n          this._setBaseInterval(groupInterval);\n          let newId = groupInterval.timeUnit + groupInterval.count;\n          $array.each(this.series, series => {\n            if (series.get(\"baseAxis\") === this) {\n              series.setDataSet(newId);\n            }\n          });\n          this.markDirtyExtremes();\n          this._root.events.once(\"frameended\", () => {\n            this._root.events.once(\"frameended\", () => {\n              const type = \"groupintervalchanged\";\n              if (this.events.isEnabled(type)) {\n                this.events.dispatch(type, {\n                  type: type,\n                  target: this\n                });\n              }\n            });\n          });\n        }\n      }\n      $array.each(this.series, series => {\n        if (series.get(\"baseAxis\") === this) {\n          let fieldName = this.getPrivate(\"name\") + this.get(\"renderer\").getPrivate(\"letter\");\n          const start = $array.getFirstSortedIndex(series.dataItems, dataItem => {\n            return $order.compare(dataItem.get(fieldName), selectionMin);\n          });\n          let startIndex = start.index;\n          if (startIndex > 0) {\n            startIndex -= 1;\n          }\n          selectionMax += this.baseDuration() * (1 - this.get(\"endLocation\", 1));\n          const end = $array.getSortedIndex(series.dataItems, dataItem => {\n            return $order.compare(dataItem.get(fieldName), selectionMax);\n          });\n          let endIndex = end.index;\n          let endIndex2 = endIndex;\n          if (endIndex2 > 1) {\n            endIndex2--;\n          }\n          const firstDataItem = series.dataItems[startIndex];\n          const lastDataItem = series.dataItems[endIndex2];\n          let lastDate;\n          let firstDate;\n          if (firstDataItem) {\n            firstDate = firstDataItem.get(fieldName);\n          }\n          if (lastDataItem) {\n            lastDate = lastDataItem.get(fieldName);\n          }\n          let outOfSelection = false;\n          if (lastDate != null && firstDate != null) {\n            if (lastDate < selectionMin || firstDate > selectionMax) {\n              outOfSelection = true;\n            }\n          }\n          series.setPrivate(\"outOfSelection\", outOfSelection);\n          series.setPrivate(\"startIndex\", startIndex);\n          series.setPrivate(\"adjustedStartIndex\", series._adjustStartIndex(startIndex));\n          series.setPrivate(\"endIndex\", endIndex);\n          this.root.events.once(\"frameended\", () => {\n            series._markDirtyPrivateKey(\"adjustedStartIndex\");\n          });\n        }\n      });\n    }\n  }\n  _adjustMinMax(min, max, gridCount, _strictMode) {\n    return {\n      min: min,\n      max: max,\n      step: (max - min) / gridCount\n    };\n  }\n  /**\r\n   * @ignore\r\n   */\n  intervalDuration() {\n    return this._intervalDuration;\n  }\n  _saveMinMax(min, max) {\n    let groupInterval = this.getPrivate(\"groupInterval\");\n    if (!groupInterval) {\n      groupInterval = this.get(\"baseInterval\");\n    }\n    let id = groupInterval.timeUnit + groupInterval.count;\n    this._intervalMin[id] = min;\n    this._intervalMax[id] = max;\n  }\n  _getM(timeUnit) {\n    if (timeUnit == \"month\" || timeUnit == \"year\" || timeUnit == \"day\") {\n      return 1.05;\n    }\n    return 1.01;\n  }\n  _getMinorInterval(interval) {\n    var _a;\n    let minorGridInterval;\n    let count = interval.count;\n    let timeUnit = interval.timeUnit;\n    if (count > 1) {\n      if (count == 10) {\n        count = 5;\n      } else if (count == 15) {\n        count = 5;\n      } else if (count == 12) {\n        count = 2;\n      } else if (count == 6) {\n        count = 1;\n      } else if (count == 30) {\n        count = 10;\n      } else if (count < 10) {\n        count = 1;\n      }\n      minorGridInterval = {\n        timeUnit: timeUnit,\n        count: count\n      };\n    }\n    if (timeUnit == \"week\") {\n      if (((_a = this.getPrivate(\"baseInterval\")) === null || _a === void 0 ? void 0 : _a.timeUnit) != \"week\") {\n        minorGridInterval = {\n          timeUnit: \"day\",\n          count: 1\n        };\n      } else {\n        minorGridInterval = {\n          timeUnit: \"week\",\n          count: 1\n        };\n      }\n    }\n    return minorGridInterval;\n  }\n  _prepareAxisItems() {\n    const min = this.getPrivate(\"min\");\n    const max = this.getPrivate(\"max\");\n    if ($type.isNumber(min) && $type.isNumber(max)) {\n      const root = this._root;\n      const selectionMin = Math.round(this.getPrivate(\"selectionMin\"));\n      const selectionMax = Math.round(this.getPrivate(\"selectionMax\"));\n      const renderer = this.get(\"renderer\");\n      const baseInterval = this.getPrivate(\"baseInterval\");\n      let value = selectionMin;\n      let i = 0;\n      const intervals = this.get(\"gridIntervals\");\n      let gridInterval = $time.chooseInterval(0, selectionMax - selectionMin, renderer.gridCount(), intervals);\n      if ($time.getIntervalDuration(gridInterval) < this.baseDuration()) {\n        gridInterval = Object.assign({}, baseInterval);\n      }\n      const intervalDuration = $time.getIntervalDuration(gridInterval);\n      this._intervalDuration = intervalDuration;\n      const nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\n      const utc = root.utc;\n      const timezone = root.timezone;\n      //value = $time.round(new Date(selectionMin - intervalDuration), gridInterval.timeUnit, gridInterval.count, firstDay, utc, new Date(min), timezone).getTime();\n      value = $time.roun(selectionMin - intervalDuration, gridInterval.timeUnit, gridInterval.count, root, min);\n      let previousValue = value - intervalDuration;\n      let format;\n      const formats = this.get(\"dateFormats\");\n      this.setPrivateRaw(\"gridInterval\", gridInterval);\n      const minorLabelsEnabled = renderer.get(\"minorLabelsEnabled\");\n      const minorGridEnabled = renderer.get(\"minorGridEnabled\", minorLabelsEnabled);\n      let minorGridInterval;\n      let minorDuration = 0;\n      if (minorGridEnabled) {\n        minorGridInterval = this._getMinorInterval(gridInterval);\n        minorDuration = $time.getIntervalDuration(minorGridInterval);\n      }\n      let m = 0;\n      while (value < selectionMax + intervalDuration) {\n        let dataItem;\n        if (this.dataItems.length < i + 1) {\n          dataItem = new DataItem(this, undefined, {});\n          this._dataItems.push(dataItem);\n          this.processDataItem(dataItem);\n        } else {\n          dataItem = this.dataItems[i];\n        }\n        this._createAssets(dataItem, []);\n        this._toggleDataItem(dataItem, true);\n        dataItem.setRaw(\"value\", value);\n        dataItem.setRaw(\"labelEndValue\", undefined);\n        let endValue = value + $time.getDuration(gridInterval.timeUnit, gridInterval.count * this._getM(gridInterval.timeUnit));\n        //endValue = $time.round(new Date(endValue), gridInterval.timeUnit, 1, firstDay, utc, undefined, timezone).getTime();\n        endValue = $time.roun(endValue, gridInterval.timeUnit, 1, root);\n        dataItem.setRaw(\"endValue\", endValue);\n        let date = new Date(value);\n        format = formats[gridInterval.timeUnit];\n        if (nextGridUnit && this.get(\"markUnitChange\") && $type.isNumber(previousValue)) {\n          if (gridInterval.timeUnit != \"year\") {\n            if ($time.checkChange(value, previousValue, nextGridUnit, utc, timezone)) {\n              format = this.get(\"periodChangeDateFormats\")[gridInterval.timeUnit];\n            }\n          }\n        }\n        const label = dataItem.get(\"label\");\n        if (label) {\n          label.set(\"text\", root.dateFormatter.format(date, format));\n        }\n        let count = gridInterval.count;\n        // so that labels of week would always be at the beginning of the grid\n        if (gridInterval.timeUnit == \"week\") {\n          dataItem.setRaw(\"labelEndValue\", value);\n        }\n        if (minorGridEnabled) {\n          count = 1;\n          let timeUnit = gridInterval.timeUnit;\n          if (timeUnit == \"week\") {\n            timeUnit = \"day\";\n          }\n          let labelEndValue = value + $time.getDuration(timeUnit, this._getM(timeUnit));\n          //labelEndValue = $time.round(new Date(labelEndValue), timeUnit, 1, firstDay, utc, undefined, timezone).getTime();\n          labelEndValue = $time.roun(labelEndValue, timeUnit, 1, root);\n          dataItem.setRaw(\"labelEndValue\", labelEndValue);\n        }\n        this._prepareDataItem(dataItem, count);\n        previousValue = value;\n        value = endValue;\n        // min grid\n        if (minorGridInterval) {\n          const minorTimeUnit = minorGridInterval.timeUnit;\n          const minorCount = minorGridInterval.count;\n          const mmm = this._getM(minorTimeUnit);\n          //let minorValue = $time.round(new Date(previousValue + minorDuration * this._getM(minorGridInterval.timeUnit)), minorGridInterval.timeUnit, minorGridInterval.count, firstDay, utc, new Date(previousValue), timezone).getTime();\n          let minorValue = $time.roun(previousValue + minorDuration * mmm, minorTimeUnit, minorCount, root, previousValue);\n          let previousMinorValue;\n          let minorFormats = this.get(\"minorDateFormats\", this.get(\"dateFormats\"));\n          while (minorValue < value - 0.01 * minorDuration) {\n            let minorDataItem;\n            if (this.minorDataItems.length < m + 1) {\n              minorDataItem = new DataItem(this, undefined, {});\n              this.minorDataItems.push(minorDataItem);\n              this.processDataItem(minorDataItem);\n            } else {\n              minorDataItem = this.minorDataItems[m];\n            }\n            this._createAssets(minorDataItem, [\"minor\"], true);\n            this._toggleDataItem(minorDataItem, true);\n            minorDataItem.setRaw(\"value\", minorValue);\n            let minorEndValue = minorValue + $time.getDuration(minorTimeUnit, minorCount * mmm);\n            //minorEndValue = $time.round(new Date(minorEndValue), minorGridInterval.timeUnit, 1, firstDay, utc, undefined, timezone).getTime();\n            minorEndValue = $time.roun(minorEndValue, minorTimeUnit, 1, root);\n            minorDataItem.setRaw(\"endValue\", minorEndValue);\n            let date = new Date(minorValue);\n            format = minorFormats[minorTimeUnit];\n            const minorLabel = minorDataItem.get(\"label\");\n            if (minorLabel) {\n              if (minorLabelsEnabled) {\n                minorLabel.set(\"text\", root.dateFormatter.format(date, format));\n              } else {\n                minorLabel.setPrivate(\"visible\", false);\n              }\n            }\n            this._prepareDataItem(minorDataItem, 1);\n            if (minorValue == previousMinorValue) {\n              break;\n            }\n            previousMinorValue = minorValue;\n            minorValue = minorEndValue;\n            m++;\n          }\n        }\n        if (value == previousValue) {\n          break;\n        }\n        i++;\n      }\n      for (let j = i; j < this.dataItems.length; j++) {\n        this._toggleDataItem(this.dataItems[j], false);\n      }\n      for (let j = m; j < this.minorDataItems.length; j++) {\n        this._toggleDataItem(this.minorDataItems[j], false);\n      }\n      $array.each(this.series, series => {\n        if (series.inited) {\n          series._markDirtyAxes();\n        }\n      });\n    }\n    this._updateGhost();\n  }\n  _updateFinals(start, end) {\n    this.setPrivateRaw(\"selectionMinFinal\", this.positionToValue(start));\n    this.setPrivateRaw(\"selectionMaxFinal\", this.positionToValue(end));\n  }\n  _getDelta() {\n    this._deltaMinMax = this.baseDuration() / 2;\n  }\n  _fixMin(min) {\n    const baseInterval = this.getPrivate(\"baseInterval\");\n    const timeUnit = baseInterval.timeUnit;\n    //let startTime = $time.round(new Date(min), timeUnit, baseInterval.count, firstDay, utc, undefined, timezone).getTime();\n    let startTime = $time.roun(min, timeUnit, baseInterval.count, this._root);\n    let endTime = startTime + $time.getDuration(timeUnit, baseInterval.count * this._getM(timeUnit));\n    //endTime = $time.round(new Date(endTime), timeUnit, 1, firstDay, utc, undefined, timezone).getTime();\n    endTime = $time.roun(endTime, timeUnit, 1, this._root);\n    return startTime + (endTime - startTime) * this.get(\"startLocation\", 0);\n  }\n  _fixMax(max) {\n    const baseInterval = this.getPrivate(\"baseInterval\");\n    const timeUnit = baseInterval.timeUnit;\n    //let startTime = $time.round(new Date(max), timeUnit, baseInterval.count, firstDay, utc, undefined, timezone).getTime();\n    let startTime = $time.roun(max, timeUnit, baseInterval.count, this._root);\n    let endTime = startTime + $time.getDuration(timeUnit, baseInterval.count * this._getM(timeUnit));\n    //endTime = $time.round(new Date(endTime), timeUnit, 1, firstDay, utc, undefined, timezone).getTime();\n    endTime = $time.roun(endTime, timeUnit, 1, this._root);\n    return startTime + (endTime - startTime) * this.get(\"endLocation\", 1);\n  }\n  _updateDates(_date, _series) {}\n  _handleSeriesRemoved() {\n    this.setPrivate(\"baseInterval\", this.get(\"baseInterval\"));\n    this.setPrivate(\"min\", undefined);\n    this.setPrivate(\"minFinal\", undefined);\n  }\n  /**\r\n   * Returns a duration of currently active `baseInterval` in milliseconds.\r\n   *\r\n   * @return Duration\r\n   */\n  baseDuration() {\n    return this._baseDuration;\n    //return $time.getIntervalDuration(this.getPrivate(\"baseInterval\"));\n  }\n  /**\r\n   * Returns a duration of user-defined `baseInterval` in milliseconds.\r\n   *\r\n   * @return Duration\r\n   */\n  baseMainDuration() {\n    return $time.getIntervalDuration(this.get(\"baseInterval\"));\n  }\n  /**\r\n   * @ignore\r\n   */\n  processSeriesDataItem(dataItem, fields) {\n    const baseInterval = this.getPrivate(\"baseInterval\");\n    if (!dataItem.open) {\n      dataItem.open = {};\n    }\n    if (!dataItem.close) {\n      dataItem.close = {};\n    }\n    $array.each(fields, field => {\n      let value = dataItem.get(field);\n      if ($type.isNumber(value)) {\n        let startTime = dataItem.open[field];\n        let endTime = dataItem.close[field];\n        // this is done to save cpu, as rounding is quite expensive, especially with timezone set. \n        // if value is between prev start and end, it means it didn't change, all is fine.\n        if (value >= startTime && value <= endTime) {} else {\n          const timeUnit = baseInterval.timeUnit;\n          const count = baseInterval.count;\n          //startTime = $time.round(new Date(value), timeUnit, count, firstDay, utc, undefined, timezone).getTime();\n          startTime = $time.roun(value, timeUnit, count, this._root);\n          endTime = startTime + $time.getDuration(timeUnit, count * this._getM(timeUnit));\n          //endTime = $time.round(new Date(endTime), timeUnit, 1, firstDay, utc, undefined, timezone).getTime();\n          endTime = $time.roun(endTime, timeUnit, 1, this._root);\n          dataItem.open[field] = startTime;\n          dataItem.close[field] = endTime;\n        }\n        this._updateDates(startTime, dataItem.component);\n      }\n    });\n  }\n  _handleSizeDirty() {\n    // void \n  }\n  /**\r\n   * @ignore\r\n   */\n  getDataItemPositionX(dataItem, field, cellLocation, axisLocation, exactLocation) {\n    let openValue;\n    let closeValue;\n    let value;\n    if (exactLocation) {\n      value = dataItem.get(field);\n    } else {\n      if (dataItem.open && dataItem.close) {\n        openValue = dataItem.open[field];\n        closeValue = dataItem.close[field];\n      } else {\n        openValue = dataItem.get(field);\n        closeValue = openValue;\n      }\n      value = openValue + (closeValue - openValue) * cellLocation;\n      value = this._baseValue + (value - this._baseValue) * axisLocation;\n    }\n    return this.valueToPosition(value);\n  }\n  /**\r\n   * @ignore\r\n   */\n  getDataItemCoordinateX(dataItem, field, cellLocation, axisLocation) {\n    return this._settings.renderer.positionToCoordinate(this.getDataItemPositionX(dataItem, field, cellLocation, axisLocation));\n  }\n  /**\r\n   * @ignore\r\n   */\n  getDataItemPositionY(dataItem, field, cellLocation, axisLocation, exactLocation) {\n    let openValue;\n    let closeValue;\n    let value;\n    if (exactLocation) {\n      value = dataItem.get(field);\n    } else {\n      if (dataItem.open && dataItem.close) {\n        openValue = dataItem.open[field];\n        closeValue = dataItem.close[field];\n      } else {\n        openValue = dataItem.get(field);\n        closeValue = openValue;\n      }\n      value = openValue + (closeValue - openValue) * cellLocation;\n      value = this._baseValue + (value - this._baseValue) * axisLocation;\n    }\n    return this.valueToPosition(value);\n  }\n  /**\r\n   * @ignore\r\n   */\n  getDataItemCoordinateY(dataItem, field, cellLocation, axisLocation) {\n    return this._settings.renderer.positionToCoordinate(this.getDataItemPositionY(dataItem, field, cellLocation, axisLocation));\n  }\n  /**\r\n   * @ignore\r\n   */\n  roundAxisPosition(position, location) {\n    let value = this.positionToValue(position);\n    value = value - (location - 0.5) * this.baseDuration();\n    let baseInterval = this.getPrivate(\"baseInterval\");\n    if (!$type.isNaN(value)) {\n      const firstDay = this._root.locale.firstDayOfWeek;\n      const timeUnit = baseInterval.timeUnit;\n      const utc = this._root.utc;\n      const timezone = this._root.timezone;\n      const count = baseInterval.count;\n      //value = $time.round(new Date(value), timeUnit, count, firstDay, utc, new Date(this.getPrivate(\"min\", 0)), timezone).getTime();\n      value = $time.roun(value, timeUnit, count, this._root, this.getPrivate(\"min\", 0));\n      let duration = $time.getDateIntervalDuration(baseInterval, new Date(value), firstDay, utc, timezone);\n      if (timezone) {\n        //value = $time.round(new Date(value + this.baseDuration() * 0.05), timeUnit, count, firstDay, utc, new Date(this.getPrivate(\"min\", 0)), timezone).getTime();\n        value = $time.roun(value + this.baseDuration() * 0.05, timeUnit, count, this._root, this.getPrivate(\"min\", 0));\n        duration = $time.getDateIntervalDuration(baseInterval, new Date(value + duration * location), firstDay, utc, timezone);\n      }\n      return this.valueToPosition(value + duration * location);\n    }\n    return NaN;\n  }\n  /**\r\n   * Returns text to be used in an axis tooltip for specific relative position.\r\n   *\r\n   * NOTE: Unless `adjustPosition` (2nd parameter) is set to `false`, the method\r\n   * will adjust position by `tooltipIntervalOffset`.\r\n   *\r\n   * @param  position        Position\r\n   * @param  adjustPosition  Adjust position\r\n   * @return                 Tooltip text\r\n   */\n  getTooltipText(position, adjustPosition) {\n    //@todo number formatter + tag\n    if (this.getPrivate(\"min\") != null) {\n      let format = this.get(\"tooltipDateFormats\")[this.getPrivate(\"baseInterval\").timeUnit];\n      let value = this.positionToValue(position);\n      if ($type.isNumber(value)) {\n        let date = new Date(value);\n        let baseInterval = this.getPrivate(\"baseInterval\");\n        let duration = $time.getDateIntervalDuration(baseInterval, date, this._root.locale.firstDayOfWeek, this._root.utc, this._root.timezone);\n        if (adjustPosition !== false) {\n          date = new Date(value + this.get(\"tooltipIntervalOffset\", -this.get(\"tooltipLocation\", 0.5)) * duration);\n        }\n        return this._root.dateFormatter.format(date, this.get(\"tooltipDateFormat\", format));\n      }\n    }\n    return \"\";\n  }\n  /**\r\n   * Returns a data item from series that is closest to the `position`.\r\n   *\r\n   * @param   series    Series\r\n   * @param   position  Relative position\r\n   * @return            Data item\r\n   */\n  getSeriesItem(series, position, location, snap) {\n    let fieldName = this.getPrivate(\"name\") + this.get(\"renderer\").getPrivate(\"letter\");\n    let value = this.positionToValue(position);\n    if (location == null) {\n      location = 0.5;\n    }\n    value = value - (location - 0.5) * this.baseDuration();\n    const result = $array.getSortedIndex(series.dataItems, dataItem => {\n      let diValue = 0;\n      if (dataItem.open) {\n        diValue = dataItem.open[fieldName];\n      }\n      return $order.compare(diValue, value);\n    });\n    if (snap || series.get(\"snapTooltip\")) {\n      let first = series.dataItems[result.index - 1];\n      let second = series.dataItems[result.index];\n      if (first && second) {\n        if (first.open && second.close) {\n          let open = first.open[fieldName];\n          let close = second.close[fieldName];\n          if (Math.abs(value - open) > Math.abs(value - close)) {\n            return second;\n          }\n        }\n      }\n      if (first) {\n        return first;\n      }\n      if (second) {\n        return second;\n      }\n    } else {\n      const dataItem = series.dataItems[result.index - 1];\n      if (dataItem) {\n        if (dataItem.open && dataItem.close) {\n          let open = dataItem.open[fieldName];\n          let close = dataItem.close[fieldName];\n          if (value >= open && value <= close) {\n            return dataItem;\n          }\n        }\n      }\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  shouldGap(dataItem, nextItem, autoGapCount, fieldName) {\n    const value1 = dataItem.get(fieldName);\n    const value2 = nextItem.get(fieldName);\n    if (value2 - value1 > this.baseDuration() * autoGapCount) {\n      return true;\n    }\n    return false;\n  }\n  /**\r\n   * Zooms the axis to specific `start` and `end` dates.\r\n   *\r\n   * Optional `duration` specifies duration of zoom animation in milliseconds.\r\n   *\r\n   * @param  start     Start Date\r\n   * @param  end       End Date\r\n   * @param  duration  Duration in milliseconds\r\n   */\n  zoomToDates(start, end, duration) {\n    this.zoomToValues(start.getTime(), end.getTime(), duration);\n  }\n  /**\r\n   * Zooms the axis to specific `start` and `end` values.\r\n   *\r\n   * Optional `duration` specifies duration of zoom animation in milliseconds.\r\n   *\r\n   * @param  start     Start value\r\n   * @param  end       End value\r\n   * @param  duration  Duration in milliseconds\r\n   */\n  zoomToValues(start, end, duration) {\n    const min = this.getPrivate(\"minFinal\", 0);\n    const max = this.getPrivate(\"maxFinal\", 0);\n    if (this.getPrivate(\"min\") != null && this.getPrivate(\"max\") != null) {\n      if (this.get(\"groupData\")) {\n        const futureGroupInterval = this.getGroupInterval(end - start);\n        const baseInterval = this.get(\"baseInterval\");\n        let baseMin = this.getIntervalMin(baseInterval);\n        let baseMax = this.getIntervalMax(baseInterval) - 1;\n        baseMax = $time.roun(baseMax, futureGroupInterval.timeUnit, futureGroupInterval.count, this.root);\n        baseMax += this._getM(futureGroupInterval.timeUnit) * $time.getIntervalDuration(futureGroupInterval);\n        baseMax = $time.roun(baseMax, futureGroupInterval.timeUnit, futureGroupInterval.count, this.root);\n        let futureMin = $time.roun(baseMin, futureGroupInterval.timeUnit, futureGroupInterval.count, this.root);\n        let futureMax = $time.roun(baseMax, futureGroupInterval.timeUnit, futureGroupInterval.count, this.root);\n        let s = (start - futureMin) / (futureMax - futureMin);\n        let e = (end - futureMin) / (futureMax - futureMin);\n        this.zoom(s, e, duration);\n      } else {\n        this.zoom((start - min) / (max - min), (end - min) / (max - min), duration);\n      }\n    }\n  }\n  /**\r\n   * Returns a `Date` object corresponding to specific position within plot\r\n   * area.\r\n   *\r\n   * @param   position  Pposition\r\n   * @return            Date\r\n   */\n  positionToDate(position) {\n    return new Date(this.positionToValue(position));\n  }\n  /**\r\n   * Returns a relative position within plot area that corresponds to specific\r\n   * date.\r\n   *\r\n   * @param   date  Date\r\n   * @return        Position\r\n   */\n  dateToPosition(date) {\n    return this.valueToPosition(date.getTime());\n  }\n  /**\r\n   * Returns relative position between two grid lines of the axis.\r\n   *\r\n   * @since 5.2.30\r\n   * @return Position\r\n   */\n  getCellWidthPosition() {\n    let max = this.getPrivate(\"selectionMax\", this.getPrivate(\"max\"));\n    let min = this.getPrivate(\"selectionMin\", this.getPrivate(\"min\"));\n    if ($type.isNumber(max) && $type.isNumber(min)) {\n      return this._intervalDuration / (max - min);\n    }\n    return 0.05;\n  }\n  nextPosition(count) {\n    if (count == null) {\n      count = 1;\n    }\n    let dtime = this.get(\"tooltipLocation\", 0.5) * this.baseDuration();\n    if (this.get(\"renderer\").getPrivate(\"letter\") == \"Y\") {\n      count *= -1;\n    }\n    let tooltipValue = this.positionToValue(this.getPrivate(\"tooltipPosition\", 0));\n    const baseInterval = this.getPrivate(\"baseInterval\");\n    let time = this._nextTime(tooltipValue, count, baseInterval);\n    let selectionMin = this.getPrivate(\"selectionMin\", 0);\n    let selectionMax = this.getPrivate(\"selectionMax\", 0);\n    let min = $time.roun(selectionMin, baseInterval.timeUnit, baseInterval.count, this._root);\n    let max = $time.roun(selectionMax, baseInterval.timeUnit, baseInterval.count, this._root);\n    time += dtime;\n    time = $math.fitToRange(time, min + dtime, max - dtime);\n    return this.toGlobalPosition(this.valueToPosition(time));\n  }\n  _nextTime(time, count, baseInterval) {\n    return $time.roun(time + count * this.baseDuration(), baseInterval.timeUnit, baseInterval.count, this._root);\n  }\n}\nObject.defineProperty(DateAxis, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"DateAxis\"\n});\nObject.defineProperty(DateAxis, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: ValueAxis.classNames.concat([DateAxis.className])\n});\n", "import { DateAxis } from \"./DateAxis\";\nimport { DataItem } from \"../../../core/render/Component\";\nimport * as $array from \"../../../core/util/Array\";\nimport * as $order from \"../../../core/util/Order\";\nimport * as $time from \"../../../core/util/Time\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $math from \"../../../core/util/Math\";\n/**\r\n * A version of a [[DateAxis]] which removes intervals that don't have any data\r\n * items in them.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/gapless-date-axis/} for more info\r\n * @important\r\n */\nexport class GaplessDateAxis extends DateAxis {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"_frequency\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(this, \"_m\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_dates\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, \"_customDates\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n  }\n  _afterNew() {\n    this.valueFields.push(\"date\");\n    super._afterNew();\n  }\n  _getDates() {\n    if (this._customDates) {\n      return this._customDates;\n    }\n    return this._dates;\n  }\n  _updateDates(date, series) {\n    if (!series.get(\"ignoreMinMax\")) {\n      const dates = this._getDates();\n      const result = $array.getSortedIndex(dates, x => $order.compare(x, date));\n      if (!result.found) {\n        $array.insertIndex(dates, result.index, date);\n      }\n    }\n  }\n  _updateAllDates() {\n    if (!this._customDates) {\n      const dates = this._dates;\n      dates.length = 0;\n      $array.each(this.series, series => {\n        let field = \"valueX\";\n        if (series.get(\"yAxis\") == this) {\n          field = \"valueY\";\n        }\n        $array.each(series.dataItems, dataItem => {\n          let value = dataItem.get(field);\n          if ($type.isNumber(value)) {\n            if (dataItem.open) {\n              this._updateDates(dataItem.open[field], series);\n            }\n          }\n        });\n      });\n      const extraMax = this.get(\"extraMax\", 0);\n      const extraMin = this.get(\"extraMin\", 0);\n      let len = dates.length;\n      const baseInterval = this.getPrivate(\"baseInterval\");\n      const baseCount = baseInterval.count;\n      const timeUnit = baseInterval.timeUnit;\n      if (extraMax > 0) {\n        const extra = len * extraMax;\n        let time = dates[len - 1];\n        if ($type.isNumber(time)) {\n          for (let i = len - 1; i < len + extra; i++) {\n            time += $time.getDuration(timeUnit, baseCount * this._getM(timeUnit));\n            //time = $time.round(new Date(time), timeUnit, baseInterval.count, firstDay, utc, undefined, timezone).getTime();\n            time = $time.roun(time, timeUnit, baseCount, this._root);\n            dates.push(time);\n          }\n        }\n      }\n      if (extraMin > 0) {\n        const extra = len * extraMin;\n        let time = dates[0];\n        if ($type.isNumber(time)) {\n          for (let i = 0; i < extra; i++) {\n            time -= $time.getDuration(timeUnit, baseCount);\n            //time = $time.round(new Date(time), timeUnit, baseCount, firstDay, utc, undefined, timezone).getTime();\n            time = $time.roun(time, timeUnit, baseCount, this._root);\n            dates.unshift(time);\n          }\n        }\n      }\n    }\n  }\n  /**\r\n   * Convers value to a relative position on axis.\r\n   *\r\n   * @param   value  Value\r\n   * @return         Relative position\r\n   */\n  valueToPosition(value) {\n    const dates = this._getDates();\n    const startLocation = this.get(\"startLocation\", 0);\n    const endLocation = this.get(\"endLocation\", 1);\n    const len = dates.length - startLocation - (1 - endLocation);\n    const result = $array.getSortedIndex(dates, x => $order.compare(x, value));\n    let index = result.index;\n    if (result.found) {\n      return (index - startLocation) / len;\n    } else {\n      if (index > 0) {\n        index -= 1;\n      }\n      let itemValue = dates[index];\n      const nextDate = dates[index + 1];\n      if (nextDate) {\n        let nextItemValue = nextDate;\n        // use next item value if it's closer\n        if (Math.abs(nextItemValue - value) < Math.abs(itemValue - value)) {\n          itemValue = nextItemValue;\n          index++;\n        }\n      }\n      /*\r\n      let d = 0;\r\n      if (itemValue > value && value > this.getPrivate(\"min\", 0)) {\r\n          d = itemValue - value;\r\n      }\r\n      else {\r\n          d = value - itemValue;\r\n      }\r\n      */\n      let d = value - itemValue;\n      return (index - startLocation) / len + d / this.baseDuration() / len;\n    }\n  }\n  /**\r\n   * Converts numeric value from axis scale to index.\r\n   *\r\n   * @param  value  Value\r\n   * @return        Index\r\n   */\n  valueToIndex(value) {\n    const dates = this._getDates();\n    const result = $array.getSortedIndex(dates, x => $order.compare(x, value));\n    let index = result.index;\n    if (result.found) {\n      return index;\n    } else {\n      if (index > 0) {\n        index -= 1;\n      }\n      return index;\n    }\n  }\n  /**\r\n   * Converts a relative position to a corresponding numeric value from axis\r\n   * scale.\r\n   *\r\n   * @param   position  Relative position\r\n   * @return            Value\r\n   */\n  positionToValue(position) {\n    const startLocation = this.get(\"startLocation\", 0);\n    const endLocation = this.get(\"endLocation\", 1);\n    const dates = this._getDates();\n    let len = Math.round(dates.length - startLocation - (1 - endLocation));\n    let index = position * len;\n    let findex = Math.floor(index);\n    if (findex < 0) {\n      findex = 0;\n    }\n    if (findex > len - 1) {\n      findex = len - 1;\n    }\n    return dates[findex] + (index - findex + startLocation) * this.baseDuration();\n  }\n  _fixZoomFactor() {\n    this.setPrivateRaw(\"maxZoomFactor\", this._getDates().length - this.get(\"startLocation\", 0) - (1 - this.get(\"endLocation\", 1)));\n  }\n  /**\r\n   * Zooms the axis to specific `start` and `end` dates.\r\n   *\r\n   * Optional `duration` specifies duration of zoom animation in milliseconds.\r\n   *\r\n   * @param  start     Start Date\r\n   * @param  end       End Date\r\n   * @param  duration  Duration in milliseconds\r\n   */\n  zoomToDates(start, end, duration) {\n    const dates = this._getDates();\n    const len = dates.length;\n    let result = $array.getSortedIndex(dates, x => $order.compare(x, start.getTime()));\n    let startValue = dates[Math.min(result.index, len - 1)];\n    result = $array.getSortedIndex(dates, x => $order.compare(x, end.getTime()));\n    let endValue = dates[result.index];\n    if (result.index >= len) {\n      endValue = dates[len - 1] + this.baseDuration();\n    }\n    this.zoomToValues(startValue, endValue, duration);\n  }\n  /**\r\n   * Zooms the axis to specific `start` and `end` values.\r\n   *\r\n   * Optional `duration` specifies duration of zoom animation in milliseconds.\r\n   *\r\n   * @param  start     Start value\r\n   * @param  end       End value\r\n   * @param  duration  Duration in milliseconds\r\n   */\n  zoomToValues(start, end, duration) {\n    const min = this.getPrivate(\"min\", 0);\n    const max = this.getPrivate(\"max\", 0);\n    start = $math.fitToRange(start, min, max);\n    end = $math.fitToRange(end, min, max);\n    this.zoom(this.valueToPosition(start), this.valueToPosition(end), duration);\n  }\n  _prepareAxisItems() {\n    let startTime = this.getPrivate(\"selectionMin\", 0);\n    let endTime = this.getPrivate(\"selectionMax\", 0);\n    if ($type.isNumber(startTime) && $type.isNumber(endTime)) {\n      if (this._seriesValuesDirty) {\n        this._seriesValuesDirty = false;\n        this._updateAllDates();\n      }\n      const root = this._root;\n      const utc = root.utc;\n      const timezone = root.timezone;\n      const dates = this._getDates();\n      const renderer = this.get(\"renderer\");\n      const len = dates.length;\n      const baseDuration = this.baseDuration();\n      let startIndex = this.valueToIndex(startTime);\n      if (startIndex > 0) {\n        startIndex--;\n      }\n      let endIndex = this.valueToIndex(endTime);\n      if (endIndex < len - 1) {\n        endIndex++;\n      }\n      let maxCount = renderer.axisLength() / Math.max(renderer.get(\"minGridDistance\"), 1 / Number.MAX_SAFE_INTEGER);\n      let frequency = Math.min(len, Math.ceil((endIndex - startIndex) / maxCount));\n      frequency = Math.max(1, frequency);\n      startIndex = Math.floor(startIndex / frequency) * frequency;\n      this._frequency = frequency;\n      $array.each(this.dataItems, dataItem => {\n        this._toggleDataItem(dataItem, false);\n      });\n      $array.each(this.minorDataItems, dataItem => {\n        this._toggleDataItem(dataItem, false);\n      });\n      let realDuration = endTime - startTime - ((endTime - startTime) / baseDuration - (endIndex - startIndex)) * baseDuration;\n      // if all items are on axis\n      let gridInterval = $time.chooseInterval(0, realDuration, maxCount, this.get(\"gridIntervals\"));\n      const baseInterval = this.getPrivate(\"baseInterval\");\n      let intervalDuration = $time.getIntervalDuration(gridInterval);\n      if (intervalDuration < baseDuration) {\n        gridInterval = Object.assign({}, baseInterval);\n        intervalDuration = $time.getIntervalDuration(gridInterval);\n      }\n      this._intervalDuration = intervalDuration;\n      const timeUnit = gridInterval.timeUnit;\n      const formats = this.get(\"dateFormats\");\n      let firstTime = Date.now();\n      if (dates[0]) {\n        firstTime = dates[0];\n      }\n      //let value = $time.round(new Date(this.getPrivate(\"selectionMin\", 0)), timeUnit, gridInterval.count, firstDay, utc, firstDate, timezone).getTime();\n      let value = $time.roun(this.getPrivate(\"selectionMin\", 0), timeUnit, gridInterval.count, root, firstTime);\n      const minorLabelsEnabled = renderer.get(\"minorLabelsEnabled\");\n      const minorGridEnabled = renderer.get(\"minorGridEnabled\", minorLabelsEnabled);\n      let minorGridInterval;\n      let minorDuration = 0;\n      let previousDataItem;\n      if (minorGridEnabled) {\n        minorGridInterval = this._getMinorInterval(gridInterval);\n        minorDuration = $time.getIntervalDuration(minorGridInterval);\n      }\n      let selectedItems = this._getIndexes(value, this.getPrivate(\"selectionMax\", value) + intervalDuration, gridInterval, this.getPrivate(\"min\", value));\n      if (selectedItems.length > 0) {\n        let i = 0;\n        this._m = 0;\n        let previousValue = value - intervalDuration * 10;\n        const nextGridUnit = $time.getNextUnit(timeUnit);\n        // MINOR GRID\n        if (minorGridInterval) {\n          let first = dates[selectedItems[0]];\n          this._addMinorGrid(first - intervalDuration, first, minorDuration, minorGridInterval);\n        }\n        let minDistance = renderer.axisLength() / renderer.gridCount() * 0.5;\n        $array.each(selectedItems, index => {\n          var _a;\n          let dataItem;\n          if (this.dataItems.length < i + 1) {\n            dataItem = new DataItem(this, undefined, {});\n            this._dataItems.push(dataItem);\n            this.processDataItem(dataItem);\n          } else {\n            dataItem = this.dataItems[i];\n          }\n          let value = dates[index];\n          let date = new Date(value);\n          let endValue = value;\n          if (i < selectedItems.length - 1) {\n            endValue = dates[selectedItems[i + 1]];\n          } else {\n            endValue += intervalDuration;\n          }\n          dataItem.setRaw(\"value\", value);\n          dataItem.setRaw(\"endValue\", endValue);\n          dataItem.setRaw(\"index\", i);\n          dataItem.setRaw(\"labelEndValue\", undefined);\n          let format = formats[timeUnit];\n          if (nextGridUnit && this.get(\"markUnitChange\") && $type.isNumber(previousValue)) {\n            if (timeUnit != \"year\") {\n              if ($time.checkChange(value, previousValue, nextGridUnit, utc, timezone)) {\n                format = this.get(\"periodChangeDateFormats\")[timeUnit];\n              }\n            }\n          }\n          this._createAssets(dataItem, []);\n          const label = dataItem.get(\"label\");\n          if (label) {\n            label.set(\"text\", root.dateFormatter.format(date, format));\n          }\n          this._toggleDataItem(dataItem, true);\n          let count = gridInterval.count;\n          // so that labels of week would always be at the beginning of the grid\n          if (timeUnit == \"week\") {\n            dataItem.setRaw(\"labelEndValue\", value);\n          }\n          if (minorGridEnabled) {\n            let timeUnit2 = gridInterval.timeUnit;\n            if (timeUnit2 == \"week\") {\n              timeUnit2 = \"day\";\n            }\n            if (count > 1 || gridInterval.timeUnit == \"week\") {\n              //let labelEndValue = $time.round(new Date(value), timeUnit2, 1, firstDay, utc, undefined, timezone).getTime() + $time.getDuration(timeUnit2, this._getM(timeUnit2));\n              let labelEndValue = $time.roun(value, timeUnit2, 1, root) + $time.getDuration(timeUnit2, this._getM(timeUnit2));\n              let index = this.valueToIndex(labelEndValue);\n              labelEndValue = dates[index];\n              if (labelEndValue == value) {\n                let next = dates[index + 1];\n                if (next) {\n                  labelEndValue = next;\n                } else {\n                  labelEndValue += minorDuration;\n                }\n              }\n              dataItem.setRaw(\"labelEndValue\", labelEndValue);\n            }\n            count = 1;\n          }\n          this._prepareDataItem(dataItem, count);\n          if (label && previousDataItem) {\n            if (renderer.getPrivate(\"letter\") == \"X\") {\n              let previousLabel = previousDataItem.get(\"label\");\n              if (previousLabel) {\n                let x = label.x();\n                let previousX = previousLabel.x();\n                if (x - previousX < minDistance) {\n                  let worse = this._pickWorse(previousDataItem, dataItem, gridInterval);\n                  if (worse) {\n                    (_a = worse.get(\"label\")) === null || _a === void 0 ? void 0 : _a.setPrivate(\"visible\", false);\n                  }\n                }\n              }\n            }\n            // todo y?\n          }\n          // MINOR GRID\n          if (minorGridInterval) {\n            this._addMinorGrid(value, endValue, minorDuration, minorGridInterval);\n          }\n          i++;\n          if (label && label.getPrivate(\"visible\")) {\n            previousDataItem = dataItem;\n          }\n          previousValue = value;\n        });\n      }\n      $array.each(this.series, series => {\n        if (series.inited) {\n          series._markDirtyAxes();\n        }\n      });\n    }\n    this._updateGhost();\n  }\n  _pickWorse(dataItemA, dataItemB, interval) {\n    const timeUnit = interval.timeUnit;\n    const valueA = dataItemA.get(\"value\", 0);\n    const valueB = dataItemB.get(\"value\", 0);\n    if (timeUnit == \"hour\") {\n      if (new Date(valueA).getDate() != new Date(valueB).getDate()) {\n        return dataItemA;\n      }\n    }\n    return dataItemB;\n  }\n  _addMinorGrid(startValue, endValue, minorDuration, gridInterval) {\n    const minorFormats = this.get(\"minorDateFormats\", this.get(\"dateFormats\"));\n    const mTimeUnit = gridInterval.timeUnit;\n    let value = startValue + $time.getDuration(mTimeUnit, this._getM(mTimeUnit));\n    //value = $time.round(new Date(value), mTimeUnit, 1, firstDay, utc, undefined, timezone).getTime();\n    value = $time.roun(value, mTimeUnit, 1, this._root);\n    let maxValue = endValue - minorDuration * 0.5;\n    let minorSelectedItems = this._getIndexes(value, maxValue, gridInterval, value);\n    const dates = this._getDates();\n    $array.each(minorSelectedItems, index => {\n      let minorDataItem;\n      if (this.minorDataItems.length < this._m + 1) {\n        minorDataItem = new DataItem(this, undefined, {});\n        this.minorDataItems.push(minorDataItem);\n        this.processDataItem(minorDataItem);\n      } else {\n        minorDataItem = this.minorDataItems[this._m];\n      }\n      value = dates[index];\n      minorDataItem.setRaw(\"value\", value);\n      minorDataItem.setRaw(\"endValue\", value + minorDuration);\n      minorDataItem.setRaw(\"index\", index);\n      this._createAssets(minorDataItem, [\"minor\"], true);\n      const label = minorDataItem.get(\"label\");\n      if (label) {\n        if (this.get(\"renderer\").get(\"minorLabelsEnabled\")) {\n          let date = new Date(value);\n          let format = minorFormats[mTimeUnit];\n          label.set(\"text\", this._root.dateFormatter.format(date, format));\n        } else {\n          label.setPrivate(\"visible\", false);\n        }\n      }\n      this._toggleDataItem(minorDataItem, true);\n      this._prepareDataItem(minorDataItem, 1);\n      this._m++;\n    });\n  }\n  _getIndexes(value, maxValue, interval, firstValue) {\n    const items = [];\n    const timeUnit = interval.timeUnit;\n    const count = interval.count;\n    const mmm = this._getM(timeUnit);\n    const baseInterval = this.getPrivate(\"baseInterval\");\n    const root = this._root;\n    const dates = this._getDates();\n    let c = count - 1;\n    let previousValue = -Infinity;\n    let duration = $time.getDuration(timeUnit, mmm);\n    let fullDuration = $time.getDuration(timeUnit, count * mmm);\n    let originalValue = value;\n    if (timeUnit == \"day\") {\n      value = firstValue;\n    }\n    while (value <= maxValue) {\n      //value = $time.round(new Date(value), timeUnit, count, firstDay, utc, undefined, timezone).getTime();\n      value = $time.roun(value, timeUnit, count, root);\n      let index = this.valueToIndex(value);\n      let realValue = dates[index];\n      if (timeUnit == \"day\" && baseInterval.timeUnit == \"day\") {\n        if (this._hasDate(value)) {\n          c++;\n        }\n        if (c == count) {\n          if (value >= originalValue - fullDuration * 2) {\n            $array.move(items, index);\n          }\n          c = 0;\n        }\n        value += duration;\n        //value = $time.round(new Date(value), timeUnit, 1, firstDay, utc, undefined, timezone).getTime();\n        value = $time.roun(value, timeUnit, 1, root);\n      } else {\n        if (realValue < value) {\n          for (let i = index, len = dates.length; i < len; i++) {\n            realValue = dates[i];\n            if (realValue >= value) {\n              index = i;\n              break;\n            }\n          }\n        }\n        $array.move(items, index);\n        value += fullDuration;\n        //value = $time.round(new Date(value), timeUnit, count, firstDay, utc, undefined, timezone).getTime();\n        value = $time.roun(value, timeUnit, count, root);\n      }\n      if (value == previousValue) {\n        value += fullDuration + duration;\n        //value = $time.round(new Date(value), timeUnit, count, firstDay, utc, undefined, timezone).getTime();\n        value = $time.roun(value, timeUnit, count, root);\n      }\n      if (value == previousValue) {\n        break;\n      }\n      previousValue = value;\n    }\n    return items;\n  }\n  _hasDate(time) {\n    const result = $array.getSortedIndex(this._getDates(), date => {\n      return $order.compareNumber(date, time);\n    });\n    return result.found;\n  }\n  _nextTime(time, count, _baseInterval) {\n    let index = $math.fitToRange(this.valueToIndex(time) + count, 0, this._dates.length - 1);\n    return this._dates[index];\n  }\n}\nObject.defineProperty(GaplessDateAxis, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"GaplessDateAxis\"\n});\nObject.defineProperty(GaplessDateAxis, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: DateAxis.classNames.concat([GaplessDateAxis.className])\n});\n", "import { ValueAxis } from \"./ValueAxis\";\nimport * as $utils from \"../../../core/util/Utils\";\nimport * as $math from \"../../../core/util/Math\";\n/**\r\n * Creates a duration axis.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/duration-axis/} for more info\r\n * @important\r\n */\nexport class DurationAxis extends ValueAxis {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"_dataGrouped\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_groupingCalculated\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_intervalDuration\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n  }\n  _afterNew() {\n    this._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"axis\"]);\n    super._afterNew();\n  }\n  _adjustMinMax(min, max, gridCount, strictMode) {\n    let minMaxStep;\n    const durationFormatter = this.getDurationFormatter();\n    const baseUnit = this.get(\"baseUnit\");\n    // we don't allow to go to smaller units, setting so to avoid invalidation\n    this.setRaw(\"maxPrecision\", 0);\n    if (baseUnit == \"millisecond\" || baseUnit == \"second\" || baseUnit == \"minute\" || baseUnit == \"hour\") {\n      // will fail if 0\n      if (gridCount <= 1) {\n        gridCount = 1;\n      }\n      gridCount = Math.round(gridCount);\n      //let initialMin: number = min;\n      //let initialMax: number = max;\n      let difference = max - min;\n      // in case min and max is the same, use max\n      if (difference === 0) {\n        difference = Math.abs(max);\n      }\n      let step = difference / gridCount;\n      let divisors = [60, 30, 20, 15, 10, 2, 1];\n      let realDivisor = 1;\n      if (baseUnit == \"hour\") {\n        divisors = [24, 12, 6, 4, 2, 1];\n      }\n      for (let divisor of divisors) {\n        if (difference / divisor > gridCount) {\n          realDivisor = divisor;\n          break;\n        }\n      }\n      let count = Math.ceil((max - min) / realDivisor / gridCount);\n      let exponent = Math.log(Math.abs(count)) * Math.LOG10E;\n      let power = Math.pow(10, Math.floor(exponent)) / 10;\n      let reducedCount = count / power;\n      // find closest to divisor\n      let closest = $math.closest(divisors, reducedCount);\n      count = closest * power;\n      step = realDivisor * count;\n      min = Math.floor(min / step) * step;\n      max = Math.ceil(max / step) * step;\n      /*\r\n      causese SO with seconds\r\n      if (strictMode) {\r\n          min -= step;\r\n          if (min < 0 && initialMin >= 0) {\r\n              min = 0;\r\n          }\r\n          max += step;\r\n            if (max > 0 && initialMax <= 0) {\r\n              max = 0;\r\n          }\r\n      }*/\n      minMaxStep = {\n        min: min,\n        max: max,\n        step: step\n      };\n    } else {\n      minMaxStep = super._adjustMinMax(min, max, gridCount, strictMode);\n    }\n    // choose duration formatter based on step\n    this.setPrivateRaw(\"durationFormat\", durationFormatter.getFormat(minMaxStep.step, minMaxStep.max, baseUnit));\n    return minMaxStep;\n  }\n  _formatText(value) {\n    const formatter = this.getDurationFormatter();\n    return formatter.format(value, this.getPrivate(\"durationFormat\"), this.get(\"baseUnit\"));\n  }\n  /**\r\n   * Returns text to be used in an axis tooltip for specific relative position.\r\n   *\r\n   * @param   position  Position\r\n   * @return            Tooltip text\r\n   */\n  getTooltipText(position, _adjustPosition) {\n    const formatter = this.getDurationFormatter();\n    const extraDecimals = this.get(\"extraTooltipPrecision\", 0);\n    const decimals = this.getPrivate(\"stepDecimalPlaces\", 0) + extraDecimals;\n    const value = $math.round(this.positionToValue(position), decimals);\n    return formatter.format(value, this.getPrivate(\"durationFormat\"), this.get(\"baseUnit\"));\n  }\n}\nObject.defineProperty(DurationAxis, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"DurationAxis\"\n});\nObject.defineProperty(DurationAxis, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: ValueAxis.classNames.concat([DurationAxis.className])\n});\n", "import { Entity } from \"../../../core/util/Entity\";\nimport * as $object from \"../../../core/util/Object\";\n/**\r\n * Draws a bullet on an axis.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Axis_bullets} for more info\r\n */\nexport class AxisBullet extends Entity {\n  constructor() {\n    super(...arguments);\n    /**\r\n     * Target axis object.\r\n     */\n    Object.defineProperty(this, \"axis\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n  }\n  _beforeChanged() {\n    super._beforeChanged();\n    const sprite = this.get(\"sprite\");\n    if (this.isDirty(\"sprite\")) {\n      if (sprite) {\n        sprite.setAll({\n          position: \"absolute\",\n          role: \"figure\"\n        });\n        this._disposers.push(sprite);\n      }\n    }\n    if (this.isDirty(\"location\")) {\n      const dataItem = sprite.dataItem;\n      if (this.axis && sprite && dataItem) {\n        this.axis._prepareDataItem(dataItem);\n      }\n    }\n  }\n  _dispose() {\n    const axis = this.axis;\n    if (axis) {\n      $object.each(axis._bullets, (key, bullet) => {\n        if (bullet.uid == this.uid) {\n          delete axis._bullets[key];\n        }\n      });\n    }\n    super._dispose();\n  }\n}\nObject.defineProperty(AxisBullet, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"AxisBullet\"\n});\nObject.defineProperty(AxisBullet, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Entity.classNames.concat([AxisBullet.className])\n});\n", "import { Label } from \"../../../core/render/Label\";\n/**\r\n * Draws an axis label.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Labels} for more info\r\n * @important\r\n */\nexport class AxisLabel extends Label {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"_tickPoints\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n  }\n}\nObject.defineProperty(AxisLabel, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"AxisLabel\"\n});\nObject.defineProperty(AxisLabel, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Label.classNames.concat([AxisLabel.className])\n});\n", "import { RadialLabel } from \"../../../core/render/RadialLabel\";\n/**\r\n * Draws a label on a circular axis.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Labels} for more info\r\n */\nexport class AxisLabelRadial extends RadialLabel {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"_tickPoints\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n  }\n}\nObject.defineProperty(AxisLabelRadial, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"AxisLabelRadial\"\n});\nObject.defineProperty(AxisLabelRadial, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: RadialLabel.classNames.concat([AxisLabelRadial.className])\n});\n", "import { Tick } from \"../../../core/render/Tick\";\n/**\r\n * Draws an axis tick.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/#Ticks} for more info\r\n * @important\r\n */\nexport class AxisTick extends Tick {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"_tickPoints\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n  }\n}\nObject.defineProperty(AxisTick, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"AxisTick\"\n});\nObject.defineProperty(AxisTick, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Tick.classNames.concat([AxisTick.className])\n});\n", "import { Graphics } from \"../../../core/render/Graphics\";\nimport { Template } from \"../../../core/util/Template\";\nimport { ListTemplate } from \"../../../core/util/List\";\nimport { AxisTick } from \"./AxisTick\";\nimport { Grid } from \"./Grid\";\nimport { AxisLabel } from \"./AxisLabel\";\nimport * as $utils from \"../../../core/util/Utils\";\n/**\r\n * Base class for an axis renderer.\r\n *\r\n * Should not be used on its own.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Axis_renderer} for more info\r\n */\nexport class AxisRenderer extends Graphics {\n  constructor() {\n    super(...arguments);\n    // save for quick access\n    Object.defineProperty(this, \"_axisLength\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 100\n    });\n    Object.defineProperty(this, \"_start\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_end\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(this, \"_inversed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_minSize\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    /**\r\n     * Chart the renderer is used in.\r\n     */\n    Object.defineProperty(this, \"chart\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_lc\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(this, \"_ls\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_thumbDownPoint\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_downStart\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_downEnd\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /**\r\n     * A list of ticks in the axis.\r\n     *\r\n     * `ticks.template` can be used to configure ticks.\r\n     *\r\n     * @default new ListTemplate<AxisTick>\r\n     */\n    Object.defineProperty(this, \"ticks\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.addDisposer(new ListTemplate(Template.new({}), () => AxisTick._new(this._root, {\n        themeTags: $utils.mergeTags(this.ticks.template.get(\"themeTags\", []), this.get(\"themeTags\", []))\n      }, [this.ticks.template])))\n    });\n    /**\r\n     * A list of grid elements in the axis.\r\n     *\r\n     * `grid.template` can be used to configure grid.\r\n     *\r\n     * @default new ListTemplate<Grid>\r\n     */\n    Object.defineProperty(this, \"grid\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.addDisposer(new ListTemplate(Template.new({}), () => Grid._new(this._root, {\n        themeTags: $utils.mergeTags(this.grid.template.get(\"themeTags\", []), this.get(\"themeTags\", []))\n      }, [this.grid.template])))\n    });\n    /**\r\n     * A list of fills in the axis.\r\n     *\r\n     * `axisFills.template` can be used to configure axis fills.\r\n     *\r\n     * @default new ListTemplate<Graphics>\r\n     */\n    Object.defineProperty(this, \"axisFills\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.addDisposer(new ListTemplate(Template.new({}), () => Graphics._new(this._root, {\n        themeTags: $utils.mergeTags(this.axisFills.template.get(\"themeTags\", [\"axis\", \"fill\"]), this.get(\"themeTags\", []))\n      }, [this.axisFills.template])))\n    });\n    /**\r\n     * A list of labels in the axis.\r\n     *\r\n     * `labels.template` can be used to configure axis labels.\r\n     *\r\n     * @default new ListTemplate<AxisLabel>\r\n     */\n    Object.defineProperty(this, \"labels\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.addDisposer(new ListTemplate(Template.new({}), () => AxisLabel._new(this._root, {\n        themeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), this.get(\"themeTags\", []))\n      }, [this.labels.template])))\n    });\n    /**\r\n     * An [[Axis]] renderer is for.\r\n     */\n    Object.defineProperty(this, \"axis\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /**\r\n     * A thumb Graphics to be used for panning the axis (the one which shows under the labels when hovered)\r\n     */\n    Object.defineProperty(this, \"thumb\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n  }\n  /**\r\n   * @ignore\r\n   */\n  makeTick(dataItem, themeTags) {\n    const tick = this.ticks.make();\n    tick._setDataItem(dataItem);\n    dataItem.setRaw(\"tick\", tick);\n    tick.set(\"themeTags\", $utils.mergeTags(tick.get(\"themeTags\"), themeTags));\n    this.axis.labelsContainer.children.push(tick);\n    this.ticks.push(tick);\n    return tick;\n  }\n  /**\r\n   * @ignore\r\n   */\n  makeGrid(dataItem, themeTags) {\n    const grid = this.grid.make();\n    grid._setDataItem(dataItem);\n    dataItem.setRaw(\"grid\", grid);\n    grid.set(\"themeTags\", $utils.mergeTags(grid.get(\"themeTags\"), themeTags));\n    this.axis.gridContainer.children.push(grid);\n    this.grid.push(grid);\n    return grid;\n  }\n  /**\r\n   * @ignore\r\n   */\n  makeAxisFill(dataItem, themeTags) {\n    const axisFill = this.axisFills.make();\n    axisFill._setDataItem(dataItem);\n    axisFill.set(\"themeTags\", $utils.mergeTags(axisFill.get(\"themeTags\"), themeTags));\n    this.axis.gridContainer.children.push(axisFill);\n    dataItem.setRaw(\"axisFill\", axisFill);\n    this.axisFills.push(axisFill);\n    return axisFill;\n  }\n  /**\r\n   * @ignore\r\n   */\n  makeLabel(dataItem, themeTags) {\n    const label = this.labels.make();\n    label.set(\"themeTags\", $utils.mergeTags(label.get(\"themeTags\"), themeTags));\n    this.axis.labelsContainer.children.moveValue(label, 0);\n    label._setDataItem(dataItem);\n    dataItem.setRaw(\"label\", label);\n    this.labels.push(label);\n    return label;\n  }\n  axisLength() {\n    return 0;\n  }\n  /**\r\n   * @ignore\r\n   */\n  gridCount() {\n    return this.axisLength() / this.get(\"minGridDistance\", 50);\n  }\n  _updatePositions() {}\n  _afterNew() {\n    super._afterNew();\n    this.set(\"isMeasured\", false);\n    const thumb = this.thumb;\n    if (thumb) {\n      this._disposers.push(thumb.events.on(\"pointerdown\", event => {\n        this._handleThumbDown(event);\n      }));\n      this._disposers.push(thumb.events.on(\"globalpointerup\", event => {\n        this._handleThumbUp(event);\n      }));\n      this._disposers.push(thumb.events.on(\"globalpointermove\", event => {\n        this._handleThumbMove(event);\n      }));\n    }\n  }\n  _beforeChanged() {\n    super._beforeChanged();\n    if (this.isDirty(\"minGridDistance\")) {\n      this.root.events.once(\"frameended\", () => {\n        this.axis.markDirtySize();\n      });\n    }\n  }\n  _changed() {\n    super._changed();\n    if (this.isDirty(\"pan\")) {\n      const thumb = this.thumb;\n      if (thumb) {\n        const labelsContainer = this.axis.labelsContainer;\n        const pan = this.get(\"pan\");\n        if (pan == \"zoom\") {\n          labelsContainer.children.push(thumb);\n        } else if (pan == \"none\") {\n          labelsContainer.children.removeValue(thumb);\n        }\n      }\n    }\n  }\n  _handleThumbDown(event) {\n    this._thumbDownPoint = this.toLocal(event.point);\n    const axis = this.axis;\n    this._downStart = axis.get(\"start\");\n    this._downEnd = axis.get(\"end\");\n  }\n  _handleThumbUp(_event) {\n    this._thumbDownPoint = undefined;\n  }\n  _handleThumbMove(event) {\n    const downPoint = this._thumbDownPoint;\n    if (downPoint) {\n      const point = this.toLocal(event.point);\n      const downStart = this._downStart;\n      const downEnd = this._downEnd;\n      const extra = this._getPan(point, downPoint) * Math.min(1, downEnd - downStart) / 2 * this.get(\"panSensitivity\", 1);\n      this.axis.zoom(downStart - extra, downEnd + extra, 0);\n    }\n  }\n  _getPan(_point1, _point2) {\n    return 0;\n  }\n  /**\r\n   * Converts relative position (0-1) on axis to a pixel coordinate.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Coordinate (px)\r\n   */\n  positionToCoordinate(position) {\n    if (this._inversed) {\n      return (this._end - position) * this._axisLength;\n    } else {\n      return (position - this._start) * this._axisLength;\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  updateTooltipBounds(_tooltip) {}\n  _updateSize() {\n    this.markDirty();\n    this._clear = true;\n  }\n  /**\r\n   * @ignore\r\n   */\n  toAxisPosition(position) {\n    const start = this._start || 0;\n    const end = this._end || 1;\n    position = position * (end - start);\n    if (!this.get(\"inversed\")) {\n      position = start + position;\n    } else {\n      position = end - position;\n    }\n    return position;\n  }\n  /**\r\n   * @ignore\r\n   */\n  toGlobalPosition(position) {\n    const start = this._start || 0;\n    const end = this._end || 1;\n    if (!this.get(\"inversed\")) {\n      position = position - start;\n    } else {\n      position = end - position;\n    }\n    position = position / (end - start);\n    return position;\n  }\n  /**\r\n   * @ignore\r\n   */\n  fixPosition(position) {\n    if (this.get(\"inversed\")) {\n      return 1 - position;\n    }\n    return position;\n  }\n  /**\r\n   * @ignore\r\n   */\n  _updateLC() {}\n  toggleVisibility(sprite, position, minPosition, maxPosition) {\n    let axis = this.axis;\n    const start = axis.get(\"start\", 0);\n    const end = axis.get(\"end\", 1);\n    let updatedStart = start + (end - start) * (minPosition - 0.0001);\n    let updatedEnd = start + (end - start) * (maxPosition + 0.0001);\n    if (position < updatedStart || position > updatedEnd) {\n      sprite.setPrivate(\"visible\", false);\n    } else {\n      sprite.setPrivate(\"visible\", true);\n    }\n  }\n  _positionTooltip(tooltip, point) {\n    const chart = this.chart;\n    if (chart) {\n      tooltip.set(\"pointTo\", this._display.toGlobal(point));\n      if (!chart.inPlot(point)) {\n        tooltip.hide();\n      }\n    }\n  }\n  processAxis() {}\n}\nObject.defineProperty(AxisRenderer, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"AxisRenderer\"\n});\nObject.defineProperty(AxisRenderer, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Graphics.classNames.concat([AxisRenderer.className])\n});\n", "import { AxisRenderer } from \"./AxisRenderer\";\nimport { p100 } from \"../../../core/util/Percent\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $utils from \"../../../core/util/Utils\";\nimport { Rectangle } from \"../../../core/render/Rectangle\";\n/**\r\n * Used to render horizontal axis.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Axis_renderer} for more info\r\n * @important\r\n */\nexport class AxisRendererX extends AxisRenderer {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"thumb\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: Rectangle.new(this._root, {\n        width: p100,\n        isMeasured: false,\n        themeTags: [\"axis\", \"x\", \"thumb\"]\n      })\n    });\n  }\n  _afterNew() {\n    this._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"renderer\", \"x\"]);\n    super._afterNew();\n    this.setPrivateRaw(\"letter\", \"X\");\n    const gridTemplate = this.grid.template;\n    gridTemplate.set(\"height\", p100);\n    gridTemplate.set(\"width\", 0);\n    gridTemplate.set(\"draw\", (display, graphics) => {\n      display.moveTo(0, 0);\n      display.lineTo(0, graphics.height());\n    });\n    this.set(\"draw\", (display, graphics) => {\n      display.moveTo(0, 0);\n      display.lineTo(graphics.width(), 0);\n    });\n  }\n  _changed() {\n    super._changed();\n    const axis = this.axis;\n    axis.ghostLabel.setPrivate(\"visible\", !this.get(\"inside\"));\n    axis.ghostLabel.set(\"x\", -1000);\n    const opposite = \"opposite\";\n    const inside = \"inside\";\n    if (this.isDirty(opposite) || this.isDirty(inside)) {\n      const chart = this.chart;\n      const axisChildren = axis.children;\n      if (this.get(inside)) {\n        axis.addTag(inside);\n      } else {\n        axis.removeTag(inside);\n      }\n      if (chart) {\n        if (this.get(opposite)) {\n          const children = chart.topAxesContainer.children;\n          if (children.indexOf(axis) == -1) {\n            children.insertIndex(0, axis);\n          }\n          axis.addTag(opposite);\n          axisChildren.moveValue(this);\n        } else {\n          const children = chart.bottomAxesContainer.children;\n          if (children.indexOf(axis) == -1) {\n            children.moveValue(axis);\n          }\n          axis.removeTag(opposite);\n          axisChildren.moveValue(this, 0);\n        }\n        axis.ghostLabel._applyThemes();\n        this.labels.each(label => {\n          label._applyThemes();\n        });\n        this.root._markDirtyRedraw();\n      }\n      axis.markDirtySize();\n    }\n    this.thumb.setPrivate(\"height\", axis.labelsContainer.height());\n  }\n  _getPan(point1, point2) {\n    return (point2.x - point1.x) / this.width();\n  }\n  /**\r\n   * @ignore\r\n   */\n  toAxisPosition(position) {\n    const start = this._start || 0;\n    const end = this._end || 1;\n    position -= this._ls;\n    position = position * (end - start) / this._lc;\n    if (!this.get(\"inversed\")) {\n      position = start + position;\n    } else {\n      position = end - position;\n    }\n    return position;\n  }\n  /**\r\n   * @ignore\r\n   */\n  toGlobalPosition(position) {\n    const start = this._start || 0;\n    const end = this._end || 1;\n    if (!this.get(\"inversed\")) {\n      position = position - start;\n    } else {\n      position = end - position;\n    }\n    position = position / (end - start) * this._lc;\n    position += this._ls;\n    return position;\n  }\n  /**\r\n   * @ignore\r\n   */\n  _updateLC() {\n    const axis = this.axis;\n    const parent = axis.parent;\n    if (parent) {\n      const w = parent.innerWidth();\n      this._lc = this.axisLength() / w;\n      this._ls = (axis.x() - parent.get(\"paddingLeft\", 0)) / w;\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  _updatePositions() {\n    const axis = this.axis;\n    const x = axis.x() - $utils.relativeToValue(axis.get(\"centerX\", 0), axis.width()) - axis.parent.get(\"paddingLeft\", 0);\n    axis.gridContainer.set(\"x\", x);\n    axis.topGridContainer.set(\"x\", x);\n    axis.bulletsContainer.set(\"y\", this.y());\n    const chart = axis.chart;\n    if (chart) {\n      const plotContainer = chart.plotContainer;\n      const axisHeader = axis.axisHeader;\n      let width = axis.get(\"marginLeft\", 0);\n      let x = axis.x() - width;\n      const parent = axis.parent;\n      if (parent) {\n        x -= parent.get(\"paddingLeft\", 0);\n      }\n      if (axisHeader.children.length > 0) {\n        width = axis.axisHeader.width();\n        axis.set(\"marginLeft\", width + 1);\n      } else {\n        axisHeader.set(\"width\", width);\n      }\n      axisHeader.setAll({\n        x: x,\n        y: -1,\n        height: plotContainer.height() + 2\n      });\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  processAxis() {\n    super.processAxis();\n    const axis = this.axis;\n    if (axis.get(\"width\") == null) {\n      axis.set(\"width\", p100);\n    }\n    ;\n    const verticalLayout = this._root.verticalLayout;\n    axis.set(\"layout\", verticalLayout);\n    axis.labelsContainer.set(\"width\", p100);\n    axis.axisHeader.setAll({\n      layout: verticalLayout\n    });\n  }\n  /**\r\n   * @ignore\r\n   */\n  axisLength() {\n    return this.axis.width();\n  }\n  /**\r\n   * Converts axis relative position to actual coordinate in pixels.\r\n   *\r\n   * @param   position  Position\r\n   * @return            Point\r\n   */\n  positionToPoint(position) {\n    return {\n      x: this.positionToCoordinate(position),\n      y: 0\n    };\n  }\n  /**\r\n   * @ignore\r\n   */\n  updateTick(tick, position, endPosition, count) {\n    if (tick) {\n      if (!$type.isNumber(position)) {\n        position = 0;\n      }\n      let location = 0.5;\n      if ($type.isNumber(count) && count > 1) {\n        location = tick.get(\"multiLocation\", location);\n      } else {\n        location = tick.get(\"location\", location);\n      }\n      if ($type.isNumber(endPosition) && endPosition != position) {\n        position = position + (endPosition - position) * location;\n      }\n      tick.set(\"x\", this.positionToCoordinate(position));\n      let length = tick.get(\"length\", 0);\n      const inside = tick.get(\"inside\", this.get(\"inside\", false));\n      if (this.get(\"opposite\")) {\n        tick.set(\"y\", p100);\n        if (!inside) {\n          length *= -1;\n        }\n      } else {\n        tick.set(\"y\", 0);\n        if (inside) {\n          length *= -1;\n        }\n      }\n      tick.set(\"draw\", display => {\n        display.moveTo(0, 0);\n        display.lineTo(0, length);\n      });\n      this.toggleVisibility(tick, position, tick.get(\"minPosition\", 0), tick.get(\"maxPosition\", 1));\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  updateLabel(label, position, endPosition, count) {\n    if (label) {\n      let location = 0.5;\n      if ($type.isNumber(count) && count > 1) {\n        location = label.get(\"multiLocation\", location);\n      } else {\n        location = label.get(\"location\", location);\n      }\n      if (!$type.isNumber(position)) {\n        position = 0;\n      }\n      const inside = label.get(\"inside\", this.get(\"inside\", false));\n      const opposite = this.get(\"opposite\");\n      if (opposite) {\n        if (!inside) {\n          label.set(\"position\", \"relative\");\n          label.set(\"y\", p100);\n        } else {\n          label.set(\"position\", \"absolute\");\n          label.set(\"y\", 0);\n        }\n      } else {\n        if (!inside) {\n          label.set(\"y\", undefined);\n          label.set(\"position\", \"relative\");\n        } else {\n          label.set(\"y\", 0);\n          label.set(\"position\", \"absolute\");\n        }\n      }\n      if ($type.isNumber(endPosition) && endPosition != position) {\n        position = position + (endPosition - position) * location;\n      }\n      label.set(\"x\", this.positionToCoordinate(position));\n      this.toggleVisibility(label, position, label.get(\"minPosition\", 0), label.get(\"maxPosition\", 1));\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  updateGrid(grid, position, endPosition) {\n    if (grid) {\n      if (!$type.isNumber(position)) {\n        position = 0;\n      }\n      let location = grid.get(\"location\", 0.5);\n      if ($type.isNumber(endPosition) && endPosition != position) {\n        position = position + (endPosition - position) * location;\n      }\n      grid.set(\"x\", this.positionToCoordinate(position));\n      this.toggleVisibility(grid, position, 0, 1);\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  updateBullet(bullet, position, endPosition) {\n    if (bullet) {\n      const sprite = bullet.get(\"sprite\");\n      if (sprite) {\n        if (!$type.isNumber(position)) {\n          position = 0;\n        }\n        let location = bullet.get(\"location\", 0.5);\n        if ($type.isNumber(endPosition) && endPosition != position) {\n          position = position + (endPosition - position) * location;\n        }\n        let bulletPosition = this.axis.roundAxisPosition(position, location);\n        let previousBullet = this.axis._bullets[bulletPosition];\n        let d = -1;\n        if (this.get(\"opposite\")) {\n          d = 1;\n        }\n        if (bullet.get(\"stacked\")) {\n          if (previousBullet) {\n            let previousSprite = previousBullet.get(\"sprite\");\n            if (previousSprite) {\n              sprite.set(\"y\", previousSprite.y() + previousSprite.height() * d);\n            }\n          } else {\n            sprite.set(\"y\", 0);\n          }\n        }\n        this.axis._bullets[bulletPosition] = bullet;\n        sprite.set(\"x\", this.positionToCoordinate(position));\n        this.toggleVisibility(sprite, position, 0, 1);\n      }\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  updateFill(fill, position, endPosition) {\n    if (fill) {\n      if (!$type.isNumber(position)) {\n        position = 0;\n      }\n      if (!$type.isNumber(endPosition)) {\n        endPosition = 1;\n      }\n      let x0 = this.positionToCoordinate(position);\n      let x1 = this.positionToCoordinate(endPosition);\n      this.fillDrawMethod(fill, x0, x1);\n    }\n  }\n  fillDrawMethod(fill, x0, x1) {\n    fill.set(\"draw\", display => {\n      //display.drawRect(x0, 0, x1 - x0, this.axis!.gridContainer.height());\n      // using for holes, so can not be rectangle\n      const h = this.axis.gridContainer.height();\n      const w = this.width();\n      if (x1 < x0) {\n        [x1, x0] = [x0, x1];\n      }\n      if (x0 > w || x1 < 0) {\n        return;\n      }\n      /*\r\n      const limit = 10000;\r\n        x0 = Math.max(-limit, x0);\r\n      x1 = Math.min(limit, x1);\r\n      */\n      display.moveTo(x0, 0);\n      display.lineTo(x1, 0);\n      display.lineTo(x1, h);\n      display.lineTo(x0, h);\n      display.lineTo(x0, 0);\n    });\n  }\n  /**\r\n   * @ignore\r\n   */\n  positionTooltip(tooltip, position) {\n    this._positionTooltip(tooltip, {\n      x: this.positionToCoordinate(position),\n      y: 0\n    });\n  }\n  /**\r\n   * @ignore\r\n   */\n  updateTooltipBounds(tooltip) {\n    const inside = this.get(\"inside\");\n    const num = 100000;\n    let global = this._display.toGlobal({\n      x: 0,\n      y: 0\n    });\n    let x = global.x;\n    let y = 0;\n    let w = this.axisLength();\n    let h = num;\n    let pointerOrientation = \"up\";\n    if (this.get(\"opposite\")) {\n      if (inside) {\n        pointerOrientation = \"up\";\n        y = global.y;\n        h = num;\n      } else {\n        pointerOrientation = \"down\";\n        y = global.y - num;\n        h = num;\n      }\n    } else {\n      if (inside) {\n        pointerOrientation = \"down\";\n        y = global.y - num;\n        h = num;\n      } else {\n        pointerOrientation = \"up\";\n        y = global.y;\n        h = num;\n      }\n    }\n    const bounds = {\n      left: x,\n      right: x + w,\n      top: y,\n      bottom: y + h\n    };\n    const oldBounds = tooltip.get(\"bounds\");\n    if (!$utils.sameBounds(bounds, oldBounds)) {\n      tooltip.set(\"bounds\", bounds);\n      tooltip.set(\"pointerOrientation\", pointerOrientation);\n    }\n  }\n}\nObject.defineProperty(AxisRendererX, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"AxisRendererX\"\n});\nObject.defineProperty(AxisRendererX, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: AxisRenderer.classNames.concat([AxisRendererX.className])\n});\n", "import { AxisRenderer } from \"./AxisRenderer\";\nimport { p100 } from \"../../../core/util/Percent\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $utils from \"../../../core/util/Utils\";\nimport { Rectangle } from \"../../../core/render/Rectangle\";\n/**\r\n * Used to render vertical axis.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/#Axis_renderer} for more info\r\n * @important\r\n */\nexport class AxisRendererY extends AxisRenderer {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"_downY\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"thumb\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: Rectangle.new(this._root, {\n        height: p100,\n        isMeasured: false,\n        themeTags: [\"axis\", \"y\", \"thumb\"]\n      })\n    });\n  }\n  _afterNew() {\n    this._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"renderer\", \"y\"]);\n    if (this._settings.opposite) {\n      this._settings.themeTags.push(\"opposite\");\n    }\n    super._afterNew();\n    this.setPrivateRaw(\"letter\", \"Y\");\n    const gridTemplate = this.grid.template;\n    gridTemplate.set(\"width\", p100);\n    gridTemplate.set(\"height\", 0);\n    gridTemplate.set(\"draw\", (display, graphics) => {\n      display.moveTo(0, 0);\n      display.lineTo(graphics.width(), 0);\n    });\n    this.set(\"draw\", (display, renderer) => {\n      display.moveTo(0, 0);\n      display.lineTo(0, renderer.height());\n    });\n  }\n  _getPan(point1, point2) {\n    return (point1.y - point2.y) / this.height();\n  }\n  _changed() {\n    super._changed();\n    const axis = this.axis;\n    axis.ghostLabel.setPrivate(\"visible\", !this.get(\"inside\"));\n    axis.ghostLabel.set(\"y\", -1000);\n    const thumb = this.thumb;\n    const opposite = \"opposite\";\n    const inside = \"inside\";\n    const chart = this.chart;\n    if (this.isDirty(opposite) || this.isDirty(inside)) {\n      const axisChildren = axis.children;\n      if (this.get(inside)) {\n        axis.addTag(inside);\n      } else {\n        axis.removeTag(inside);\n      }\n      if (chart) {\n        if (this.get(opposite)) {\n          const children = chart.rightAxesContainer.children;\n          if (children.indexOf(axis) == -1) {\n            children.moveValue(axis, 0);\n          }\n          axis.addTag(opposite);\n          axisChildren.moveValue(this, 0);\n        } else {\n          const children = chart.leftAxesContainer.children;\n          if (children.indexOf(axis) == -1) {\n            children.moveValue(axis);\n          }\n          axis.removeTag(opposite);\n          axisChildren.moveValue(this);\n        }\n        axis.ghostLabel._applyThemes();\n        this.labels.each(label => {\n          label._applyThemes();\n        });\n        this.root._markDirtyRedraw();\n      }\n      axis.markDirtySize();\n    }\n    const w = axis.labelsContainer.width();\n    if (chart) {\n      if (this.get(opposite)) {\n        thumb.set(\"centerX\", 0);\n      } else {\n        thumb.set(\"centerX\", w);\n      }\n    }\n    thumb.setPrivate(\"width\", w);\n  }\n  /**\r\n   * @ignore\r\n   */\n  processAxis() {\n    super.processAxis();\n    const axis = this.axis;\n    if (axis.get(\"height\") == null) {\n      axis.set(\"height\", p100);\n    }\n    const horizontalLayout = this._root.horizontalLayout;\n    axis.set(\"layout\", horizontalLayout);\n    axis.labelsContainer.set(\"height\", p100);\n    axis.axisHeader.set(\"layout\", horizontalLayout);\n  }\n  _updatePositions() {\n    const axis = this.axis;\n    const y = axis.y() - $utils.relativeToValue(axis.get(\"centerY\", 0), axis.height());\n    axis.gridContainer.set(\"y\", y);\n    axis.topGridContainer.set(\"y\", y);\n    axis.bulletsContainer.set(\"x\", this.x());\n    const chart = axis.chart;\n    if (chart) {\n      const plotContainer = chart.plotContainer;\n      const axisHeader = axis.axisHeader;\n      let height = axis.get(\"marginTop\", 0);\n      if (axisHeader.children.length > 0) {\n        height = axis.axisHeader.height();\n        axis.set(\"marginTop\", height + 1);\n      } else {\n        axisHeader.set(\"height\", height);\n      }\n      axisHeader.setAll({\n        y: axis.y() - height,\n        x: -1,\n        width: plotContainer.width() + 2\n      });\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  axisLength() {\n    return this.axis.innerHeight();\n  }\n  /**\r\n   * Converts axis relative position to actual coordinate in pixels.\r\n   *\r\n   * @param   position  Position\r\n   * @return            Point\r\n   */\n  positionToPoint(position) {\n    return {\n      x: 0,\n      y: this.positionToCoordinate(position)\n    };\n  }\n  /**\r\n   * @ignore\r\n   */\n  updateLabel(label, position, endPosition, count) {\n    if (label) {\n      if (!$type.isNumber(position)) {\n        position = 0;\n      }\n      let location = 0.5;\n      if ($type.isNumber(count) && count > 1) {\n        location = label.get(\"multiLocation\", location);\n      } else {\n        location = label.get(\"location\", location);\n      }\n      const opposite = this.get(\"opposite\");\n      const inside = label.get(\"inside\", this.get(\"inside\", false));\n      if (opposite) {\n        label.set(\"x\", 0);\n        if (inside) {\n          label.set(\"position\", \"absolute\");\n        } else {\n          label.set(\"position\", \"relative\");\n        }\n      } else {\n        if (inside) {\n          label.set(\"x\", 0);\n          label.set(\"position\", \"absolute\");\n        } else {\n          label.set(\"x\", undefined);\n          label.set(\"position\", \"relative\");\n        }\n      }\n      if ($type.isNumber(endPosition) && endPosition != position) {\n        position = position + (endPosition - position) * location;\n      }\n      label.set(\"y\", this.positionToCoordinate(position));\n      this.toggleVisibility(label, position, label.get(\"minPosition\", 0), label.get(\"maxPosition\", 1));\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  updateGrid(grid, position, endPosition) {\n    if (grid) {\n      if (!$type.isNumber(position)) {\n        position = 0;\n      }\n      let location = grid.get(\"location\", 0.5);\n      if ($type.isNumber(endPosition) && endPosition != position) {\n        position = position + (endPosition - position) * location;\n      }\n      grid.set(\"y\", this.positionToCoordinate(position));\n      this.toggleVisibility(grid, position, 0, 1);\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  updateTick(tick, position, endPosition, count) {\n    if (tick) {\n      if (!$type.isNumber(position)) {\n        position = 0;\n      }\n      let location = 0.5;\n      if ($type.isNumber(count) && count > 1) {\n        location = tick.get(\"multiLocation\", location);\n      } else {\n        location = tick.get(\"location\", location);\n      }\n      if ($type.isNumber(endPosition) && endPosition != position) {\n        position = position + (endPosition - position) * location;\n      }\n      tick.set(\"y\", this.positionToCoordinate(position));\n      let length = tick.get(\"length\", 0);\n      const inside = tick.get(\"inside\", this.get(\"inside\", false));\n      if (this.get(\"opposite\")) {\n        tick.set(\"x\", 0);\n        if (inside) {\n          length *= -1;\n        }\n      } else {\n        if (!inside) {\n          length *= -1;\n        }\n      }\n      tick.set(\"draw\", display => {\n        display.moveTo(0, 0);\n        display.lineTo(length, 0);\n      });\n      this.toggleVisibility(tick, position, tick.get(\"minPosition\", 0), tick.get(\"maxPosition\", 1));\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  updateBullet(bullet, position, endPosition) {\n    if (bullet) {\n      const sprite = bullet.get(\"sprite\");\n      if (sprite) {\n        if (!$type.isNumber(position)) {\n          position = 0;\n        }\n        let location = bullet.get(\"location\", 0.5);\n        if ($type.isNumber(endPosition) && endPosition != position) {\n          position = position + (endPosition - position) * location;\n        }\n        let bulletPosition = this.axis.roundAxisPosition(position, location);\n        let previousBullet = this.axis._bullets[bulletPosition];\n        let d = 1;\n        if (this.get(\"opposite\")) {\n          d = -1;\n        }\n        if (bullet.get(\"stacked\")) {\n          if (previousBullet) {\n            let previousSprite = previousBullet.get(\"sprite\");\n            if (previousSprite) {\n              sprite.set(\"x\", previousSprite.x() + previousSprite.width() * d);\n            }\n          } else {\n            sprite.set(\"x\", 0);\n          }\n        }\n        this.axis._bullets[bulletPosition] = bullet;\n        sprite.set(\"y\", this.positionToCoordinate(position));\n        this.toggleVisibility(sprite, position, 0, 1);\n      }\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  updateFill(fill, position, endPosition) {\n    if (fill) {\n      if (!$type.isNumber(position)) {\n        position = 0;\n      }\n      if (!$type.isNumber(endPosition)) {\n        endPosition = 1;\n      }\n      let y0 = this.positionToCoordinate(position);\n      let y1 = this.positionToCoordinate(endPosition);\n      this.fillDrawMethod(fill, y0, y1);\n    }\n  }\n  fillDrawMethod(fill, y0, y1) {\n    fill.set(\"draw\", display => {\n      // using for holes, so can not be rectangle\n      const w = this.axis.gridContainer.width();\n      const h = this.height();\n      if (y1 < y0) {\n        [y1, y0] = [y0, y1];\n      }\n      if (y0 > h || y1 < 0) {\n        return;\n      }\n      //y0 = Math.max(0, y0);\n      //y1 = Math.min(h, y1);\n      display.moveTo(0, y0);\n      display.lineTo(w, y0);\n      display.lineTo(w, y1);\n      display.lineTo(0, y1);\n      display.lineTo(0, y0);\n    });\n  }\n  /**\r\n   * Converts relative position (0-1) on axis to a pixel coordinate.\r\n   *\r\n   * @param position  Position (0-1)\r\n   * @return Coordinate (px)\r\n   */\n  positionToCoordinate(position) {\n    if (!this._inversed) {\n      return (this._end - position) * this._axisLength;\n    } else {\n      return (position - this._start) * this._axisLength;\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  positionTooltip(tooltip, position) {\n    this._positionTooltip(tooltip, {\n      x: 0,\n      y: this.positionToCoordinate(position)\n    });\n  }\n  /**\r\n   * @ignore\r\n   */\n  updateTooltipBounds(tooltip) {\n    const inside = this.get(\"inside\");\n    const num = 100000;\n    let global = this._display.toGlobal({\n      x: 0,\n      y: 0\n    });\n    let y = global.y;\n    let x = 0;\n    let h = this.axisLength();\n    let w = num;\n    let pointerOrientation = \"right\";\n    if (this.get(\"opposite\")) {\n      if (inside) {\n        pointerOrientation = \"right\";\n        x = global.x - num;\n        w = num;\n      } else {\n        pointerOrientation = \"left\";\n        x = global.x;\n        w = num;\n      }\n    } else {\n      if (inside) {\n        pointerOrientation = \"left\";\n        x = global.x;\n        w = num;\n      } else {\n        pointerOrientation = \"right\";\n        x = global.x - num;\n        w = num;\n      }\n    }\n    const bounds = {\n      left: x,\n      right: x + w,\n      top: y,\n      bottom: y + h\n    };\n    const oldBounds = tooltip.get(\"bounds\");\n    if (!$utils.sameBounds(bounds, oldBounds)) {\n      tooltip.set(\"bounds\", bounds);\n      tooltip.set(\"pointerOrientation\", pointerOrientation);\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  _updateLC() {\n    const axis = this.axis;\n    const parent = axis.parent;\n    if (parent) {\n      const h = parent.innerHeight();\n      this._lc = this.axisLength() / h;\n      this._ls = axis.y() / h;\n    }\n  }\n  /**\r\n   * @ignore\r\n   */\n  toAxisPosition(position) {\n    const start = this._start || 0;\n    const end = this._end || 1;\n    position -= this._ls;\n    position = position * (end - start) / this._lc;\n    if (this.get(\"inversed\")) {\n      position = start + position;\n    } else {\n      position = end - position;\n    }\n    return position;\n  }\n  /**\r\n   * @ignore\r\n   */\n  toGlobalPosition(position) {\n    const start = this._start || 0;\n    const end = this._end || 1;\n    if (this.get(\"inversed\")) {\n      position = position - start;\n    } else {\n      position = end - position;\n    }\n    position = position / (end - start) * this._lc;\n    position += this._ls;\n    return position;\n  }\n  /**\r\n   * @ignore\r\n   */\n  fixPosition(position) {\n    if (!this.get(\"inversed\")) {\n      return 1 - position;\n    }\n    return position;\n  }\n}\nObject.defineProperty(AxisRendererY, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"AxisRendererY\"\n});\nObject.defineProperty(AxisRendererY, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: AxisRenderer.classNames.concat([AxisRendererY.className])\n});\n", "import { RoundedRectangle } from \"../../../core/render/RoundedRectangle\";\n/**\r\n * A candle element used in a [[CandlestickSeries]].\r\n */\nexport class Candlestick extends RoundedRectangle {\n  _beforeChanged() {\n    super._beforeChanged();\n    if (this.isDirty(\"lowX0\") || this.isDirty(\"lowY0\") || this.isDirty(\"lowX1\") || this.isDirty(\"lowY1\") || this.isDirty(\"highX0\") || this.isDirty(\"highX1\") || this.isDirty(\"highY0\") || this.isDirty(\"highY1\")) {\n      this._clear = true;\n    }\n  }\n  _draw() {\n    super._draw();\n    const display = this._display;\n    display.moveTo(this.get(\"lowX0\", 0), this.get(\"lowY0\", 0));\n    display.lineTo(this.get(\"lowX1\", 0), this.get(\"lowY1\", 0));\n    display.moveTo(this.get(\"highX0\", 0), this.get(\"highY0\", 0));\n    display.lineTo(this.get(\"highX1\", 0), this.get(\"highY1\", 0));\n  }\n}\nObject.defineProperty(Candlestick, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"Candlestick\"\n});\nObject.defineProperty(Candlestick, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: RoundedRectangle.classNames.concat([Candlestick.className])\n});\n", "import { BaseColumnSeries } from \"./BaseColumnSeries\";\nimport { Template } from \"../../../core/util/Template\";\nimport { ListTemplate } from \"../../../core/util/List\";\nimport { RoundedRectangle } from \"../../../core/render/RoundedRectangle\";\nimport * as $utils from \"../../../core/util/Utils\";\nexport class ColumnSeries extends BaseColumnSeries {\n  constructor() {\n    super(...arguments);\n    /**\r\n     * A [[TemplateList]] of all columns in series.\r\n     *\r\n     * `columns.template` can be used to set default settings for all columns,\r\n     * or to change on existing ones.\r\n     */\n    Object.defineProperty(this, \"columns\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.addDisposer(new ListTemplate(Template.new({}), () => RoundedRectangle._new(this._root, {\n        position: \"absolute\",\n        themeTags: $utils.mergeTags(this.columns.template.get(\"themeTags\", []), [\"series\", \"column\"])\n      }, [this.columns.template])))\n    });\n  }\n  /**\r\n   * @ignore\r\n   */\n  makeColumn(dataItem, listTemplate) {\n    const column = this.mainContainer.children.push(listTemplate.make());\n    column._setDataItem(dataItem);\n    listTemplate.push(column);\n    return column;\n  }\n  _processAxisRange(axisRange) {\n    super._processAxisRange(axisRange);\n    axisRange.columns = new ListTemplate(Template.new({}), () => RoundedRectangle._new(this._root, {\n      position: \"absolute\",\n      themeTags: $utils.mergeTags(axisRange.columns.template.get(\"themeTags\", []), [\"series\", \"column\"])\n    }, [this.columns.template, axisRange.columns.template]));\n  }\n}\nObject.defineProperty(ColumnSeries, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"ColumnSeries\"\n});\nObject.defineProperty(ColumnSeries, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: BaseColumnSeries.classNames.concat([ColumnSeries.className])\n});\n", "import { ColumnSeries } from \"./ColumnSeries\";\nimport { Candlestick } from \"./Candlestick\";\nimport { Template } from \"../../../core/util/Template\";\nimport { ListTemplate } from \"../../../core/util/List\";\nimport * as $utils from \"../../../core/util/Utils\";\nimport * as $array from \"../../../core/util/Array\";\n/**\r\n * Candlestick series.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/candlestick-series/} for more info\r\n * @important\r\n */\nexport class CandlestickSeries extends ColumnSeries {\n  constructor() {\n    super(...arguments);\n    /**\r\n     * A list of candles in the series.\r\n     *\r\n     * `columns.template` can be used to configure candles.\r\n     *\r\n     * @default new ListTemplate<Candlestick>\r\n     */\n    Object.defineProperty(this, \"columns\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.addDisposer(new ListTemplate(Template.new({\n        themeTags: [\"autocolor\"]\n      }), () => Candlestick._new(this._root, {\n        themeTags: $utils.mergeTags(this.columns.template.get(\"themeTags\", []), [\"candlestick\", \"series\", \"column\"])\n      }, [this.columns.template])))\n    });\n  }\n  /**\r\n   * @ignore\r\n   */\n  makeColumn(dataItem, listTemplate) {\n    const column = this.mainContainer.children.push(listTemplate.make());\n    column._setDataItem(dataItem);\n    listTemplate.push(column);\n    return column;\n  }\n  _updateGraphics(dataItem, previousDataItem) {\n    super._updateGraphics(dataItem, previousDataItem);\n    const xAxis = this.getRaw(\"xAxis\");\n    const yAxis = this.getRaw(\"yAxis\");\n    const baseAxis = this.getRaw(\"baseAxis\");\n    let vcy = this.get(\"vcy\", 1);\n    let vcx = this.get(\"vcx\", 1);\n    let lx0;\n    let lx1;\n    let ly0;\n    let ly1;\n    let hx0;\n    let hx1;\n    let hy0;\n    let hy1;\n    let locationX = this.get(\"locationX\", dataItem.get(\"locationX\", 0.5));\n    let locationY = this.get(\"locationY\", dataItem.get(\"locationY\", 0.5));\n    let openLocationX = this.get(\"openLocationX\", dataItem.get(\"openLocationX\", locationX));\n    let openLocationY = this.get(\"openLocationY\", dataItem.get(\"openLocationY\", locationY));\n    let orientation;\n    if (yAxis === baseAxis) {\n      let open = xAxis.getDataItemPositionX(dataItem, this._xOpenField, 1, vcx);\n      let close = xAxis.getDataItemPositionX(dataItem, this._xField, 1, vcx);\n      lx1 = xAxis.getDataItemPositionX(dataItem, this._xLowField, 1, vcx);\n      hx1 = xAxis.getDataItemPositionX(dataItem, this._xHighField, 1, vcx);\n      hx0 = Math.max(open, close);\n      lx0 = Math.min(open, close);\n      let startLocation = this._aLocationY0 + openLocationY - 0.5;\n      let endLocation = this._aLocationY1 + locationY - 0.5;\n      ly0 = yAxis.getDataItemPositionY(dataItem, this._yField, startLocation + (endLocation - startLocation) / 2, vcy);\n      ly1 = ly0;\n      hy0 = ly0;\n      hy1 = ly0;\n      orientation = \"horizontal\";\n    } else {\n      let open = yAxis.getDataItemPositionY(dataItem, this._yOpenField, 1, vcy);\n      let close = yAxis.getDataItemPositionY(dataItem, this._yField, 1, vcy);\n      ly1 = yAxis.getDataItemPositionY(dataItem, this._yLowField, 1, vcy);\n      hy1 = yAxis.getDataItemPositionY(dataItem, this._yHighField, 1, vcy);\n      hy0 = Math.max(open, close);\n      ly0 = Math.min(open, close);\n      let startLocation = this._aLocationX0 + openLocationX - 0.5;\n      let endLocation = this._aLocationX1 + locationX - 0.5;\n      lx0 = xAxis.getDataItemPositionX(dataItem, this._xField, startLocation + (endLocation - startLocation) / 2, vcx);\n      lx1 = lx0;\n      hx0 = lx0;\n      hx1 = lx0;\n      orientation = \"vertical\";\n    }\n    this._updateCandleGraphics(dataItem, lx0, lx1, ly0, ly1, hx0, hx1, hy0, hy1, orientation);\n  }\n  _updateCandleGraphics(dataItem, lx0, lx1, ly0, ly1, hx0, hx1, hy0, hy1, orientation) {\n    let column = dataItem.get(\"graphics\");\n    if (column) {\n      let pl0 = this.getPoint(lx0, ly0);\n      let pl1 = this.getPoint(lx1, ly1);\n      let ph0 = this.getPoint(hx0, hy0);\n      let ph1 = this.getPoint(hx1, hy1);\n      let x = column.x();\n      let y = column.y();\n      column.set(\"lowX0\", pl0.x - x);\n      column.set(\"lowY0\", pl0.y - y);\n      column.set(\"lowX1\", pl1.x - x);\n      column.set(\"lowY1\", pl1.y - y);\n      column.set(\"highX0\", ph0.x - x);\n      column.set(\"highY0\", ph0.y - y);\n      column.set(\"highX1\", ph1.x - x);\n      column.set(\"highY1\", ph1.y - y);\n      column.set(\"orientation\", orientation);\n      let rangeGraphics = dataItem.get(\"rangeGraphics\");\n      if (rangeGraphics) {\n        $array.each(rangeGraphics, column => {\n          column.set(\"lowX0\", pl0.x - x);\n          column.set(\"lowY0\", pl0.y - y);\n          column.set(\"lowX1\", pl1.x - x);\n          column.set(\"lowY1\", pl1.y - y);\n          column.set(\"highX0\", ph0.x - x);\n          column.set(\"highY0\", ph0.y - y);\n          column.set(\"highX1\", ph1.x - x);\n          column.set(\"highY1\", ph1.y - y);\n          column.set(\"orientation\", orientation);\n        });\n      }\n    }\n  }\n  _processAxisRange(axisRange) {\n    super._processAxisRange(axisRange);\n    axisRange.columns = new ListTemplate(Template.new({}), () => Candlestick._new(this._root, {\n      themeTags: $utils.mergeTags(axisRange.columns.template.get(\"themeTags\", []), [\"candlestick\", \"series\", \"column\"])\n    }, [this.columns.template, axisRange.columns.template]));\n  }\n}\nObject.defineProperty(CandlestickSeries, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"CandlestickSeries\"\n});\nObject.defineProperty(CandlestickSeries, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: ColumnSeries.classNames.concat([CandlestickSeries.className])\n});\n", "import { Candlestick } from \"./Candlestick\";\nexport class OHLC extends Candlestick {\n  _draw() {\n    const display = this._display;\n    display.moveTo(this.get(\"lowX1\", 0), this.get(\"lowY1\", 0));\n    display.lineTo(this.get(\"highX1\", 0), this.get(\"highY1\", 0));\n    let w = this.width();\n    let h = this.height();\n    if (this.get(\"orientation\") == \"vertical\") {\n      let lY = h;\n      let hY = 0;\n      display.moveTo(0, lY);\n      display.lineTo(w / 2, lY);\n      display.moveTo(w / 2, hY);\n      display.lineTo(w, hY);\n    } else {\n      let lX = 0;\n      let hX = w;\n      display.moveTo(lX, 0);\n      display.lineTo(lX, h / 2);\n      display.moveTo(hX, h / 2);\n      display.lineTo(hX, h);\n    }\n  }\n}\nObject.defineProperty(OHLC, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"OHLC\"\n});\nObject.defineProperty(OHLC, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: Candlestick.classNames.concat([OHLC.className])\n});\n", "import { CandlestickSeries } from \"./CandlestickSeries\";\nimport { OHLC } from \"./OHLC\";\nimport { Template } from \"../../../core/util/Template\";\nimport { ListTemplate } from \"../../../core/util/List\";\nimport * as $utils from \"../../../core/util/Utils\";\n/**\r\n * OHLC series.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/candlestick-series/} for more info\r\n * @important\r\n */\nexport class OHLCSeries extends CandlestickSeries {\n  constructor() {\n    super(...arguments);\n    /**\r\n     * A list of OHLC bars in the series.\r\n     *\r\n     * `columns.template` can be used to configure OHLC bars.\r\n     *\r\n     * @default new ListTemplate<OHLC>\r\n     */\n    Object.defineProperty(this, \"columns\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.addDisposer(new ListTemplate(Template.new({\n        themeTags: [\"autocolor\"]\n      }), () => OHLC._new(this._root, {\n        themeTags: $utils.mergeTags(this.columns.template.get(\"themeTags\", []), [\"ohlc\", \"series\", \"column\"])\n      }, [this.columns.template])))\n    });\n  }\n  /**\r\n   * @ignore\r\n   */\n  makeColumn(dataItem, listTemplate) {\n    const column = this.mainContainer.children.push(listTemplate.make());\n    column._setDataItem(dataItem);\n    listTemplate.push(column);\n    return column;\n  }\n  _processAxisRange(axisRange) {\n    super._processAxisRange(axisRange);\n    axisRange.columns = new ListTemplate(Template.new({}), () => OHLC._new(this._root, {\n      themeTags: $utils.mergeTags(axisRange.columns.template.get(\"themeTags\", []), [\"ohlc\", \"series\", \"column\"])\n    }, [this.columns.template, axisRange.columns.template]));\n  }\n}\nObject.defineProperty(OHLCSeries, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"OHLCSeries\"\n});\nObject.defineProperty(OHLCSeries, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: CandlestickSeries.classNames.concat([OHLCSeries.className])\n});\n", "import { XYSeries } from \"./XYSeries\";\nimport { Graphics } from \"../../../core/render/Graphics\";\nimport { line, area } from \"d3-shape\";\nimport { Template } from \"../../../core/util/Template\";\nimport { ListTemplate } from \"../../../core/util/List\";\nimport { color } from \"../../../core/util/Color\";\nimport { DataItem } from \"../../../core/render/Component\";\nimport { Rectangle } from \"../../../core/render/Rectangle\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $array from \"../../../core/util/Array\";\nimport * as $utils from \"../../../core/util/Utils\";\n/**\r\n * Used to plot line and/or area series.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/line-series/} for more info\r\n * @important\r\n */\nexport class LineSeries extends XYSeries {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"_endIndex\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_strokeGenerator\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: line()\n    });\n    Object.defineProperty(this, \"_fillGenerator\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: area()\n    });\n    Object.defineProperty(this, \"_legendStroke\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_legendFill\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /**\r\n     * A [[TemplateList]] of all line segments in series.\r\n     *\r\n     * `strokes.template` can be used to set default settings for all line\r\n     * segments, or to change on existing ones.\r\n     *\r\n     * @default new ListTemplate<Graphics>\r\n     */\n    Object.defineProperty(this, \"strokes\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.addDisposer(new ListTemplate(Template.new({}), () => Graphics._new(this._root, {\n        themeTags: $utils.mergeTags(this.strokes.template.get(\"themeTags\", []), [\"line\", \"series\", \"stroke\"])\n      }, [this.strokes.template])))\n    });\n    /**\r\n     * A [[TemplateList]] of all segment fills in series.\r\n     *\r\n     * `fills.template` can be used to set default settings for all segment\r\n     * fills, or to change on existing ones.\r\n     *\r\n     * @default new ListTemplate<Graphics>\r\n     */\n    Object.defineProperty(this, \"fills\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: this.addDisposer(new ListTemplate(Template.new({}), () => Graphics._new(this._root, {\n        themeTags: $utils.mergeTags(this.strokes.template.get(\"themeTags\", []), [\"line\", \"series\", \"fill\"])\n      }, [this.fills.template])))\n    });\n    // custom set from data\n    Object.defineProperty(this, \"_fillTemplate\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_strokeTemplate\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_previousPoint\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [0, 0, 0, 0]\n    });\n    Object.defineProperty(this, \"_dindex\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_sindex\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n  }\n  _afterNew() {\n    this._fillGenerator.y0(function (p) {\n      return p[3];\n    });\n    this._fillGenerator.x0(function (p) {\n      return p[2];\n    });\n    this._fillGenerator.y1(function (p) {\n      return p[1];\n    });\n    this._fillGenerator.x1(function (p) {\n      return p[0];\n    });\n    super._afterNew();\n  }\n  /**\r\n   * @ignore\r\n   */\n  makeStroke(strokes) {\n    const stroke = this.mainContainer.children.push(strokes.make());\n    strokes.push(stroke);\n    return stroke;\n  }\n  /**\r\n   * @ignore\r\n   */\n  makeFill(fills) {\n    const fill = this.mainContainer.children.push(fills.make());\n    fills.push(fill);\n    return fill;\n  }\n  _updateChildren() {\n    this._strokeTemplate = undefined;\n    this._fillTemplate = undefined;\n    let xAxis = this.get(\"xAxis\");\n    let yAxis = this.get(\"yAxis\");\n    if (this.isDirty(\"stroke\")) {\n      const stroke = this.get(\"stroke\");\n      this.strokes.template.set(\"stroke\", stroke);\n      const legendStroke = this._legendStroke;\n      if (legendStroke) {\n        legendStroke.states.lookup(\"default\").set(\"stroke\", stroke);\n      }\n    }\n    if (this.isDirty(\"fill\")) {\n      const fill = this.get(\"fill\");\n      this.fills.template.set(\"fill\", fill);\n      const legendFill = this._legendFill;\n      if (legendFill) {\n        legendFill.states.lookup(\"default\").set(\"fill\", fill);\n      }\n    }\n    if (this.isDirty(\"fillPattern\")) {\n      const fillPattern = this.get(\"fillPattern\");\n      this.fills.template.set(\"fillPattern\", fillPattern);\n      const legendFill = this._legendFill;\n      if (legendFill) {\n        legendFill.states.lookup(\"default\").set(\"fillPattern\", fillPattern);\n      }\n    }\n    if (this.isDirty(\"curveFactory\")) {\n      const curveFactory = this.get(\"curveFactory\");\n      if (curveFactory) {\n        this._strokeGenerator.curve(curveFactory);\n        this._fillGenerator.curve(curveFactory);\n      }\n    }\n    if (xAxis.inited && yAxis.inited) {\n      if (this._axesDirty || this._valuesDirty || this._stackDirty || this.isDirty(\"vcx\") || this.isDirty(\"vcy\") || this._sizeDirty || this.isDirty(\"connect\") || this.isDirty(\"curveFactory\")) {\n        this.fills.each(fill => {\n          fill.setPrivate(\"visible\", false);\n        });\n        this.strokes.each(fill => {\n          fill.setPrivate(\"visible\", false);\n        });\n        this.axisRanges.each(axisRange => {\n          let fills = axisRange.fills;\n          if (fills) {\n            fills.each(fill => {\n              fill.setPrivate(\"visible\", false);\n            });\n          }\n          let strokes = axisRange.strokes;\n          if (strokes) {\n            strokes.each(stroke => {\n              stroke.setPrivate(\"visible\", false);\n            });\n          }\n        });\n        let startIndex = this.startIndex();\n        let strokeTemplateField = this.strokes.template.get(\"templateField\");\n        let fillTemplateField = this.fills.template.get(\"templateField\");\n        let strokeTemplateFound = true;\n        let fillTemplateFound = true;\n        if (strokeTemplateField) {\n          strokeTemplateFound = false;\n        }\n        if (fillTemplateField) {\n          fillTemplateFound = false;\n        }\n        for (let i = startIndex - 1; i >= 0; i--) {\n          let dataItem = this.dataItems[i];\n          let hasValues = true;\n          let dataContext = dataItem.dataContext;\n          if (strokeTemplateField) {\n            if (dataContext[strokeTemplateField]) {\n              strokeTemplateFound = true;\n            }\n          }\n          if (fillTemplateField) {\n            if (dataContext[fillTemplateField]) {\n              fillTemplateFound = true;\n            }\n          }\n          $array.each(this._valueFields, field => {\n            if (!$type.isNumber(dataItem.get(field))) {\n              hasValues = false;\n            }\n          });\n          if (hasValues && strokeTemplateFound && fillTemplateFound) {\n            startIndex = i;\n            break;\n          }\n        }\n        let len = this.dataItems.length;\n        let endIndex = this.endIndex();\n        if (endIndex < len) {\n          endIndex++;\n          for (let i = endIndex; i < len; i++) {\n            let dataItem = this.dataItems[i];\n            let hasValues = true;\n            $array.each(this._valueFields, field => {\n              if (!$type.isNumber(dataItem.get(field))) {\n                hasValues = false;\n              }\n            });\n            if (hasValues) {\n              endIndex = i + 1;\n              break;\n            }\n          }\n        }\n        if (startIndex > 0) {\n          startIndex--;\n        }\n        this._endIndex = endIndex;\n        this._clearGraphics();\n        this._sindex = 0;\n        this._dindex = startIndex;\n        if (this.dataItems.length == 1) {\n          this._startSegment(0);\n        } else {\n          // this is done to avoid recursion with a lot of segments\n          while (this._dindex < endIndex - 1) {\n            this._startSegment(this._dindex);\n            this._sindex++;\n          }\n        }\n      }\n    } else {\n      this._skipped = true;\n    }\n    super._updateChildren();\n  }\n  _clearGraphics() {\n    this.strokes.clear();\n    this.fills.clear();\n    this.axisRanges.each(axisRange => {\n      axisRange.fills.clear();\n      axisRange.strokes.clear();\n    });\n  }\n  _startSegment(dataItemIndex) {\n    let endIndex = this._endIndex;\n    let currentEndIndex = endIndex;\n    const autoGapCount = this.get(\"autoGapCount\");\n    const connect = this.get(\"connect\");\n    const fill = this.makeFill(this.fills);\n    const fillTemplate = this._fillTemplate;\n    const originalTemplate = this.fills.template;\n    if (fillTemplate && fillTemplate != originalTemplate) {\n      fill.template = fillTemplate;\n    }\n    fill.setPrivate(\"visible\", true);\n    const stroke = this.makeStroke(this.strokes);\n    const strokeTemplate = this._strokeTemplate;\n    if (strokeTemplate && strokeTemplate != this.strokes.template) {\n      stroke.template = strokeTemplate;\n    }\n    stroke.setPrivate(\"visible\", true);\n    let xAxis = this.get(\"xAxis\");\n    let yAxis = this.get(\"yAxis\");\n    let baseAxis = this.get(\"baseAxis\");\n    let vcx = this.get(\"vcx\", 1);\n    let vcy = this.get(\"vcy\", 1);\n    let xField = this._xField;\n    let yField = this._yField;\n    let xOpenField = this._xOpenField;\n    let yOpenField = this._yOpenField;\n    const xOpenFieldValue = this.get(\"openValueXField\");\n    const yOpenFieldValue = this.get(\"openValueYField\");\n    if (!xOpenFieldValue) {\n      xOpenField = this._xField;\n    }\n    if (!yOpenFieldValue) {\n      yOpenField = this._yField;\n    }\n    const stacked = this.get(\"stacked\");\n    const basePosX = xAxis.basePosition();\n    const basePosY = yAxis.basePosition();\n    let baseField;\n    if (baseAxis === yAxis) {\n      baseField = this._yField;\n    } else {\n      baseField = this._xField;\n    }\n    const segments = [];\n    let points = [];\n    segments.push(points);\n    const strokeTemplateField = this.strokes.template.get(\"templateField\");\n    const fillTemplateField = this.fills.template.get(\"templateField\");\n    let locationX = this.get(\"locationX\", 0.5);\n    let locationY = this.get(\"locationY\", 0.5);\n    let openLocationX = this.get(\"openLocationX\", locationX);\n    let openLocationY = this.get(\"openLocationY\", locationY);\n    const minDistance = this.get(\"minDistance\", 0);\n    let i;\n    let fillVisible = this.fills.template.get(\"visible\");\n    if (this.axisRanges.length > 0) {\n      fillVisible = true;\n    }\n    let getOpen = false;\n    if (stacked || xOpenFieldValue || yOpenFieldValue) {\n      getOpen = true;\n    }\n    const o = {\n      points,\n      segments,\n      stacked,\n      getOpen,\n      basePosX,\n      basePosY,\n      fillVisible,\n      xField,\n      yField,\n      xOpenField,\n      yOpenField,\n      vcx,\n      vcy,\n      baseAxis,\n      xAxis,\n      yAxis,\n      locationX,\n      locationY,\n      openLocationX,\n      openLocationY,\n      minDistance\n    };\n    let rangeStrokeTemplate = this._strokeTemplate;\n    let rangeFillTemplate = this._fillTemplate;\n    for (i = dataItemIndex; i < currentEndIndex; i++) {\n      this._dindex = i;\n      const dataItem = this._dataItems[i];\n      let valueX = dataItem.get(xField);\n      let valueY = dataItem.get(yField);\n      if (valueX == null || valueY == null) {\n        if (!connect) {\n          points = [];\n          segments.push(points);\n          o.points = points;\n        }\n      } else {\n        this._getPoints(dataItem, o);\n      }\n      if (strokeTemplateField) {\n        let strokeTemplate = dataItem.dataContext[strokeTemplateField];\n        if (strokeTemplate) {\n          if (!(strokeTemplate instanceof Template)) {\n            strokeTemplate = Template.new(strokeTemplate);\n          }\n          this._strokeTemplate = strokeTemplate;\n          if (i > dataItemIndex) {\n            currentEndIndex = i;\n            break;\n          } else {\n            rangeStrokeTemplate = strokeTemplate;\n            stroke.template = strokeTemplate;\n          }\n        }\n      }\n      if (fillTemplateField) {\n        let fillTemplate = dataItem.dataContext[fillTemplateField];\n        if (fillTemplate) {\n          if (!(fillTemplate instanceof Template)) {\n            fillTemplate = Template.new(fillTemplate);\n          }\n          this._fillTemplate = fillTemplate;\n          if (i > dataItemIndex) {\n            currentEndIndex = i;\n            break;\n          } else {\n            rangeFillTemplate = fillTemplate;\n            fill.template = fillTemplate;\n          }\n        }\n      }\n      if (!connect) {\n        let nextItem = this.dataItems[i + 1];\n        if (nextItem) {\n          if (baseAxis.shouldGap(dataItem, nextItem, autoGapCount, baseField)) {\n            points = [];\n            segments.push(points);\n            o.points = points;\n          }\n        }\n      }\n    }\n    fill.setRaw(\"userData\", [dataItemIndex, i]);\n    stroke.setRaw(\"userData\", [dataItemIndex, i]);\n    if (i === endIndex) {\n      this._endLine(points, segments[0][0]);\n    }\n    if (stroke) {\n      this._drawStroke(stroke, segments);\n    }\n    if (fill) {\n      this._drawFill(fill, segments);\n    }\n    this.axisRanges.each(axisRange => {\n      const container = axisRange.container;\n      const fills = axisRange.fills;\n      const fill = this.makeFill(fills);\n      if (container) {\n        container.children.push(fill);\n      }\n      fill.setPrivate(\"visible\", true);\n      this._drawFill(fill, segments);\n      const strokes = axisRange.strokes;\n      const stroke = this.makeStroke(strokes);\n      if (container) {\n        container.children.push(stroke);\n      }\n      if (rangeStrokeTemplate && rangeStrokeTemplate != this.strokes.template) {\n        stroke.template = rangeStrokeTemplate;\n      }\n      if (rangeFillTemplate && rangeFillTemplate != this.fills.template) {\n        fill.template = rangeFillTemplate;\n      }\n      stroke.setPrivate(\"visible\", true);\n      this._drawStroke(stroke, segments);\n      fill.setRaw(\"userData\", [dataItemIndex, i]);\n      stroke.setRaw(\"userData\", [dataItemIndex, i]);\n    });\n  }\n  _getPoints(dataItem, o) {\n    let points = o.points;\n    let itemLocationX = dataItem.get(\"locationX\", o.locationX);\n    let itemLocationY = dataItem.get(\"locationY\", o.locationY);\n    const exactLocationX = this.get(\"exactLocationX\", false);\n    const exactLocationY = this.get(\"exactLocationY\", false);\n    let xPos = o.xAxis.getDataItemPositionX(dataItem, o.xField, itemLocationX, o.vcx, exactLocationX);\n    let yPos = o.yAxis.getDataItemPositionY(dataItem, o.yField, itemLocationY, o.vcy, exactLocationY);\n    if (this._shouldInclude(xPos)) {\n      const iPoint = this.getPoint(xPos, yPos);\n      const point = [iPoint.x, iPoint.y];\n      iPoint.x += this._x;\n      iPoint.y += this._y;\n      dataItem.set(\"point\", iPoint);\n      if (o.fillVisible) {\n        let xPos0 = xPos;\n        let yPos0 = yPos;\n        if (o.baseAxis === o.xAxis) {\n          yPos0 = o.basePosY;\n        } else if (o.baseAxis === o.yAxis) {\n          xPos0 = o.basePosX;\n        }\n        if (o.getOpen) {\n          let valueX = dataItem.get(o.xOpenField);\n          let valueY = dataItem.get(o.yOpenField);\n          if (valueX != null && valueY != null) {\n            let itemLocationX = dataItem.get(\"openLocationX\", o.openLocationX);\n            let itemLocationY = dataItem.get(\"openLocationY\", o.openLocationY);\n            if (o.stacked) {\n              let stackToItemX = dataItem.get(\"stackToItemX\");\n              let stackToItemY = dataItem.get(\"stackToItemY\");\n              if (stackToItemX) {\n                xPos0 = o.xAxis.getDataItemPositionX(stackToItemX, o.xField, itemLocationX, stackToItemX.component.get(\"vcx\"), exactLocationX);\n                if ($type.isNaN(xPos0)) {\n                  xPos0 = o.basePosX;\n                }\n              } else {\n                if (o.yAxis === o.baseAxis) {\n                  xPos0 = o.basePosX;\n                } else {\n                  xPos0 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX, o.vcx, exactLocationX);\n                }\n              }\n              if (stackToItemY) {\n                yPos0 = o.yAxis.getDataItemPositionY(stackToItemY, o.yField, itemLocationY, stackToItemY.component.get(\"vcy\"), exactLocationY);\n                if ($type.isNaN(yPos0)) {\n                  yPos0 = o.basePosY;\n                }\n              } else {\n                if (o.xAxis === o.baseAxis) {\n                  yPos0 = o.basePosY;\n                } else {\n                  yPos0 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY, o.vcy, exactLocationY);\n                }\n              }\n            } else {\n              xPos0 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX, o.vcx, exactLocationX);\n              yPos0 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY, o.vcy, exactLocationY);\n            }\n          }\n        }\n        let closeIPoint = this.getPoint(xPos0, yPos0);\n        point[2] = closeIPoint.x;\n        point[3] = closeIPoint.y;\n      }\n      if (o.minDistance > 0) {\n        const p0 = point[0];\n        const p1 = point[1];\n        const p2 = point[2];\n        const p3 = point[3];\n        const prev = this._previousPoint;\n        const pp0 = prev[0];\n        const pp1 = prev[1];\n        const pp2 = prev[2];\n        const pp3 = prev[3];\n        if (Math.hypot(p0 - pp0, p1 - pp1) > o.minDistance || p2 && p3 && Math.hypot(p2 - pp2, p3 - pp3) > o.minDistance) {\n          points.push(point);\n          this._previousPoint = point;\n        }\n      } else {\n        points.push(point);\n      }\n    }\n  }\n  _endLine(_points, _firstPoint) {}\n  _drawStroke(graphics, segments) {\n    if (graphics.get(\"visible\") && !graphics.get(\"forceHidden\")) {\n      graphics.set(\"draw\", display => {\n        $array.each(segments, segment => {\n          this._strokeGenerator.context(display);\n          this._strokeGenerator(segment);\n        });\n      });\n    }\n  }\n  _drawFill(graphics, segments) {\n    if (graphics.get(\"visible\") && !graphics.get(\"forceHidden\")) {\n      graphics.set(\"draw\", display => {\n        $array.each(segments, segment => {\n          this._fillGenerator.context(display);\n          this._fillGenerator(segment);\n        });\n      });\n    }\n  }\n  _processAxisRange(axisRange) {\n    super._processAxisRange(axisRange);\n    axisRange.fills = new ListTemplate(Template.new({}), () => Graphics._new(this._root, {\n      themeTags: $utils.mergeTags(axisRange.fills.template.get(\"themeTags\", []), [\"line\", \"series\", \"fill\"])\n    }, [this.fills.template, axisRange.fills.template]));\n    axisRange.strokes = new ListTemplate(Template.new({}), () => Graphics._new(this._root, {\n      themeTags: $utils.mergeTags(axisRange.strokes.template.get(\"themeTags\", []), [\"line\", \"series\", \"stroke\"])\n    }, [this.strokes.template, axisRange.strokes.template]));\n  }\n  /**\r\n   * @ignore\r\n   */\n  createLegendMarker(_dataItem) {\n    const legendDataItem = this.get(\"legendDataItem\");\n    if (legendDataItem) {\n      const marker = legendDataItem.get(\"marker\");\n      const markerRectangle = legendDataItem.get(\"markerRectangle\");\n      if (markerRectangle) {\n        markerRectangle.setPrivate(\"visible\", false);\n      }\n      marker.set(\"background\", Rectangle.new(marker._root, {\n        fillOpacity: 0,\n        fill: color(0x000000)\n      }));\n      const legendStroke = marker.children.push(Graphics._new(marker._root, {\n        themeTags: [\"line\", \"series\", \"legend\", \"marker\", \"stroke\"],\n        interactive: false\n      }, [this.strokes.template]));\n      this._legendStroke = legendStroke;\n      const legendFill = marker.children.push(Graphics._new(marker._root, {\n        themeTags: [\"line\", \"series\", \"legend\", \"marker\", \"fill\"]\n      }, [this.fills.template]));\n      this._legendFill = legendFill;\n      const disabledColor = this._root.interfaceColors.get(\"disabled\");\n      legendStroke.states.create(\"disabled\", {\n        fill: disabledColor,\n        stroke: disabledColor\n      });\n      legendFill.states.create(\"disabled\", {\n        fill: disabledColor,\n        stroke: disabledColor\n      });\n      if (this.bullets.length > 0) {\n        const bulletFunction = this.bullets.getIndex(0);\n        if (bulletFunction) {\n          const bullet = bulletFunction(marker._root, this, new DataItem(this, {\n            legend: true\n          }, {}));\n          if (bullet) {\n            const sprite = bullet.get(\"sprite\");\n            if (sprite instanceof Graphics) {\n              sprite.states.create(\"disabled\", {\n                fill: disabledColor,\n                stroke: disabledColor\n              });\n            }\n            if (sprite) {\n              sprite.setAll({\n                tooltipText: undefined,\n                tooltipHTML: undefined,\n                focusable: undefined,\n                focusableGroup: undefined,\n                ariaLabel: undefined\n              });\n              marker.children.push(sprite);\n              sprite.setAll({\n                x: marker.width() / 2,\n                y: marker.height() / 2\n              });\n              marker.events.on(\"boundschanged\", () => {\n                sprite.setAll({\n                  x: marker.width() / 2,\n                  y: marker.height() / 2\n                });\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n}\nObject.defineProperty(LineSeries, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"LineSeries\"\n});\nObject.defineProperty(LineSeries, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: XYSeries.classNames.concat([LineSeries.className])\n});\n", "/**\r\n * @ignore\r\n */\nexport class MonotoneYTension {\n  constructor(context, tension) {\n    Object.defineProperty(this, \"_line\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_point\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_context\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_x0\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_x1\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_y0\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_y1\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_t0\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_tension\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    this._context = context;\n    this._tension = tension;\n  }\n  areaStart() {\n    this._line = 0;\n  }\n  areaEnd() {\n    this._line = NaN;\n  }\n  lineStart() {\n    this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;\n    this._point = 0;\n  }\n  lineEnd() {\n    switch (this._point) {\n      case 2:\n        this._context.lineTo(this._x1, this._y1);\n        break;\n      case 3:\n        point(this, this._t0, slope2(this, this._t0));\n        break;\n    }\n    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();\n    this._line = 1 - this._line;\n  }\n  point(x, y) {\n    [x, y] = [y, x];\n    let t1 = NaN;\n    x = +x, y = +y;\n    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.\n    switch (this._point) {\n      case 0:\n        this._point = 1;\n        this._line ? this._context.lineTo(y, x) : this._context.moveTo(y, x);\n        break;\n      case 1:\n        this._point = 2;\n        break;\n      case 2:\n        this._point = 3;\n        point(this, slope2(this, t1 = slope3(this, x, y)), t1);\n        break;\n      default:\n        point(this, this._t0, t1 = slope3(this, x, y));\n        break;\n    }\n    this._x0 = this._x1, this._x1 = x;\n    this._y0 = this._y1, this._y1 = y;\n    this._t0 = t1;\n  }\n}\n/**\r\n * @ignore\r\n */\nexport function curveMonotoneYTension(tension) {\n  function monotoneYTension(context) {\n    return new MonotoneYTension(context, tension);\n  }\n  monotoneYTension.tension = function (tension) {\n    return curveMonotoneYTension(+tension);\n  };\n  return monotoneYTension;\n}\n/**\r\n * @ignore\r\n */\nfunction sign(x) {\n  return x < 0 ? -1 : 1;\n}\n/**\r\n * @ignore\r\n */\nfunction slope3(that, x2, y2) {\n  let h0 = that._x1 - that._x0;\n  let h1 = x2 - that._x1;\n  let s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0);\n  let s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0);\n  let p = (s0 * h1 + s1 * h0) / (h0 + h1);\n  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\n}\n/**\r\n * @ignore\r\n */\nfunction slope2(that, t) {\n  let h = that._x1 - that._x0;\n  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;\n}\n/**\r\n * @ignore\r\n */\nfunction point(that, t0, t1) {\n  let x0 = that._x0,\n    y0 = that._y0,\n    x1 = that._x1,\n    y1 = that._y1,\n    dx = (x1 - x0) / 1.5 * (1 - that._tension);\n  that._context.bezierCurveTo(y0 + dx * t0, x0 + dx, y1 - dx * t1, x1 - dx, y1, x1);\n}\n", "import { LineSeries } from \"./LineSeries\";\nimport { curveMonotoneYTension } from \"../../../core/render/MonotoneYTension\";\n/**\r\n * Smoothed line series suitable for vertical plots.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/smoothed-series/} for more info\r\n */\nexport class SmoothedYLineSeries extends LineSeries {\n  _afterNew() {\n    this._setDefault(\"curveFactory\", curveMonotoneYTension(this.get(\"tension\", 0.5)));\n    super._afterNew();\n  }\n  _updateChildren() {\n    if (this.isDirty(\"tension\")) {\n      this.set(\"curveFactory\", curveMonotoneYTension(this.get(\"tension\", 0.5)));\n      this._valuesDirty = true;\n    }\n    super._updateChildren();\n  }\n}\nObject.defineProperty(SmoothedYLineSeries, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"SmoothedYLineSeries\"\n});\nObject.defineProperty(SmoothedYLineSeries, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: LineSeries.classNames.concat([SmoothedYLineSeries.className])\n});\n", "/**\r\n * @ignore\r\n */\nexport class MonotoneXTension {\n  constructor(context, tension) {\n    Object.defineProperty(this, \"_line\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_point\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_context\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_x0\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_x1\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_y0\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_y1\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_t0\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"_tension\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    this._context = context;\n    this._tension = tension;\n  }\n  areaStart() {\n    this._line = 0;\n  }\n  areaEnd() {\n    this._line = NaN;\n  }\n  lineStart() {\n    this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;\n    this._point = 0;\n  }\n  lineEnd() {\n    switch (this._point) {\n      case 2:\n        this._context.lineTo(this._x1, this._y1);\n        break;\n      case 3:\n        point(this, this._t0, slope2(this, this._t0));\n        break;\n    }\n    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();\n    this._line = 1 - this._line;\n  }\n  point(x, y) {\n    let t1 = NaN;\n    x = +x, y = +y;\n    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.\n    switch (this._point) {\n      case 0:\n        this._point = 1;\n        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);\n        break;\n      case 1:\n        this._point = 2;\n        break;\n      case 2:\n        this._point = 3;\n        point(this, slope2(this, t1 = slope3(this, x, y)), t1);\n        break;\n      default:\n        point(this, this._t0, t1 = slope3(this, x, y));\n        break;\n    }\n    this._x0 = this._x1, this._x1 = x;\n    this._y0 = this._y1, this._y1 = y;\n    this._t0 = t1;\n  }\n}\n/**\r\n * @ignore\r\n */\nexport function curveMonotoneXTension(tension) {\n  function monotoneXTension(context) {\n    return new MonotoneXTension(context, tension);\n  }\n  return monotoneXTension;\n}\n/**\r\n * @ignore\r\n */\nfunction sign(x) {\n  return x < 0 ? -1 : 1;\n}\n/**\r\n * @ignore\r\n */\nfunction slope3(that, x2, y2) {\n  let h0 = that._x1 - that._x0;\n  let h1 = x2 - that._x1;\n  let s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0);\n  let s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0);\n  let p = (s0 * h1 + s1 * h0) / (h0 + h1);\n  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\n}\n/**\r\n * @ignore\r\n */\nfunction slope2(that, t) {\n  let h = that._x1 - that._x0;\n  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;\n}\n/**\r\n * @ignore\r\n */\nfunction point(that, t0, t1) {\n  let x0 = that._x0,\n    y0 = that._y0,\n    x1 = that._x1,\n    y1 = that._y1,\n    dx = (x1 - x0) / 1.5 * (1 - that._tension);\n  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);\n}\n", "import { LineSeries } from \"./LineSeries\";\nimport { curveMonotoneXTension } from \"../../../core/render/MonotoneXTension\";\n/**\r\n * Smoothed line series suitable for horizontal plots.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/smoothed-series/} for more info\r\n */\nexport class SmoothedXLineSeries extends LineSeries {\n  _afterNew() {\n    this._setDefault(\"curveFactory\", curveMonotoneXTension(this.get(\"tension\", 0.5)));\n    super._afterNew();\n  }\n  _updateChildren() {\n    if (this.isDirty(\"tension\")) {\n      this.set(\"curveFactory\", curveMonotoneXTension(this.get(\"tension\", 0.5)));\n      this._valuesDirty = true;\n    }\n    super._updateChildren();\n  }\n}\nObject.defineProperty(SmoothedXLineSeries, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"SmoothedXLineSeries\"\n});\nObject.defineProperty(SmoothedXLineSeries, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: LineSeries.classNames.concat([SmoothedXLineSeries.className])\n});\n", "import { LineSeries } from \"./LineSeries\";\nimport { curveCardinal } from \"d3-shape\";\n/**\r\n * Smoothed line series suitable for XY (scatter) charts\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/series/smoothed-series/} for more info\r\n */\nexport class SmoothedXYLineSeries extends LineSeries {\n  _afterNew() {\n    this._setDefault(\"curveFactory\", curveCardinal.tension(this.get(\"tension\", 0.5)));\n    super._afterNew();\n  }\n  _updateChildren() {\n    if (this.isDirty(\"tension\")) {\n      this.set(\"curveFactory\", curveCardinal.tension(this.get(\"tension\", 0.5)));\n      this._valuesDirty = true;\n    }\n    super._updateChildren();\n  }\n}\nObject.defineProperty(SmoothedXYLineSeries, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"SmoothedXYLineSeries\"\n});\nObject.defineProperty(SmoothedXYLineSeries, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: LineSeries.classNames.concat([SmoothedXYLineSeries.className])\n});\n", "import { LineSeries } from \"./LineSeries\";\nimport { p100 } from \"../../../core/util/Percent\";\nimport { curveStepAfter } from \"d3-shape\";\nexport class StepLineSeries extends LineSeries {\n  _afterNew() {\n    this._setDefault(\"curveFactory\", curveStepAfter);\n    super._afterNew();\n  }\n  _getPoints(dataItem, o) {\n    let points = o.points;\n    let width = this.get(\"stepWidth\", p100).value / 2;\n    let itemLocationX0 = dataItem.get(\"locationX\", o.locationX);\n    let itemLocationY0 = dataItem.get(\"locationY\", o.locationY);\n    let itemLocationX1 = itemLocationX0;\n    let itemLocationY1 = itemLocationY0;\n    if (o.baseAxis === o.xAxis) {\n      itemLocationX0 -= width;\n      itemLocationX1 += width;\n    } else if (o.baseAxis === o.yAxis) {\n      itemLocationY0 -= width;\n      itemLocationY1 += width;\n    }\n    let xPos0 = o.xAxis.getDataItemPositionX(dataItem, o.xField, itemLocationX0, o.vcx);\n    let yPos0 = o.yAxis.getDataItemPositionY(dataItem, o.yField, itemLocationY0, o.vcy);\n    let xPos1 = o.xAxis.getDataItemPositionX(dataItem, o.xField, itemLocationX1, o.vcx);\n    let yPos1 = o.yAxis.getDataItemPositionY(dataItem, o.yField, itemLocationY1, o.vcy);\n    if (this._shouldInclude(xPos0)) {\n      const iPoint0 = this.getPoint(xPos0, yPos0);\n      const point0 = [iPoint0.x, iPoint0.y];\n      const iPoint1 = this.getPoint(xPos1, yPos1);\n      const point1 = [iPoint1.x, iPoint1.y];\n      if (o.fillVisible) {\n        let xOpenPos0 = xPos0;\n        let yOpenPos0 = yPos0;\n        let xOpenPos1 = xPos1;\n        let yOpenPos1 = yPos1;\n        if (o.baseAxis === o.xAxis) {\n          yOpenPos0 = o.basePosY;\n          yOpenPos1 = o.basePosY;\n        } else if (o.baseAxis === o.yAxis) {\n          xOpenPos0 = o.basePosX;\n          xOpenPos1 = o.basePosX;\n        }\n        if (o.getOpen) {\n          let valueX = dataItem.get(o.xOpenField);\n          let valueY = dataItem.get(o.yOpenField);\n          if (valueX != null && valueY != null) {\n            itemLocationX0 = dataItem.get(\"openLocationX\", o.openLocationX);\n            itemLocationY0 = dataItem.get(\"openLocationY\", o.openLocationY);\n            itemLocationX1 = itemLocationX0;\n            itemLocationY1 = itemLocationY0;\n            if (o.baseAxis === o.xAxis) {\n              itemLocationX0 -= width;\n              itemLocationX1 += width;\n            } else if (o.baseAxis === o.yAxis) {\n              itemLocationY0 -= width;\n              itemLocationY1 += width;\n            }\n            if (o.stacked) {\n              let stackToItemX = dataItem.get(\"stackToItemX\");\n              let stackToItemY = dataItem.get(\"stackToItemY\");\n              if (stackToItemX) {\n                xOpenPos0 = o.xAxis.getDataItemPositionX(stackToItemX, o.xField, itemLocationX0, stackToItemX.component.get(\"vcx\"));\n                xOpenPos1 = o.xAxis.getDataItemPositionX(stackToItemX, o.xField, itemLocationX1, stackToItemX.component.get(\"vcx\"));\n              } else {\n                if (o.yAxis === o.baseAxis) {\n                  xOpenPos0 = o.basePosX;\n                  xOpenPos1 = o.basePosX;\n                } else if (o.baseAxis === o.yAxis) {\n                  xOpenPos0 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX0, o.vcx);\n                  xOpenPos1 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX1, o.vcx);\n                }\n              }\n              if (stackToItemY) {\n                yOpenPos0 = o.yAxis.getDataItemPositionY(stackToItemY, o.yField, itemLocationY0, stackToItemY.component.get(\"vcy\"));\n                yOpenPos1 = o.yAxis.getDataItemPositionY(stackToItemY, o.yField, itemLocationY1, stackToItemY.component.get(\"vcy\"));\n              } else {\n                if (o.xAxis === o.baseAxis) {\n                  yOpenPos0 = o.basePosY;\n                  yOpenPos1 = o.basePosY;\n                } else if (o.baseAxis === o.yAxis) {\n                  yOpenPos0 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY0, o.vcy);\n                  yOpenPos1 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY1, o.vcy);\n                }\n              }\n            } else {\n              xOpenPos0 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX0, o.vcx);\n              yOpenPos0 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY0, o.vcy);\n              xOpenPos1 = o.xAxis.getDataItemPositionX(dataItem, o.xOpenField, itemLocationX1, o.vcx);\n              yOpenPos1 = o.yAxis.getDataItemPositionY(dataItem, o.yOpenField, itemLocationY1, o.vcy);\n            }\n          }\n        }\n        let closeIPoint0 = this.getPoint(xOpenPos0, yOpenPos0);\n        let closeIPoint1 = this.getPoint(xOpenPos1, yOpenPos1);\n        point0[2] = closeIPoint0.x;\n        point0[3] = closeIPoint0.y;\n        point1[2] = closeIPoint1.x;\n        point1[3] = closeIPoint1.y;\n      }\n      points.push(point0);\n      points.push(point1);\n      dataItem.set(\"point\", {\n        x: point0[0] + (point1[0] - point0[0]) / 2,\n        y: point0[1] + (point1[1] - point0[1]) / 2\n      });\n    }\n    if (this.get(\"noRisers\")) {\n      o.points = [];\n      o.segments.push(points);\n    }\n  }\n}\nObject.defineProperty(StepLineSeries, \"className\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: \"StepLineSeries\"\n});\nObject.defineProperty(StepLineSeries, \"classNames\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: LineSeries.classNames.concat([StepLineSeries.className])\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaO,IAAM,sBAAN,cAAkC,MAAM;AAAA,EAC7C,oBAAoB;AAClB,UAAM,kBAAkB;AACxB,UAAM,KAAK,KAAK,MAAM;AACtB,UAAM,WAAW,KAAK,MAAM;AAC5B,UAAM,IAAI,KAAK,KAAK,KAAK,IAAI;AAM7B,MAAE,SAAS,EAAE,OAAO;AAAA,MAClB,QAAQ,SAAS,IAAI,KAAK,OAAO,CAAC,CAAC;AAAA,MACnC,aAAa;AAAA,MACb,cAAc;AAAA,MACd,YAAY;AAAA,MACZ,eAAe;AAAA,MACf,MAAM;AAAA,MACN,MAAM;AAAA,MACN,WAAW;AAAA,MACX,iBAAiB;AAAA,MACjB,YAAY;AAAA,MACZ,YAAY;AAAA,IACd,CAAC;AACD,MAAE,UAAU,EAAE,OAAO;AAAA,MACnB,iBAAiB;AAAA,IACnB,CAAC;AACD,MAAE,aAAa,CAAC,kBAAkB,MAAM,YAAY,CAAC,EAAE,OAAO;AAAA,MAC5D,MAAM,MAAM,QAAQ,CAAQ;AAAA,MAC5B,aAAa;AAAA,IACf,CAAC;AAMD,MAAE,WAAW,CAAC,aAAa,OAAO,CAAC,EAAE,OAAO;AAAA,MAC1C,eAAe;AAAA,MACf,aAAa;AAAA,MACb,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,QAAQ,SAAS,IAAI,KAAK,OAAO;AAAA,QAC/B,YAAY;AAAA,MACd,CAAC;AAAA,IACH,CAAC;AACD;AACE,YAAM,OAAO,EAAE,YAAY,CAAC,aAAa,SAAS,CAAC;AACnD,WAAK,OAAO;AAAA,QACV,aAAa;AAAA,MACf,CAAC;AACD,eAAS,MAAM,QAAQ,IAAI,YAAY;AAAA,IACzC;AAEA,MAAE,oBAAoB,CAAC,MAAM,aAAa,OAAO,CAAC,EAAE,OAAO;AAAA,MACzD,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,aAAa;AAAA,MACb,WAAW;AAAA,IACb,CAAC;AACD,MAAE,oBAAoB,CAAC,MAAM,aAAa,OAAO,CAAC,EAAE,OAAO,OAAO,SAAS;AAAA,MACzE,aAAa;AAAA,IACf,CAAC;AACD,MAAE,oBAAoB,CAAC,MAAM,aAAa,SAAS,YAAY,CAAC,EAAE,OAAO;AAAA,MACvE,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,IAClB,CAAC;AACD,MAAE,oBAAoB,CAAC,MAAM,aAAa,SAAS,cAAc,UAAU,QAAQ,CAAC,EAAE,OAAO;AAAA,MAC3F,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,IAClB,CAAC;AACD,MAAE,iBAAiB,CAAC,MAAM,SAAS,WAAW,CAAC,EAAE,OAAO;AAAA,MACtD,eAAe;AAAA,MACf,QAAQ;AAAA,IACV,CAAC;AACD,MAAE,iBAAiB,CAAC,MAAM,SAAS,WAAW,CAAC,EAAE,OAAO;AAAA,MACtD,eAAe;AAAA,MACf,QAAQ;AAAA,MACR,iBAAiB;AAAA,IACnB,CAAC;AACD,MAAE,aAAa,CAAC,MAAM,aAAa,GAAG,CAAC,EAAE,OAAO;AAAA,MAC9C,SAAS;AAAA,MACT,SAAS;AAAA,MACT,aAAa;AAAA,MACb,aAAa;AAAA,MACb,UAAU;AAAA,IACZ,CAAC;AACD,MAAE,aAAa,CAAC,UAAU,CAAC,EAAE,OAAO;AAAA,MAClC,MAAM;AAAA,MACN,cAAc;AAAA,IAChB,CAAC;AACD,MAAE,aAAa,CAAC,GAAG,CAAC,EAAE,OAAO;AAAA,MAC3B,SAAS;AAAA,IACX,CAAC;AACD,MAAE,aAAa,CAAC,KAAK,QAAQ,CAAC,EAAE,OAAO;AAAA,MACrC,SAAS;AAAA,IACX,CAAC;AACD,MAAE,aAAa,CAAC,KAAK,UAAU,UAAU,CAAC,EAAE,OAAO;AAAA,MACjD,SAAS;AAAA,IACX,CAAC;AACD,MAAE,aAAa,CAAC,KAAK,UAAU,CAAC,EAAE,OAAO;AAAA,MACvC,SAAS;AAAA,IACX,CAAC;AACD,MAAE,aAAa,CAAC,GAAG,CAAC,EAAE,OAAO;AAAA,MAC3B,SAAS;AAAA,IACX,CAAC;AACD,MAAE,aAAa,CAAC,KAAK,QAAQ,CAAC,EAAE,OAAO;AAAA,MACrC,SAAS;AAAA,IACX,CAAC;AACD,MAAE,aAAa,CAAC,KAAK,UAAU,UAAU,CAAC,EAAE,OAAO;AAAA,MACjD,SAAS;AAAA,IACX,CAAC;AACD,MAAE,aAAa,CAAC,KAAK,UAAU,CAAC,EAAE,OAAO;AAAA,MACvC,SAAS;AAAA,IACX,CAAC;AACD,MAAE,aAAa,CAAC,OAAO,CAAC,EAAE,OAAO;AAAA,MAC/B,UAAU;AAAA,IACZ,CAAC;AACD,MAAE,aAAa,CAAC,MAAM,aAAa,GAAG,CAAC,EAAE,OAAO;AAAA,MAC9C,SAAS;AAAA,IACX,CAAC;AAED,MAAE,QAAQ,CAAC,MAAM,aAAa,GAAG,CAAC,EAAE,OAAO;AAAA,MACzC,SAAS;AAAA,IACX,CAAC;AAED,MAAE,QAAQ,CAAC,MAAM,aAAa,GAAG,CAAC,EAAE,OAAO;AAAA,MACzC,SAAS;AAAA,IACX,CAAC;AAMD,MAAE,UAAU,EAAE,OAAO;AAAA,MACnB,UAAU;AAAA,MACV,OAAO;AAAA,MACP,YAAY;AAAA,MACZ,gBAAgB;AAAA,MAChB,eAAe;AAAA,IACjB,CAAC;AACD;AACE,YAAM,OAAO,EAAE,QAAQ,CAAC,UAAU,GAAG,CAAC;AACtC,WAAK,OAAO;AAAA,QACV,eAAe;AAAA,QACf,eAAe;AAAA,QACf,iBAAiB,CAAC,GAAG,CAAC;AAAA,QACtB,MAAM;AAAA,QACN,WAAW,SAAS,UAAU,6CAA6C;AAAA,MAC7E,CAAC;AACD,eAAS,MAAM,UAAU,IAAI,uBAAuB;AAAA,IACtD;AACA;AACE,YAAM,OAAO,EAAE,QAAQ,CAAC,UAAU,GAAG,CAAC;AACtC,WAAK,OAAO;AAAA,QACV,eAAe;AAAA,QACf,eAAe;AAAA,QACf,iBAAiB,CAAC,GAAG,CAAC;AAAA,QACtB,MAAM;AAAA,QACN,WAAW,SAAS,UAAU,0CAA0C;AAAA,MAC1E,CAAC;AACD,eAAS,MAAM,UAAU,IAAI,uBAAuB;AAAA,IACtD;AACA;AACE,YAAM,OAAO,EAAE,YAAY,CAAC,UAAU,WAAW,CAAC;AAClD,WAAK,OAAO;AAAA,QACV,aAAa;AAAA,MACf,CAAC;AACD,eAAS,MAAM,QAAQ,IAAI,uBAAuB;AAAA,IACpD;AAMA,MAAE,MAAM,EAAE,OAAO;AAAA,MACf,OAAO;AAAA,MACP,KAAK;AAAA,MACL,cAAc;AAAA,MACd,cAAc;AAAA,MACd,eAAe;AAAA,MACf,cAAc;AAAA,MACd,aAAa;AAAA,MACb,iBAAiB;AAAA,MACjB,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO;AAAA,MACP,OAAO;AAAA,MACP,aAAa;AAAA,IACf,CAAC;AACD,MAAE,WAAW,EAAE,OAAO;AAAA,MACpB,UAAU;AAAA,MACV,eAAe;AAAA,MACf,SAAS;AAAA,MACT,SAAS;AAAA,MACT,YAAY;AAAA,MACZ,eAAe;AAAA,MACf,aAAa;AAAA,MACb,cAAc;AAAA,IAChB,CAAC;AAQD,MAAE,aAAa,CAAC,QAAQ,QAAQ,CAAC,EAAE,OAAO;AAAA,MACxC,OAAO;AAAA,IACT,CAAC;AACD,MAAE,aAAa,CAAC,QAAQ,UAAU,YAAY,CAAC,EAAE,OAAO;AAAA,MACtD,OAAO;AAAA,IACT,CAAC;AACD;AACE,YAAM,OAAO,EAAE,cAAc;AAC7B,WAAK,OAAO;AAAA,QACV,OAAO;AAAA,QACP,eAAe;AAAA,MACjB,CAAC;AACD,eAAS,MAAM,UAAU,IAAI,MAAM;AAAA,IACrC;AACA,MAAE,eAAe,EAAE,OAAO;AAAA,MACxB,iBAAiB;AAAA,MACjB,UAAU;AAAA,MACV,UAAU;AAAA,MACV,mBAAmB;AAAA,MACnB,iBAAiB;AAAA,MACjB,OAAO;AAAA,IACT,CAAC;AACD,MAAE,eAAe,EAAE,OAAO;AAAA,MACxB,iBAAiB;AAAA,MACjB,UAAU;AAAA,MACV,UAAU;AAAA,MACV,mBAAmB;AAAA,MACnB,iBAAiB;AAAA,MACjB,QAAQ;AAAA,IACV,CAAC;AACD;AACE,YAAM,OAAO,EAAE,aAAa,CAAC,QAAQ,OAAO,CAAC;AAC7C,WAAK,OAAO;AAAA,QACV,aAAa;AAAA,MACf,CAAC;AACD,eAAS,MAAM,QAAQ,IAAI,uBAAuB;AAClD,WAAK,OAAO,OAAO,SAAS;AAAA,QAC1B,aAAa;AAAA,MACf,CAAC;AAAA,IACH;AACA,MAAE,aAAa,CAAC,QAAQ,SAAS,GAAG,CAAC,EAAE,OAAO;AAAA,MAC5C,iBAAiB;AAAA,IACnB,CAAC;AACD,MAAE,aAAa,CAAC,QAAQ,SAAS,GAAG,CAAC,EAAE,OAAO;AAAA,MAC5C,iBAAiB;AAAA,IACnB,CAAC;AACD;AACE,YAAM,OAAO,EAAE,MAAM;AACrB,WAAK,OAAO;AAAA,QACV,UAAU;AAAA,QACV,eAAe;AAAA,QACf,OAAO;AAAA,MACT,CAAC;AACD,eAAS,MAAM,UAAU,IAAI,MAAM;AAAA,IACrC;AACA;AACE,YAAM,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC;AAChC,WAAK,OAAO;AAAA,QACV,UAAU;AAAA,QACV,eAAe;AAAA,QACf,OAAO;AAAA,MACT,CAAC;AACD,eAAS,MAAM,UAAU,IAAI,MAAM;AAAA,IACrC;AACA,MAAE,QAAQ,CAAC,MAAM,CAAC,EAAE,OAAO;AAAA,MACzB,eAAe;AAAA,IACjB,CAAC;AACD;AACE,YAAM,OAAO,EAAE,YAAY,CAAC,QAAQ,MAAM,CAAC;AAC3C,WAAK,OAAO;AAAA,QACV,SAAS;AAAA,QACT,YAAY;AAAA,QACZ,UAAU;AAAA,QACV,aAAa;AAAA,MACf,CAAC;AACD,eAAS,MAAM,QAAQ,IAAI,uBAAuB;AAAA,IACpD;AACA,MAAE,YAAY,CAAC,QAAQ,QAAQ,OAAO,CAAC,EAAE,OAAO;AAAA,MAC9C,YAAY;AAAA,IACd,CAAC;AAED,MAAE,YAAY,CAAC,UAAU,QAAQ,OAAO,CAAC,EAAE,OAAO;AAAA,MAChD,SAAS;AAAA,MACT,YAAY;AAAA,IACd,CAAC;AACD,MAAE,QAAQ,CAAC,UAAU,OAAO,CAAC,EAAE,OAAO;AAAA,MACpC,SAAS;AAAA,IACX,CAAC;AACD,MAAE,YAAY,CAAC,UAAU,OAAO,CAAC,EAAE,OAAO;AAAA,MACxC,SAAS;AAAA,IACX,CAAC;AACD,MAAE,aAAa,CAAC,UAAU,OAAO,CAAC,EAAE,OAAO;AAAA,MACzC,SAAS;AAAA,IACX,CAAC;AACD;AACE,YAAM,OAAO,EAAE,UAAU;AACzB,WAAK,OAAO;AAAA,QACV,UAAU;AAAA,QACV,eAAe;AAAA,QACf,eAAe;AAAA,QACf,YAAY;AAAA,QACZ,UAAU;AAAA,QACV,SAAS;AAAA,MACX,CAAC;AACD,eAAS,MAAM,UAAU,IAAI,MAAM;AAAA,IACrC;AACA,MAAE,cAAc,EAAE,OAAO;AAAA,MACvB,eAAe;AAAA,MACf,aAAa;AAAA,MACb,UAAU,CAAC,UAAU,UAAU;AAC7B,cAAM,WAAW,SAAS,IAAI,UAAU;AACxC,YAAI,UAAU;AACZ,cAAI,CAAO,SAAS,KAAK,KAAK,QAAQ,KAAK,GAAG;AAC5C,qBAAS,WAAW,WAAW,IAAI;AAAA,UACrC,OAAO;AACL,qBAAS,WAAW,WAAW,KAAK;AAAA,UACtC;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AACD,UAAM,gBAAgB,CAAC;AAAA,MACrcAAc;AAAA,MAClB,eAAe,SAAS,UAAU,mBAAmB;AAAA,MACrD,UAAU,SAAS,UAAU,cAAc;AAAA,MAC3C,UAAU,SAAS,UAAU,cAAc;AAAA,MAC3C,QAAQ,SAAS,UAAU,YAAY;AAAA,MACvC,OAAO,SAAS,UAAU,WAAW;AAAA,MACrC,QAAQ,SAAS,UAAU,WAAW;AAAA,MACtC,SAAS,SAAS,UAAU,aAAa;AAAA,MACzC,QAAQ,SAAS,UAAU,YAAY;AAAA,IACzC;AACA,UAAM,0BAA0B;AAAA,MAC9B,eAAe,SAAS,UAAU,mBAAmB;AAAA,MACrD,UAAU,SAAS,UAAU,cAAc;AAAA,MAC3C,UAAU,SAAS,UAAU,cAAc;AAAA,MAC3C,QAAQ,SAAS,UAAU,WAAW;AAAA,MACtC,OAAO,SAAS,UAAU,WAAW;AAAA,MACrC,QAAQ,SAAS,UAAU,WAAW;AAAA,MACtC,SAAS,SAAS,UAAU,aAAa,IAAI,MAAM,SAAS,UAAU,YAAY;AAAA,MAClF,QAAQ,SAAS,UAAU,YAAY;AAAA,IACzC;AACA,UAAM,qBAAqB;AAAA,MACzB,eAAe,SAAS,UAAU,wBAAwB;AAAA,MAC1D,UAAU,SAAS,UAAU,mBAAmB;AAAA,MAChD,UAAU,SAAS,UAAU,mBAAmB;AAAA,MAChD,QAAQ,SAAS,UAAU,iBAAiB;AAAA,MAC5C,OAAO,SAAS,UAAU,gBAAgB;AAAA,MAC1C,QAAQ,SAAS,UAAU,iBAAiB;AAAA,MAC5C,SAAS,SAAS,UAAU,kBAAkB;AAAA,MAC9C,QAAQ,SAAS,UAAU,YAAY;AAAA,IACzC;AACA,MAAE,kBAAkB,EAAE,OAAO;AAAA,MAC3B,gBAAgB;AAAA,MAChB,eAAsB,KAAK,aAAa;AAAA,MACxC,aAAqBA,MAAK,WAAW;AAAA,MACrC,yBAAiCA,MAAK,uBAAuB;AAAA,IAC/D,CAAC;AACD,MAAE,UAAU,EAAE,OAAO;AAAA,MACnB,eAAe;AAAA,MACf,cAAc;AAAA,MACd,eAAe;AAAA,MACf,aAAa;AAAA,MACb,gBAAgB;AAAA,MAChB,WAAW;AAAA,MACX,YAAY;AAAA,MACZ,eAAsB,KAAK,aAAa;AAAA,MACxC,aAAqBA,MAAK,WAAW;AAAA,MACrC,yBAAiCA,MAAK,uBAAuB;AAAA,MAC7D;AAAA,MACA,gBAAgB,CAAC;AAAA,QACfcAAY;AACpB,cAAM,WAAW,SAAS,IAAI,UAAU;AACxC,YAAI,UAAU;AACZ,gBAAM,OAAO,SAAS;AACtB,gBAAM,QAAQ,SAAS,IAAI,OAAO;AAClC,gBAAM,WAAW,SAAS,IAAI,UAAU;AACxC,gBAAM,mBAAmB,KAAK,iBAAiB;AAC/C,gBAAM,eAAe,KAAK,WAAW,cAAc;AACnD,gBAAM,eAAe,KAAK,WAAW,gBAAgB,YAAY;AACjE,cAAIC,OAAM,KAAK,WAAW,OAAO,CAAC;AAClC,UAAAA,OAAYC,OAAM,IAAI,KAAKD,IAAG,GAAG,aAAa,UAAU,aAAa,OAAO,KAAK,MAAM,OAAO,gBAAgB,KAAK,MAAM,KAAK,QAAW,KAAK,MAAM,QAAQ,EAAE,QAAQ;AACtK,cAAI,SAAS,QAAQ,YAAY,MAAM;AACrC,kBAAM,MAAM,KAAK,MAAM,KAAK,OAAO,QAAQA,QAAO,gBAAgB,CAAC,IAAI;AACvE,gBAAI,OAAO,KAAK,MAAM,GAAG,GAAG;AAC1B,uBAAS,WAAW,WAAW,IAAI;AAAA,YACrC,OAAO;AACL,uBAAS,WAAW,WAAW,KAAK;AAAA,YACtC;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AACD,MAAE,iBAAiB,EAAE,OAAO;AAAA,MAC1B,UAAU,cAAY;AACpB,cAAM,WAAW,SAAS,IAAI,UAAU;AACxC,YAAI,UAAU;AACZ,gBAAM,QAAQ,SAAS,IAAI,OAAO;AAClC,cAAI,UAAU;AACd,cAAI,CAAO,SAAS,KAAK,KAAK,QAAQ,KAAK,GAAG;AAC5C,sBAAU;AAAA,UACZ;AACA,mBAAS,WAAW,WAAW,OAAO;AAAA,QACxC;AAAA,MACF;AAAA,IACF,CAAC;AACD,MAAE,WAAW,EAAE,OAAO;AAAA,MACpB,WAAW;AAAA,MACX,aAAa;AAAA,MACb,cAAc;AAAA,MACd,UAAU;AAAA,MACV,UAAU,cAAY;AACpB,cAAM,WAAW,SAAS,IAAI,UAAU;AACxC,YAAI,UAAU;AACZ,gBAAM,OAAO,SAAS;AACtB,gBAAM,QAAQ,SAAS,IAAI,OAAO;AAClC,gBAAM,OAAO,KAAK,WAAW,MAAM;AACnC,cAAU,SAAS,KAAK,KAAW,SAAS,IAAI,GAAG;AACjD,gBAAU,MAAM,QAAQ,OAAO,GAAG,CAAC,KAAK,KAAK,MAAM,QAAQ,OAAO,CAAC,GAAG;AACpE,uBAAS,WAAW,WAAW,KAAK;AAAA,YACtC,OAAO;AACL,uBAAS,WAAW,WAAW,IAAI;AAAA,YACrC;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AACD,MAAE,cAAc,EAAE,OAAO;AAAA,MACvB,UAAU;AAAA,IACZ,CAAC;AAMD,MAAE,UAAU,EAAE,OAAO;AAAA,MACnB,aAAa;AAAA,MACb,iBAAiB;AAAA,MACjB,WAAW;AAAA,MACX,WAAW;AAAA,MACX,aAAa;AAAA,MACb,mBAAmB;AAAA,MACnB,mBAAmB;AAAA,MACnB,eAAe;AAAA,MACf,eAAe;AAAA,MACf,qBAAqB;AAAA,IACvB,CAAC;AACD,MAAE,kBAAkB,EAAE,OAAO;AAAA,MAC3B,sBAAsB;AAAA,IACxB,CAAC;AACD,MAAE,cAAc,EAAE,OAAO;AAAA,MACvB,WAAW;AAAA,IACb,CAAC;AACD,MAAE,oBAAoB,CAAC,UAAU,QAAQ,CAAC,EAAE,OAAO;AAAA,MACjD,UAAU;AAAA,MACV,YAAY;AAAA,MACZ,OAAO,QAAQ,EAAE;AAAA,MACjB,QAAQ,QAAQ,EAAE;AAAA,MAClB,aAAa;AAAA,MACb,eAAe;AAAA,MACf,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,aAAa;AAAA,MACb,MAAM;AAAA,IACR,CAAC;AACD,MAAE,YAAY,EAAE,OAAO;AAAA,MACrB,SAAS;AAAA,MACT,cAAc;AAAA,MACd,iBAAiB;AAAA,IACnB,CAAC;AACD,MAAE,YAAY,CAAC,UAAU,QAAQ,CAAC,EAAE,OAAO;AAAA,MACzC,UAAU;AAAA,MACV,aAAa;AAAA,MACb,eAAe;AAAA,MACf,YAAY;AAAA,IACd,CAAC;AACD,MAAE,YAAY,CAAC,UAAU,MAAM,CAAC,EAAE,OAAO;AAAA,MACvC,SAAS;AAAA,MACT,aAAa;AAAA,MACb,UAAU;AAAA,MACV,aAAa;AAAA,MACb,eAAe;AAAA,MACf,YAAY;AAAA,IACd,CAAC;AACD,MAAE,YAAY,CAAC,QAAQ,UAAU,UAAU,UAAU,QAAQ,CAAC,EAAE,OAAO;AAAA,MACrE,MAAM,CAAC,SAAS,WAAW;AACzB,cAAM,SAAS,OAAO;AACtB,YAAI,QAAQ;AACV,gBAAM,IAAI,OAAO,OAAO;AACxB,gBAAM,IAAI,OAAO,MAAM;AACvB,kBAAQ,OAAO,GAAG,IAAI,CAAC;AACvB,kBAAQ,OAAO,GAAG,IAAI,CAAC;AAAA,QACzB;AAAA,MACF;AAAA,IACF,CAAC;AACD;AACE,YAAM,OAAO,EAAE,YAAY,CAAC,QAAQ,UAAU,UAAU,UAAU,QAAQ,CAAC,EAAE,OAAO,OAAO,YAAY,CAAC,CAAC;AACzG,eAAS,MAAM,UAAU,IAAI,UAAU;AAAA,IACzC;AACA,MAAE,YAAY,CAAC,QAAQ,UAAU,UAAU,UAAU,MAAM,CAAC,EAAE,OAAO;AAAA,MACnE,MAAM,CAAC,SAAS,WAAW;AACzB,cAAM,SAAS,OAAO;AACtB,YAAI,QAAQ;AACV,gBAAM,IAAI,OAAO,OAAO;AACxB,gBAAM,IAAI,OAAO,MAAM;AACvB,kBAAQ,OAAO,GAAG,CAAC;AACnB,kBAAQ,OAAO,GAAG,CAAC;AACnB,kBAAQ,OAAO,GAAG,CAAC;AACnB,kBAAQ,OAAO,GAAG,CAAC;AACnB,kBAAQ,OAAO,GAAG,CAAC;AAAA,QACrB;AAAA,MACF;AAAA,IACF,CAAC;AACD;AACE,YAAM,OAAO,EAAE,YAAY,CAAC,QAAQ,UAAU,UAAU,UAAU,MAAM,CAAC,EAAE,OAAO,OAAO,YAAY,CAAC,CAAC;AACvG,eAAS,MAAM,UAAU,IAAI,UAAU;AAAA,IACzC;AACA,MAAE,sBAAsB,EAAE,OAAO;AAAA,MAC/B,SAAS;AAAA,IACX,CAAC;AACD,MAAE,qBAAqB,EAAE,OAAO;AAAA,MAC9B,SAAS;AAAA,IACX,CAAC;AACD,MAAE,qBAAqB,EAAE,OAAO;AAAA,MAC9B,SAAS;AAAA,IACX,CAAC;AACD,MAAE,aAAa,EAAE,OAAO;AAAA,MACtB,UAAU;AAAA,MACV,YAAY;AAAA,MACZ,OAAO,QAAQ,EAAE;AAAA,MACjB,QAAQ,QAAQ,EAAE;AAAA,MAClB,aAAa;AAAA,MACb,eAAe;AAAA,MACf,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,aAAa;AAAA,MACb,MAAM;AAAA,IACR,CAAC;AACD,MAAE,MAAM,EAAE,OAAO;AAAA,MACf,OAAO,QAAQ,EAAE;AAAA,MACjB,QAAQ,QAAQ,EAAE;AAAA,IACpB,CAAC;AACD,MAAE,mBAAmB,EAAE,OAAO;AAAA,MAC5B,kBAAkB;AAAA,MAClB,kBAAkB;AAAA,MAClB,mBAAmB;AAAA,MACnB,mBAAmB;AAAA,MACnB,mBAAmB;AAAA,MACnB,mBAAmB;AAAA,MACnB,eAAe;AAAA,MACf,eAAe;AAAA,IACjB,CAAC;AAED;AACE,YAAM,OAAO,EAAE,aAAa,CAAC,UAAU,WAAW,CAAC,EAAE,OAAO,OAAO,gBAAgB,CAAC,CAAC;AACrF,eAAS,MAAM,QAAQ,IAAI,UAAU;AACrC,eAAS,MAAM,UAAU,IAAI,UAAU;AAAA,IACzC;AACA;AACE,YAAM,OAAO,EAAE,aAAa,CAAC,UAAU,WAAW,CAAC,EAAE,OAAO,OAAO,gBAAgB,CAAC,CAAC;AACrF,eAAS,MAAM,QAAQ,IAAI,UAAU;AACrC,eAAS,MAAM,UAAU,IAAI,UAAU;AAAA,IACzC;AAEA,MAAE,aAAa,CAAC,UAAU,aAAa,KAAK,CAAC,EAAE,OAAO,OAAO,gBAAgB;AAAA,MAC3E,aAAa;AAAA,IACf,CAAC;AACD,MAAE,aAAa,CAAC,UAAU,aAAa,KAAK,CAAC,EAAE,OAAO,OAAO,gBAAgB;AAAA,MAC3E,aAAa;AAAA,IACf,CAAC;AACD;AACE,YAAM,OAAO,EAAE,aAAa,CAAC,UAAU,aAAa,KAAK,CAAC,EAAE,OAAO,OAAO,oBAAoB,CAAC,CAAC;AAChG,eAAS,MAAM,QAAQ,IAAI,UAAU;AACrC,eAAS,MAAM,UAAU,IAAI,UAAU;AAAA,IACzC;AACA;AACE,YAAM,OAAO,EAAE,aAAa,CAAC,UAAU,aAAa,KAAK,CAAC,EAAE,OAAO,OAAO,oBAAoB,CAAC,CAAC;AAChG,eAAS,MAAM,QAAQ,IAAI,UAAU;AACrC,eAAS,MAAM,UAAU,IAAI,UAAU;AAAA,IACzC;AAEA;AACE,YAAM,OAAO,EAAE,oBAAoB,CAAC,WAAW,CAAC;AAChD,WAAK,OAAO;AAAA,QACV,eAAe;AAAA,QACf,aAAa;AAAA,QACb,aAAa;AAAA,QACb,OAAO;AAAA,QACP,QAAQ;AAAA,MACV,CAAC;AAAA,IACH;AACA;AACE,YAAM,OAAO,EAAE,YAAY,CAAC,aAAa,UAAU,MAAM,CAAC;AAC1D,WAAK,OAAO;AAAA,QACV,aAAa;AAAA,QACb,OAAO;AAAA,QACP,eAAe;AAAA,QACf,MAAM,aAAW;AACf,kBAAQ,OAAO,GAAG,GAAG;AACrB,kBAAQ,OAAO,GAAG,IAAI;AACtB,kBAAQ,OAAO,GAAG,GAAG;AACrB,kBAAQ,OAAO,GAAG,IAAI;AACtB,kBAAQ,OAAO,GAAG,GAAG;AACrB,kBAAQ,OAAO,GAAG,IAAI;AAAA,QACxB;AAAA,MACF,CAAC;AACD,eAAS,MAAM,UAAU,IAAI,qBAAqB;AAAA,IACpD;AACA,MAAE,UAAU,CAAC,WAAW,CAAC,EAAE,OAAO;AAAA,MAChC,WAAW;AAAA,MACX,YAAY;AAAA,MACZ,eAAe;AAAA,IACjB,CAAC;AACD,MAAE,UAAU,CAAC,aAAa,UAAU,CAAC,EAAE,OAAO;AAAA,MAC5C,UAAU;AAAA,MACV,iBAAiB;AAAA,MACjB,SAAS;AAAA,IACX,CAAC;AACD,MAAE,UAAU,CAAC,aAAa,YAAY,CAAC,EAAE,OAAO;AAAA,MAC9C,iBAAiB;AAAA,MACjB,SAAS;AAAA,IACX,CAAC;AACD,MAAE,UAAU,CAAC,aAAa,YAAY,MAAM,CAAC,EAAE,OAAO;AAAA,MACpD,SAAS;AAAA,IACX,CAAC;AACD,MAAE,UAAU,CAAC,aAAa,YAAY,OAAO,CAAC,EAAE,OAAO;AAAA,MACrD,SAAS;AAAA,IACX,CAAC;AACD,MAAE,UAAU,CAAC,aAAa,cAAc,KAAK,CAAC,EAAE,OAAO;AAAA,MACrD,SAAS;AAAA,IACX,CAAC;AACD,MAAE,UAAU,CAAC,aAAa,cAAc,QAAQ,CAAC,EAAE,OAAO;AAAA,MACxD,SAAS;AAAA,IACX,CAAC;AAAA,EACH;AACF;;;ACnyBO,IAAM,UAAN,cAAsB,YAAY;AAAA,EACvC,cAAc;AACZ,UAAM,GAAG,SAAS;AAIlB,WAAO,eAAe,MAAM,SAAS;AAAA,MACnC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,IAAI,gBAAgB;AAAA,IAC7B,CAAC;AAID,WAAO,eAAe,MAAM,SAAS;AAAA,MACnC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,IAAI,gBAAgB;AAAA,IAC7B,CAAC;AAQD,WAAO,eAAe,MAAM,oBAAoB;AAAA,MAC9C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,KAAK,eAAe,SAAS,KAAK,UAAU,IAAI,KAAK,OAAO;AAAA,QACjE,OAAO;AAAA,QACP,QAAQ,KAAK,MAAM;AAAA,MACrB,CAAC,CAAC;AAAA,IACJ,CAAC;AAQD,WAAO,eAAe,MAAM,yBAAyB;AAAA,MACnD,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,KAAK,eAAe,SAAS,KAAK,UAAU,IAAI,KAAK,OAAO;AAAA,QACjE,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,QAAQ,KAAK,MAAM;AAAA,MACrB,CAAC,CAAC;AAAA,IACJ,CAAC;AAQD,WAAO,eAAe,MAAM,uBAAuB;AAAA,MACjD,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,KAAK,eAAe,SAAS,KAAK,UAAU,IAAI,KAAK,OAAO;AAAA,QACjE,OAAO;AAAA,QACP,QAAQ,KAAK,MAAM;AAAA,MACrB,CAAC,CAAC;AAAA,IACJ,CAAC;AAQD,WAAO,eAAe,MAAM,qBAAqB;AAAA,MAC/C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,KAAK,sBAAsB,SAAS,KAAK,UAAU,IAAI,KAAK,OAAO;AAAA,QACxE,QAAQ;AAAA,QACR,QAAQ,KAAK,MAAM;AAAA,MACrB,CAAC,CAAC;AAAA,IACJ,CAAC;AAOD,WAAO,eAAe,MAAM,kBAAkB;AAAA,MAC5C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,KAAK,sBAAsB,SAAS,KAAK,UAAU,IAAI,KAAK,OAAO;AAAA,QACxE,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,aAAa;AAAA,MACf,CAAC,CAAC;AAAA,IACJ,CAAC;AAYD,WAAO,eAAe,MAAM,iBAAiB;AAAA,MAC3C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,KAAK,eAAe,SAAS,KAAK,UAAU,IAAI,KAAK,OAAO;AAAA,QACjE,OAAO;AAAA,QACP,QAAQ;AAAA,MACV,CAAC,CAAC;AAAA,IACJ,CAAC;AAQD,WAAO,eAAe,MAAM,oBAAoB;AAAA,MAC9C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,KAAK,eAAe,SAAS,KAAK,UAAU,IAAI,KAAK,OAAO;AAAA,QACjE,OAAO;AAAA,QACP,QAAQ;AAAA,MACV,CAAC,CAAC;AAAA,IACJ,CAAC;AAOD,WAAO,eAAe,MAAM,iBAAiB;AAAA,MAC3C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,KAAK,cAAc,SAAS,KAAK,UAAU,IAAI,KAAK,OAAO;AAAA,QAChE,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,YAAY;AAAA,MACd,CAAC,CAAC;AAAA,IACJ,CAAC;AAOD,WAAO,eAAe,MAAM,oBAAoB;AAAA,MAC9C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,UAAU,IAAI,KAAK,OAAO;AAAA,QAC/B,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,YAAY;AAAA,MACd,CAAC;AAAA,IACH,CAAC;AAQD,WAAO,eAAe,MAAM,sBAAsB;AAAA,MAChD,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,KAAK,sBAAsB,SAAS,KAAK,UAAU,IAAI,KAAK,OAAO;AAAA,QACxE,QAAQ;AAAA,QACR,QAAQ,KAAK,MAAM;AAAA,MACrB,CAAC,CAAC;AAAA,IACJ,CAAC;AAOD,WAAO,eAAe,MAAM,wBAAwB;AAAA,MAClD,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,KAAK,cAAc,SAAS,KAAK,UAAU,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC;AAAA,IACvE,CAAC;AAOD,WAAO,eAAe,MAAM,iBAAiB;AAAA,MAC3C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,KAAK,iBAAiB,SAAS,KAAK,OAAO,IAAI,KAAK,OAAO;AAAA,QAChE,WAAW,CAAC,MAAM;AAAA,QAClB,MAAM,SAAS,IAAI,KAAK,OAAO;AAAA,UAC7B,WAAW,CAAC,UAAU,MAAM;AAAA,QAC9B,CAAC;AAAA,MACH,CAAC,CAAC;AAAA,IACJ,CAAC;AACD,WAAO,eAAe,MAAM,cAAc;AAAA,MACxC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACL;AAAA,IACF,CAAC;AACD,WAAO,eAAe,MAAM,YAAY;AAAA,MACtC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,gBAAgB;AAAA,MAC1C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,eAAe;AAAA,MACzC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC;AAAA,IACV,CAAC;AACD,WAAO,eAAe,MAAM,eAAe;AAAA,MACzC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,aAAa;AAAA,MACvC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,eAAe;AAAA,MACzC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,aAAa;AAAA,MACvC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EACA,YAAY;AACV,SAAK,eAAe,KAAK,oBAAoB,IAAI,KAAK,KAAK,CAAC;AAC5D,UAAM,UAAU;AAChB,SAAK,WAAW,KAAK,KAAK,KAAK;AAC/B,SAAK,WAAW,KAAK,KAAK,KAAK;AAC/B,UAAM,OAAO,KAAK;AAClB,QAAI,iBAAiB,KAAK,MAAM;AAChC,UAAM,gBAAgB,KAAK;AAC3B,kBAAc,OAAO,GAAG,SAAS,MAAM;AACrC,WAAK,QAAQ;AAAA,IACf,CAAC;AACD,kBAAc,KAAK,CAAC;AACpB,kBAAc,OAAO,OAAO,SAAS,EAAE,IAAI,WAAW,CAAC;AACvD,SAAK,eAAe,IAAI,UAAU,cAAc;AAChD,UAAM,gBAAgB,KAAK;AAC3B,kBAAc,SAAS,KAAK,KAAK,eAAe;AAChD,SAAK,WAAW,KAAK,KAAK,aAAa,KAAK,OAAO,KAAK,mBAAmB,CAAC;AAC5E,SAAK,WAAW,KAAK,KAAK,aAAa,KAAK,OAAO,KAAK,iBAAiB,CAAC;AAC1E,kBAAc,SAAS,KAAK,KAAK,gBAAgB;AACjD,kBAAc,SAAS,KAAK,KAAK,gBAAgB;AAGjD,kBAAc,IAAI,eAAe,IAAI;AACrC,kBAAc,IAAI,uBAAuB,KAAK;AAC9C,kBAAc,IAAI,cAAc,UAAU,IAAI,MAAM;AAAA,MAClD,WAAW,CAAC,kBAAkB,MAAM,YAAY;AAAA,IAClD,CAAC,CAAC;AACF,SAAK,WAAW,KAAK,cAAc,OAAO,GAAG,eAAe,WAAS;AACnE,WAAK,gBAAgB,KAAK;AAAA,IAC5B,CAAC,CAAC;AACF,SAAK,WAAW,KAAK,cAAc,OAAO,GAAG,mBAAmB,WAAS;AACvE,WAAK,cAAc,KAAK;AAAA,IAC1B,CAAC,CAAC;AACF,SAAK,WAAW,KAAK,cAAc,OAAO,GAAG,qBAAqB,WAAS;AACzE,WAAK,gBAAgB,KAAK;AAAA,IAC5B,CAAC,CAAC;AACF,SAAK,UAAU;AACf,SAAK,YAAY;AAAA,EACnB;AAAA,EACA,iBAAiB;AACf,UAAM,eAAe;AACrB,QAAI,KAAK,QAAQ,YAAY,KAAK,KAAK,QAAQ,YAAY,KAAK,KAAK,IAAI,MAAM,KAAK,KAAK,IAAI,MAAM,GAAG;AACpG,WAAK,YAAY;AAAA,IACnB;AAAA,EACF;AAAA,EACA,cAAc;AACZ,QAAI,CAAC,KAAK,cAAc,SAAS,aAAa;AAC5C,WAAK,cAAc,SAAS,cAAc,KAAK,IAAI,YAAY,KAAK,KAAK,IAAI,YAAY,KAAK,KAAK,IAAI,MAAM,KAAK,KAAK,IAAI,MAAM,IAAI,OAAO;AAAA,IAC9I;AAAA,EACF;AAAA,EACA,YAAY;AACV,SAAK,cAAc,IAAI,eAAe,IAAI;AAC1C,SAAK,iBAAiB,IAAI,eAAe,IAAI;AAAA,EAC/C;AAAA,EACA,cAAc,QAAQ;AACpB,WAAO,SAAS;AAChB,QAAI,OAAO,SAAS;AAClB,aAAO,QAAQ,QAAQ;AAAA,IACzB;AACA,QAAI,OAAO,SAAS;AAClB,aAAO,QAAQ,QAAQ;AAAA,IACzB;AACA,WAAO,IAAI,YAAY,MAAS;AAChC,UAAM,QAAQ,OAAO,IAAI,OAAO;AAChC,QAAI,OAAO;AACT,MAAO,OAAO,MAAM,QAAQ,MAAM;AAClC,YAAM,kBAAkB;AAAA,IAC1B;AACA,UAAM,QAAQ,OAAO,IAAI,OAAO;AAChC,QAAI,OAAO;AACT,MAAO,OAAO,MAAM,QAAQ,MAAM;AAClC,YAAM,kBAAkB;AAAA,IAC1B;AACA,UAAM,SAAS,KAAK,IAAI,QAAQ;AAChC,QAAI,QAAQ;AACV,YAAM,eAAe,OAAO,IAAI,cAAc;AAC9C,UAAI,cAAc;AAChB,QAAO,OAAO,cAAc,MAAM;AAAA,MACpC;AAAA,IACF;AACA,UAAM,cAAc,MAAM;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,YAAY,OAAO;AACjB,UAAM,SAAS,KAAK,IAAI,QAAQ;AAChC,UAAM,SAAS,KAAK,IAAI,QAAQ;AAChC,UAAM,gBAAgB,KAAK;AAC3B,UAAM,aAAa,MAAM;AAGzB,QAAI,UAAU;AACd,QAAW,aAAa,YAAY,IAAI,GAAG;AACzC,gBAAU;AAAA,IACZ,OAAO;AACL;AAAA,IACF;AACA,UAAM,YAAY,cAAc,QAAQ,MAAM,KAAK;AACnD,UAAM,YAAY,KAAK,IAAI,aAAa,GAAG;AAC3C,UAAM,SAAS,WAAW,SAAS;AACnC,UAAM,SAAS,WAAW,SAAS;AACnC,UAAM,qBAAqB,KAAK,IAAI,oBAAoB;AACxD,UAAM,qBAAqB,KAAK,IAAI,oBAAoB;AACxD,SAAK,WAAW,WAAW,WAAW,aAAa,UAAU,GAAG;AAC9D,WAAK,MAAM,KAAK,UAAQ;AACtB,YAAI,KAAK,IAAI,OAAO,GAAG;AACrB,cAAI,QAAQ,KAAK,IAAI,OAAO;AAC5B,cAAI,MAAM,KAAK,IAAI,KAAK;AACxB,cAAI,WAAW,KAAK,YAAY,UAAU,IAAI,cAAc,MAAM,CAAC;AACnE,cAAI,sBAAsB,MAAM;AAC9B,uBAAW;AAAA,UACb;AACA,cAAI,eAAe,KAAK,IAAI,gBAAgB,CAAC;AAC7C,cAAI,WAAW,KAAK,IAAI,IAAI,cAAc,KAAK,IAAI,CAAC,cAAc,QAAQ,aAAa,MAAM,SAAS,SAAS,QAAQ,CAAC;AACxH,cAAI,SAAS,KAAK,IAAI,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,MAAM,aAAa,MAAM,SAAS,UAAU,IAAI,SAAS,CAAC;AAC1H,cAAI,YAAY,SAAS,UAAU,KAAK;AACtC,sBAAU;AAAA,UACZ;AACA,cAAI,KAAK,SAAS,YAAY,KAAK,WAAW,iBAAiB,QAAQ,IAAI,KAAK,IAAI,gBAAgB,CAAC,GAAG;AACtG,iBAAK,sBAAsB,KAAK,KAAK,UAAU,MAAM,CAAC;AAAA,UACxD,OAAO;AACL,sBAAU;AAAA,UACZ;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AACA,SAAK,WAAW,WAAW,WAAW,aAAa,UAAU,GAAG;AAC9D,WAAK,MAAM,KAAK,UAAQ;AACtB,YAAI,KAAK,IAAI,OAAO,GAAG;AACrB,cAAI,QAAQ,KAAK,IAAI,OAAO;AAC5B,cAAI,MAAM,KAAK,IAAI,KAAK;AACxB,cAAI,WAAW,KAAK,YAAY,UAAU,IAAI,cAAc,MAAM,CAAC;AACnE,cAAI,sBAAsB,MAAM;AAC9B,uBAAW;AAAA,UACb;AACA,cAAI,eAAe,KAAK,IAAI,gBAAgB,CAAC;AAC7C,cAAI,WAAW,KAAK,IAAI,IAAI,cAAc,KAAK,IAAI,CAAC,cAAc,QAAQ,aAAa,MAAM,SAAS,SAAS,QAAQ,CAAC;AACxH,cAAI,SAAS,KAAK,IAAI,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,MAAM,aAAa,MAAM,SAAS,UAAU,IAAI,SAAS,CAAC;AAC1H,cAAI,YAAY,SAAS,UAAU,KAAK;AACtC,sBAAU;AAAA,UACZ;AACA,cAAI,KAAK,SAAS,YAAY,KAAK,WAAW,iBAAiB,QAAQ,IAAI,KAAK,IAAI,gBAAgB,CAAC,GAAG;AACtG,iBAAK,sBAAsB,KAAK,KAAK,UAAU,MAAM,CAAC;AAAA,UACxD,OAAO;AACL,sBAAU;AAAA,UACZ;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AACA,SAAK,WAAW,WAAW,WAAW,aAAa,UAAU,GAAG;AAC9D,WAAK,MAAM,KAAK,UAAQ;AACtB,YAAI,KAAK,IAAI,OAAO,GAAG;AACrB,cAAI,QAAQ,KAAK,IAAI,OAAO;AAC5B,cAAI,MAAM,KAAK,IAAI,KAAK;AACxB,cAAI,WAAW,KAAK,YAAY,UAAU,IAAI,cAAc,OAAO,CAAC;AACpE,cAAI,sBAAsB,MAAM;AAC9B,uBAAW;AAAA,UACb;AACA,cAAI,eAAe,KAAK,IAAI,gBAAgB,CAAC;AAC7C,cAAI,WAAW,KAAK,IAAI,IAAI,cAAc,KAAK,IAAI,CAAC,cAAc,QAAQ,aAAa,MAAM,SAAS,SAAS,QAAQ,CAAC;AACxH,cAAI,SAAS,KAAK,IAAI,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,MAAM,aAAa,MAAM,SAAS,UAAU,IAAI,SAAS,CAAC;AAC1H,cAAI,YAAY,SAAS,UAAU,KAAK;AACtC,sBAAU;AAAA,UACZ;AACA,cAAI,KAAK,SAAS,YAAY,KAAK,WAAW,iBAAiB,QAAQ,IAAI,KAAK,IAAI,gBAAgB,CAAC,GAAG;AACtG,iBAAK,sBAAsB,KAAK,KAAK,UAAU,MAAM,CAAC;AAAA,UACxD,OAAO;AACL,sBAAU;AAAA,UACZ;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AACA,SAAK,WAAW,WAAW,WAAW,aAAa,UAAU,GAAG;AAC9D,WAAK,MAAM,KAAK,UAAQ;AACtB,YAAI,KAAK,IAAI,OAAO,GAAG;AACrB,cAAI,QAAQ,KAAK,IAAI,OAAO;AAC5B,cAAI,MAAM,KAAK,IAAI,KAAK;AACxB,cAAI,WAAW,KAAK,YAAY,UAAU,IAAI,cAAc,OAAO,CAAC;AACpE,cAAI,sBAAsB,MAAM;AAC9B,uBAAW;AAAA,UACb;AACA,cAAI,eAAe,KAAK,IAAI,gBAAgB,CAAC;AAC7C,cAAI,WAAW,KAAK,IAAI,IAAI,cAAc,KAAK,IAAI,CAAC,cAAc,QAAQ,aAAa,MAAM,SAAS,SAAS,QAAQ,CAAC;AACxH,cAAI,SAAS,KAAK,IAAI,CAAC,cAAc,KAAK,IAAI,IAAI,cAAc,MAAM,aAAa,MAAM,SAAS,UAAU,IAAI,SAAS,CAAC;AAC1H,cAAI,YAAY,SAAS,UAAU,KAAK;AACtC,sBAAU;AAAA,UACZ;AACA,cAAI,KAAK,SAAS,YAAY,KAAK,WAAW,iBAAiB,QAAQ,IAAI,KAAK,IAAI,gBAAgB,CAAC,GAAG;AACtG,iBAAK,sBAAsB,KAAK,KAAK,UAAU,MAAM,CAAC;AAAA,UACxD,OAAO;AACL,sBAAU;AAAA,UACZ;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AACA,SAAK,WAAW,UAAU,WAAW,YAAY,UAAU,GAAG;AAC5D,WAAK,MAAM,KAAK,UAAQ;AACtB,YAAI,KAAK,IAAI,MAAM,GAAG;AACpB,cAAI,QAAQ,KAAK,IAAI,OAAO;AAC5B,cAAI,MAAM,KAAK,IAAI,KAAK;AACxB,cAAI,QAAQ,KAAK,cAAc,IAAI,IAAI,aAAa,MAAM,SAAS;AACnE,cAAI,WAAW,QAAQ;AACvB,cAAI,SAAS,MAAM;AACnB,cAAI,KAAK,KAAK,UAAU,UAAU,MAAM;AACxC,qBAAW,GAAG,CAAC;AACf,mBAAS,GAAG,CAAC;AACb,cAAI,YAAY,SAAS,UAAU,KAAK;AACtC,sBAAU;AAAA,UACZ;AACA,eAAK,sBAAsB,KAAK,KAAK,UAAU,MAAM,CAAC;AAAA,QACxD;AAAA,MACF,CAAC;AAAA,IACH;AACA,SAAK,WAAW,UAAU,WAAW,YAAY,UAAU,GAAG;AAC5D,WAAK,MAAM,KAAK,UAAQ;AACtB,YAAI,KAAK,IAAI,MAAM,GAAG;AACpB,cAAI,QAAQ,KAAK,IAAI,OAAO;AAC5B,cAAI,MAAM,KAAK,IAAI,KAAK;AACxB,cAAI,QAAQ,KAAK,cAAc,IAAI,IAAI,aAAa,MAAM,SAAS;AACnE,cAAI,WAAW,QAAQ;AACvB,cAAI,SAAS,MAAM;AACnB,cAAI,KAAK,KAAK,UAAU,UAAU,MAAM;AACxC,qBAAW,GAAG,CAAC;AACf,mBAAS,GAAG,CAAC;AACb,cAAI,YAAY,SAAS,UAAU,KAAK;AACtC,sBAAU;AAAA,UACZ;AACA,eAAK,sBAAsB,KAAK,KAAK,UAAU,MAAM,CAAC;AAAA,QACxD;AAAA,MACF,CAAC;AAAA,IACH;AACA,SAAK,WAAW,UAAU,WAAW,YAAY,UAAU,GAAG;AAC5D,WAAK,MAAM,KAAK,UAAQ;AACtB,YAAI,KAAK,IAAI,MAAM,GAAG;AACpB,cAAI,QAAQ,KAAK,IAAI,OAAO;AAC5B,cAAI,MAAM,KAAK,IAAI,KAAK;AACxB,cAAI,QAAQ,KAAK,cAAc,IAAI,IAAI,aAAa,MAAM,SAAS;AACnE,cAAI,WAAW,QAAQ;AACvB,cAAI,SAAS,MAAM;AACnB,cAAI,KAAK,KAAK,UAAU,UAAU,MAAM;AACxC,qBAAW,GAAG,CAAC;AACf,mBAAS,GAAG,CAAC;AACb,cAAI,YAAY,SAAS,UAAU,KAAK;AACtC,sBAAU;AAAA,UACZ;AACA,eAAK,sBAAsB,KAAK,KAAK,UAAU,MAAM,CAAC;AAAA,QACxD;AAAA,MACF,CAAC;AAAA,IACH;AACA,SAAK,WAAW,UAAU,WAAW,YAAY,UAAU,GAAG;AAC5D,WAAK,MAAM,KAAK,UAAQ;AACtB,YAAI,KAAK,IAAI,MAAM,GAAG;AACpB,cAAI,QAAQ,KAAK,IAAI,OAAO;AAC5B,cAAI,MAAM,KAAK,IAAI,KAAK;AACxB,cAAI,QAAQ,KAAK,cAAc,IAAI,IAAI,aAAa,MAAM,SAAS;AACnE,cAAI,WAAW,QAAQ;AACvB,cAAI,SAAS,MAAM;AACnB,cAAI,KAAK,KAAK,UAAU,UAAU,MAAM;AACxC,qBAAW,GAAG,CAAC;AACf,mBAAS,GAAG,CAAC;AACb,cAAI,YAAY,SAAS,UAAU,KAAK;AACtC,sBAAU;AAAA,UACZ;AACA,eAAK,sBAAsB,KAAK,KAAK,UAAU,MAAM,CAAC;AAAA,QACxD;AAAA,MACF,CAAC;AAAA,IACH;AACA,QAAI,SAAS;AACX,iBAAW,eAAe;AAAA,IAC5B;AAAA,EACF;AAAA,EACA,kBAAkB;AAChB,UAAM,SAAS,KAAK,IAAI,QAAQ;AAChC,UAAM,SAAS,KAAK,IAAI,QAAQ;AAChC,UAAM,gBAAgB,KAAK;AAC3B,QAAI,WAAW,UAAU,WAAW,QAAQ;AAC1C,WAAK,WAAW,cAAc,OAAO,GAAG,SAAS,WAAS;AACxD,cAAM,aAAa,MAAM;AACzB,YAAI,WAAW,UAAU,KAAK,IAAI,WAAW,MAAM,KAAK,KAAK,WAAW,UAAU,KAAK,IAAI,WAAW,MAAM,KAAK,GAAG;AAClH,eAAK,YAAY,KAAK;AAAA,QACxB;AAAA,MACF,CAAC;AACD,WAAK,WAAW,KAAK,KAAK,QAAQ;AAAA,IACpC,OAAO;AACL,UAAI,KAAK,UAAU;AACjB,aAAK,SAAS,QAAQ;AAAA,MACxB;AAAA,IACF;AAAA,EACF;AAAA,EACA,cAAc,MAAM;AAClB,QAAIE,QAAO;AACX,QAAI,KAAK,IAAI,UAAU,EAAE,IAAI,UAAU,GAAG;AACxC,MAAAA,QAAO;AAAA,IACT;AACA,WAAOA;AAAA,EACT;AAAA,EACA,UAAU,OAAO,KAAK;AACpB,UAAM,OAAO,MAAM;AACnB,QAAI,QAAQ,GAAG;AACb,cAAQ;AACR,YAAM,QAAQ;AAAA,IAChB;AACA,QAAI,MAAM,GAAG;AACX,YAAM;AACN,cAAQ,MAAM;AAAA,IAChB;AACA,WAAO,CAAC,OAAO,GAAG;AAAA,EACpB;AAAA,EACA,gBAAgB,OAAO;AACrB,UAAM,gBAAgB,MAAM;AAC5B,QAAI,cAAc,UAAU,GAAG;AAC7B;AAAA,IACF;AACA,UAAM,gBAAgB,KAAK;AAC3B,QAAI,QAAQ,cAAc,QAAQ,MAAM,KAAK;AAC7C,QAAI,KAAK,IAAI,YAAY,KAAK,KAAK,IAAI,YAAY,GAAG;AACpD,YAAM,YAAY,cAAc;AAChC,UAAI,WAAW;AACb,YAAY,KAAK,cAAc,WAAW,EAAE,SAAS,GAAG;AACtD,gBAAM,QAAQ,KAAK,MAAM,SAAS,CAAC;AACnC,gBAAM,QAAQ,KAAK,MAAM,SAAS,CAAC;AACnC,cAAI,OAAO;AACT,iBAAK,cAAc,MAAM,IAAI,SAAS,CAAC;AACvC,iBAAK,YAAY,MAAM,IAAI,OAAO,CAAC;AAAA,UACrC;AACA,cAAI,OAAO;AACT,iBAAK,cAAc,MAAM,IAAI,SAAS,CAAC;AACvC,iBAAK,YAAY,MAAM,IAAI,OAAO,CAAC;AAAA,UACrC;AAAA,QACF;AAAA,MACF;AAAA,IACF;AACA,QAAI,KAAK,IAAI,MAAM,KAAK,KAAK,IAAI,MAAM,GAAG;AACxC,UAAI,MAAM,KAAK,KAAK,MAAM,KAAK,KAAK,MAAM,KAAK,cAAc,MAAM,KAAK,MAAM,KAAK,KAAK,OAAO,GAAG;AAEhG,aAAK,aAAa;AAAA,UAChB,GAAG,cAAc;AAAA,UACjB,GAAG,cAAc;AAAA,QACnB;AACA,cAAM,OAAO,KAAK,IAAI,MAAM;AAC5B,cAAM,OAAO,KAAK,IAAI,MAAM;AAC5B,YAAI,MAAM;AACR,eAAK,MAAM,KAAK,UAAQ;AACtB,iBAAK,YAAY,KAAK,IAAI,OAAO;AACjC,iBAAK,UAAU,KAAK,IAAI,KAAK;AAAA,UAC/B,CAAC;AAAA,QACH;AACA,YAAI,MAAM;AACR,eAAK,MAAM,KAAK,UAAQ;AACtB,iBAAK,YAAY,KAAK,IAAI,OAAO;AACjC,iBAAK,UAAU,KAAK,IAAI,KAAK;AAAA,UAC/B,CAAC;AAAA,QACH;AACA,cAAM,YAAY;AAClB,YAAI,KAAK,OAAO,UAAU,SAAS,GAAG;AACpC,eAAK,OAAO,SAAS,WAAW;AAAA,YAC9B,MAAM;AAAA,YACN,QAAQ;AAAA,YACR,eAAe,MAAM;AAAA,UACvB,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,sBAAsB,WAAW;AAC/B,QAAI,WAAW;AACb,gBAAU,OAAO,GAAG,WAAW,MAAM;AACnC,aAAK,wBAAwB;AAAA,MAC/B,CAAC;AAAA,IACH,OAAO;AACL,WAAK,wBAAwB;AAAA,IAC/B;AAAA,EACF;AAAA,EACA,0BAA0B;AACxB,UAAM,YAAY;AAClB,QAAI,KAAK,OAAO,UAAU,SAAS,GAAG;AACpC,WAAK,OAAO,SAAS,WAAW;AAAA,QAC9B,MAAM;AAAA,QACN,QAAQ;AAAA,MACV,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EACA,cAAc,OAAO;AACnB,UAAM,YAAY,KAAK;AACvB,QAAI,WAAW;AACb,UAAI,KAAK,IAAI,MAAM,KAAK,KAAK,IAAI,MAAM,GAAG;AACxC,YAAI,MAAM,cAAc,WAAW,UAAU,KAAK,MAAM,cAAc,WAAW,UAAU,GAAG;AAC5F,gBAAMC,aAAY;AAClB,cAAI,KAAK,OAAO,UAAUA,UAAS,GAAG;AACpC,iBAAK,OAAO,SAASA,YAAW;AAAA,cAC9B,MAAMA;AAAA,cACN,QAAQ;AAAA,cACR,eAAe,MAAM;AAAA,YACvB,CAAC;AAAA,UACH;AAAA,QACF;AACA,cAAM,YAAY;AAClB,YAAI,KAAK,OAAO,UAAU,SAAS,GAAG;AACpC,eAAK,OAAO,SAAS,WAAW;AAAA,YAC9B,MAAM;AAAA,YACN,QAAQ;AAAA,YACR,eAAe,MAAM;AAAA,UACvB,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF;AAEA,SAAK,aAAa;AAClB,SAAK,MAAM,KAAK,WAAS;AACvB,YAAM,aAAa;AAAA,IACrB,CAAC;AACD,SAAK,MAAM,KAAK,WAAS;AACvB,YAAM,aAAa;AAAA,IACrB,CAAC;AAAA,EACH;AAAA,EACA,gBAAgB,OAAO;AACrB,UAAM,gBAAgB,KAAK;AAC3B,QAAI,KAAK,IAAI,YAAY,KAAK,KAAK,IAAI,YAAY,GAAG;AACpD,YAAM,aAAa,MAAM;AACzB,YAAM,YAAY,WAAW;AAC7B,UAAI,WAAW;AACb,aAAK,YAAY,SAAS,IAAI,MAAM;AACpC,YAAY,KAAK,cAAc,WAAW,EAAE,SAAS,GAAG;AACtD,eAAK,aAAa;AAClB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AACA,QAAI,YAAY,KAAK;AACrB,QAAI,WAAW;AACb,kBAAY,cAAc,QAAQ,KAAK,MAAM,oBAAoB,SAAS,CAAC;AAC3E,UAAI,QAAQ,cAAc,QAAQ,MAAM,KAAK;AAC7C,YAAM,OAAO,KAAK,IAAI,MAAM;AAC5B,YAAM,OAAO,KAAK,IAAI,MAAM;AAC5B,UAAI,MAAM;AACR,YAAI,aAAa,KAAK,IAAI,YAAY;AACtC,YAAI,YAAY;AACd,qBAAW,OAAO,YAAY,cAAc;AAAA,QAC9C;AACA,aAAK,MAAM,KAAK,UAAQ;AACtB,cAAI,KAAK,IAAI,MAAM,GAAG;AACpB,iBAAK,aAAa;AAElB,gBAAI,WAAW,KAAK;AACpB,gBAAI,SAAS,KAAK;AAClB,gBAAI,aAAa,SAAS;AAC1B,gBAAI,SAAS,cAAc,UAAU,IAAI,MAAM,KAAK,cAAc,MAAM;AACxE,gBAAI,KAAK,IAAI,UAAU,EAAE,IAAI,UAAU,GAAG;AACxC,wBAAU;AAAA,YACZ;AACA,gBAAI,QAAQ,WAAW;AACvB,gBAAI,MAAM,SAAS;AACnB,gBAAI,MAAM,QAAQ,IAAI,KAAK,IAAI,gBAAgB,CAAC,IAAI,GAAG;AACrD,mBAAK,IAAI,SAAS,KAAK;AACvB,mBAAK,IAAI,OAAO,GAAG;AAAA,YACrB;AAAA,UACF;AAAA,QACF,CAAC;AACD,YAAI,YAAY;AACd,qBAAW,OAAO,WAAW,cAAc;AAAA,QAC7C;AAAA,MACF;AACA,UAAI,MAAM;AACR,YAAI,aAAa,KAAK,IAAI,YAAY;AACtC,YAAI,YAAY;AACd,qBAAW,OAAO,YAAY,cAAc;AAAA,QAC9C;AACA,aAAK,MAAM,KAAK,UAAQ;AACtB,cAAI,KAAK,IAAI,MAAM,GAAG;AACpB,iBAAK,aAAa;AAElB,gBAAI,WAAW,KAAK;AACpB,gBAAI,SAAS,KAAK;AAClB,gBAAI,aAAa,SAAS;AAC1B,gBAAI,SAAS,cAAc,UAAU,IAAI,MAAM,KAAK,cAAc,OAAO;AACzE,gBAAI,KAAK,IAAI,UAAU,EAAE,IAAI,UAAU,GAAG;AACxC,wBAAU;AAAA,YACZ;AACA,gBAAI,QAAQ,WAAW;AACvB,gBAAI,MAAM,SAAS;AACnB,gBAAI,MAAM,QAAQ,IAAI,KAAK,IAAI,gBAAgB,CAAC,IAAI,GAAG;AACrD,mBAAK,IAAI,SAAS,KAAK;AACvB,mBAAK,IAAI,OAAO,GAAG;AAAA,YACrB;AAAA,UACF;AAAA,QACF,CAAC;AACD,YAAI,YAAY;AACd,qBAAW,OAAO,WAAW,cAAc;AAAA,QAC7C;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,eAAe;AACb,UAAM,gBAAgB,KAAK;AAC3B,QAAI,IAAI;AACR,QAAI,aAAa,CAAC;AAClB,QAAI,aAAa,CAAC;AAClB,IAAQC,MAAK,cAAc,aAAa,CAAC,GAAGC,WAAU;AACpD,iBAAW,CAAC,IAAIA;AAChB,UAAI,YAAY,KAAK,YAAY,CAAC;AAClC,UAAI,WAAW;AACb,mBAAW,CAAC,IAAI;AAAA,MAClB;AACA;AAAA,IACF,CAAC;AACD,QAAI,WAAW,SAAS,KAAK,WAAW,SAAS,GAAG;AAClD,YAAM,IAAI,cAAc,MAAM;AAC9B,YAAM,IAAI,cAAc,OAAO;AAC/B,UAAI,aAAa,WAAW,CAAC;AAC7B,UAAI,aAAa,WAAW,CAAC;AAC7B,UAAI,aAAa,WAAW,CAAC;AAC7B,UAAI,aAAa,WAAW,CAAC;AAC7B,UAAI,cAAc,cAAc,cAAc,YAAY;AACxD,qBAAa,cAAc,QAAQ,UAAU;AAC7C,qBAAa,cAAc,QAAQ,UAAU;AAC7C,qBAAa,cAAc,QAAQ,UAAU;AAC7C,qBAAa,cAAc,QAAQ,UAAU;AAC7C,YAAI,KAAK,IAAI,YAAY,GAAG;AAC1B,gBAAM,aAAa,KAAK;AACxB,gBAAM,WAAW,KAAK;AACtB,cAAI,cAAc,QAAQ,YAAY,MAAM;AAC1C,gBAAI,WAAW,IAAI,WAAW,GAAG;AAC/B,eAAC,YAAY,UAAU,IAAI,CAAC,YAAY,UAAU;AAClD,eAAC,YAAY,UAAU,IAAI,CAAC,YAAY,UAAU;AAAA,YACpD;AACA,gBAAI,WAAW,aAAa,WAAW,IAAI,KAAK,WAAW;AAC3D,gBAAI,WAAW,aAAa,WAAW,IAAI,KAAK,WAAW;AAC3D,gBAAI,WAAW,aAAa,WAAW,IAAI,KAAK,WAAW;AAC3D,gBAAI,WAAW,aAAa,WAAW,IAAI,KAAK,WAAW;AAC3D,gBAAI,kBAAkB,KAAK,IAAI,MAAO,WAAW,QAAQ;AACzD,gBAAI,kBAAkB,KAAK,IAAI,MAAO,WAAW,QAAQ;AACzD,gBAAI,IAAI,kBAAkB;AAC1B,gBAAI,IAAI,aAAa,IAAI,WAAW,WAAW;AAC/C,gBAAI,IAAI,WAAW,IAAI,WAAW,WAAW;AAC7C,iBAAK,MAAM,KAAK,WAAS;AACvB,kBAAI,KAAK,MAAM,YAAY,CAAC;AAC5B,kBAAI,KAAK,MAAM,YAAY,CAAC;AAC5B,oBAAM,KAAK,IAAI,IAAI,CAAC;AAAA,YACtB,CAAC;AAAA,UACH;AAAA,QACF;AACA,YAAI,KAAK,IAAI,YAAY,GAAG;AAC1B,gBAAM,aAAa,KAAK;AACxB,gBAAM,WAAW,KAAK;AACtB,cAAI,cAAc,QAAQ,YAAY,MAAM;AAC1C,gBAAI,WAAW,IAAI,WAAW,GAAG;AAC/B,eAAC,YAAY,UAAU,IAAI,CAAC,YAAY,UAAU;AAClD,eAAC,YAAY,UAAU,IAAI,CAAC,YAAY,UAAU;AAAA,YACpD;AACA,gBAAI,WAAW,cAAc,IAAI,WAAW,IAAI,MAAM,WAAW;AACjE,gBAAI,WAAW,cAAc,IAAI,WAAW,IAAI,MAAM,WAAW;AACjE,gBAAI,WAAW,cAAc,IAAI,WAAW,IAAI,MAAM,WAAW;AACjE,gBAAI,WAAW,cAAc,IAAI,WAAW,IAAI,MAAM,WAAW;AACjE,gBAAI,kBAAkB,KAAK,IAAI,MAAO,WAAW,QAAQ;AACzD,gBAAI,kBAAkB,KAAK,IAAI,MAAO,WAAW,QAAQ;AACzD,gBAAI,IAAI,kBAAkB;AAC1B,gBAAI,IAAI,aAAa,IAAI,WAAW,WAAW;AAC/C,gBAAI,IAAI,WAAW,IAAI,WAAW,WAAW;AAC7C,iBAAK,MAAM,KAAK,WAAS;AACvB,kBAAI,KAAK,MAAM,YAAY,CAAC;AAC5B,kBAAI,KAAK,MAAM,YAAY,CAAC;AAC5B,oBAAM,KAAK,IAAI,IAAI,CAAC;AAAA,YACtB,CAAC;AAAA,UACH;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,wBAAwB;AACtB,UAAM,SAAS,KAAK,IAAI,QAAQ;AAChC,QAAI,QAAQ;AACV,YAAM,cAAc,OAAO,WAAW,OAAO;AAC7C,UAAI,eAAe,OAAO,IAAI,cAAc;AAC5C,UAAI,OAAO,YAAY;AACrB,uBAAe;AAAA,MACjB;AACA,UAAI,gBAAgB,aAAa;AAC/B,cAAM,iBAAiB,OAAO,IAAI,gBAAgB;AAClD,cAAM,YAAY,CAAC;AACnB,QAAO,KAAK,cAAc,YAAU;AAClC,cAAI,CAAC,OAAO,SAAS,KAAK,CAAC,OAAO,SAAS,GAAG;AAC5C,gBAAI,kBAAkB,QAAQ,kBAAkB,MAAM;AACpD,oBAAM,aAAa,OAAO,WAAW;AACrC,oBAAM,WAAW,OAAO,SAAS;AACjC,uBAAS,IAAI,YAAY,IAAI,UAAU,KAAK;AAC1C,sBAAM,WAAW,OAAO,UAAU,CAAC;AACnC,oBAAI,YAAY,CAAC,SAAS,SAAS,GAAG;AACpC,4BAAU,KAAK,QAAQ;AAAA,gBACzB;AAAA,cACF;AAAA,YACF,OAAO;AACL,oBAAM,kBAAkB,OAAO,IAAI,iBAAiB;AACpD,kBAAI,iBAAiB;AACnB,0BAAU,KAAK,eAAe;AAAA,cAChC;AAAA,YACF;AAAA,UACF;AAAA,QACF,CAAC;AACD,YAAI,cAAc;AAClB,YAAI;AACJ,QAAO,KAAK,WAAW,cAAY;AACjC,gBAAMA,SAAQ,SAAS,IAAI,OAAO;AAClC,cAAIA,QAAO;AACT,gBAAI,WAAW;AACf,gBAAI,kBAAkB,OAAO,kBAAkB,MAAM;AACnD,yBAAW,KAAK,IAAI,YAAY,IAAIA,OAAM,CAAC;AAAA,YAC7C,WAAW,kBAAkB,OAAO,kBAAkB,MAAM;AAC1D,yBAAW,KAAK,IAAI,YAAY,IAAIA,OAAM,CAAC;AAAA,YAC7C,OAAO;AACL,yBAAW,KAAK,MAAM,YAAY,IAAIA,OAAM,GAAG,YAAY,IAAIA,OAAM,CAAC;AAAA,YACxE;AACA,gBAAI,WAAW,aAAa;AAC1B,4BAAc;AACd,4BAAc;AAAA,YAChB;AAAA,UACF;AAAA,QACF,CAAC;AACD,QAAO,KAAK,cAAc,YAAU;AAClC,gBAAM,UAAU,OAAO,IAAI,SAAS;AACpC,cAAI,SAAS;AACX,oBAAQ,aAAa,MAAS;AAAA,UAChC;AAAA,QACF,CAAC;AACD,YAAI,aAAa;AACf,cAAI,SAAS,YAAY;AACzB,iBAAO,oBAAoB,WAAW;AACtC,iBAAO,OAAO,mBAAmB,WAAW;AAC5C,gBAAMA,SAAQ,YAAY,IAAI,OAAO;AACrC,cAAIA,QAAO;AAET,mBAAO,WAAW,OAAO,SAAS;AAAA,cAChC,GAAGA,OAAM,IAAI,OAAO,EAAE;AAAA,cACtB,GAAGA,OAAM,IAAI,OAAO,EAAE;AAAA,YACxB,CAAC,GAAG,IAAI;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,gBAAgB;AACd,QAAI,SAAS,KAAK,IAAI,QAAQ;AAC9B,QAAI,QAAQ;AACV,aAAO,aAAa;AAAA,IACtB;AAAA,EACF;AAAA,EACA,WAAW,QAAQ;AACjB,SAAK,cAAc,SAAS,KAAK,MAAM;AAAA,EACzC;AAAA,EACA,mBAAmB;AACjB,UAAM,iBAAiB;AACvB,SAAK,OAAO,KAAK,YAAU;AACzB,WAAK,UAAU,MAAM;AAAA,IACvB,CAAC;AACD,QAAI,KAAK,QAAQ,QAAQ,KAAK,KAAK,QAAQ,QAAQ,GAAG;AACpD,WAAK,gBAAgB;AAAA,IACvB;AACA,QAAI,KAAK,QAAQ,QAAQ,GAAG;AAC1B,YAAM,WAAW,KAAK,cAAc;AACpC,YAAM,SAAS,KAAK,IAAI,QAAQ;AAChC,UAAI,WAAW,UAAU;AACvB,aAAK,iBAAiB,QAAQ;AAC9B,YAAI,UAAU;AACZ,mBAAS,QAAQ;AAAA,QACnB;AACA,YAAI,QAAQ;AACV,iBAAO,UAAU,IAAI;AACrB,eAAK,WAAW,MAAM;AACtB,eAAK,sBAAsB,UAAU,OAAO,OAAO,GAAG,eAAe,MAAM;AACzE,iBAAK,uBAAuB;AAAA,UAC9B,CAAC,CAAC;AAAA,QACJ;AAEA,aAAK,cAAc,SAAS;AAAA,MAC9B;AAAA,IACF;AACA,QAAI,KAAK,QAAQ,YAAY,GAAG;AAC9B,YAAM,WAAW,KAAK,cAAc;AACpC,YAAM,aAAa,KAAK,IAAI,YAAY;AACxC,UAAI,eAAe,UAAU;AAC3B,aAAK,iBAAiB,YAAY;AAClC,YAAI,UAAU;AACZ,mBAAS,QAAQ;AAAA,QACnB;AACA,YAAI,YAAY;AACd,cAAI,CAAC,WAAW,QAAQ;AACtB,iBAAK,iBAAiB,SAAS,KAAK,UAAU;AAAA,UAChD;AACA,eAAK,sBAAsB,cAAc,WAAW,OAAO,GAAG,gBAAgB,OAAK;AACjF,iBAAK,iBAAiB,KAAK,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI;AAAA,UAC1D,CAAC,CAAC;AACF,eAAK,sBAAsB,cAAc,WAAW,OAAO,GAAG,YAAY,MAAM;AAC9E,iBAAK,MAAM,KAAK,UAAQ;AACtB,kBAAI,KAAK,IAAI,UAAU,GAAG;AACxB,qBAAK,qBAAqB,IAAI;AAAA,cAChC;AAAA,YACF,CAAC;AAAA,UACH,CAAC,CAAC;AAEF,qBAAW,WAAW,wBAAwB,cAAY;AACxD,kBAAM,OAAO,KAAK,MAAM,SAAS,CAAC;AAClC,mBAAO,OAAO,KAAK,eAAe,UAAU,KAAK,KAAK,KAAK;AAAA,UAC7D,CAAC;AAAA,QACH;AACA,aAAK,cAAc,aAAa;AAAA,MAClC;AAAA,IACF;AACA,QAAI,KAAK,QAAQ,YAAY,GAAG;AAC9B,YAAM,WAAW,KAAK,cAAc;AACpC,YAAM,aAAa,KAAK,IAAI,YAAY;AACxC,UAAI,eAAe,UAAU;AAC3B,aAAK,iBAAiB,YAAY;AAClC,YAAI,UAAU;AACZ,mBAAS,QAAQ;AAAA,QACnB;AACA,YAAI,YAAY;AACd,cAAI,CAAC,WAAW,QAAQ;AACtB,iBAAK,mBAAmB,SAAS,KAAK,UAAU;AAAA,UAClD;AACA,eAAK,sBAAsB,cAAc,WAAW,OAAO,GAAG,gBAAgB,OAAK;AACjF,iBAAK,iBAAiB,KAAK,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI;AAAA,UAC1D,CAAC,CAAC;AACF,eAAK,sBAAsB,cAAc,WAAW,OAAO,GAAG,YAAY,MAAM;AAC9E,iBAAK,MAAM,KAAK,UAAQ;AACtB,kBAAI,KAAK,IAAI,UAAU,GAAG;AACxB,qBAAK,qBAAqB,IAAI;AAAA,cAChC;AAAA,YACF,CAAC;AAAA,UACH,CAAC,CAAC;AAEF,qBAAW,WAAW,wBAAwB,cAAY;AACxD,kBAAM,OAAO,KAAK,MAAM,SAAS,CAAC;AAClC,mBAAO,OAAO,KAAK,eAAe,UAAU,KAAK,KAAK,KAAK;AAAA,UAC7D,CAAC;AAAA,QACH;AACA,aAAK,cAAc,aAAa;AAAA,MAClC;AAAA,IACF;AACA,SAAK,eAAe;AAAA,EACtB;AAAA,EACA,eAAe,QAAQ;AACrB,UAAM,eAAe,MAAM;AAC3B,UAAM,QAAQ,OAAO,IAAI,OAAO;AAChC,UAAM,QAAQ,OAAO,IAAI,OAAO;AAChC,IAAO,KAAK,MAAM,QAAQ,MAAM;AAChC,IAAO,KAAK,MAAM,QAAQ,MAAM;AAChC,WAAO,UAAU,OAAO,YAAY,MAAM,OAAO,GAAG,mBAAmB,MAAM;AAC3E,aAAO,aAAa;AAAA,IACtB,CAAC,CAAC;AACF,WAAO,UAAU,OAAO,YAAY,MAAM,OAAO,GAAG,mBAAmB,MAAM;AAC3E,aAAO,aAAa;AAAA,IACtB,CAAC,CAAC;AACF,QAAI,CAAC,OAAO,IAAI,UAAU,GAAG;AAC3B,UAAI,MAAM,OAAO,cAAc,KAAK,MAAM,OAAO,UAAU,GAAG;AAC5D,eAAO,IAAI,YAAY,KAAK;AAAA,MAC9B,OAAO;AACL,eAAO,IAAI,YAAY,KAAK;AAAA,MAC9B;AAAA,IACF;AACA,QAAI,OAAO,IAAI,SAAS,GAAG;AACzB,aAAO,cAAc,SAAS;AAC9B,MAAO,KAAK,OAAO,WAAW,cAAY;AACxC,iBAAS,IAAI,gBAAgB,MAAS;AACtC,iBAAS,IAAI,gBAAgB,MAAS;AAAA,MACxC,CAAC;AAAA,IACH;AACA,WAAO,eAAe;AACtB,UAAM,kBAAkB;AACxB,UAAM,kBAAkB;AACxB,UAAM,eAAe;AACrB,UAAM,eAAe;AACrB,SAAK,UAAU,MAAM;AAAA,EACvB;AAAA,EACA,UAAU,QAAQ;AAChB,UAAM,WAAW,KAAK,IAAI,QAAQ;AAClC,QAAI,UAAU;AACZ,UAAI,OAAO,IAAI,MAAM,KAAK,MAAM;AAC9B,cAAMC,SAAQ,SAAS,KAAK;AAC5B,eAAO,SAAS,UAAUA,MAAK;AAC/B,eAAO,SAAS,QAAQA,MAAK;AAAA,MAC/B;AAAA,IACF;AACA,UAAM,aAAa,KAAK,IAAI,UAAU;AACtC,QAAI,YAAY;AACd,UAAI,OAAO,IAAI,aAAa,KAAK,MAAM;AACrC,cAAM,UAAU,WAAW,KAAK;AAChC,eAAO,SAAS,eAAe,OAAO;AAAA,MACxC;AAAA,IACF;AAAA,EACF;AAAA,EACA,yBAAyB;AACvB,UAAM,SAAS,KAAK,IAAI,QAAQ;AAChC,UAAM,WAAW,OAAO,IAAI,UAAU;AACtC,UAAM,gBAAgB,OAAO,WAAW,iBAAiB,CAAC;AAC1D,UAAM,gBAAgB,OAAO,WAAW,iBAAiB,CAAC;AAC1D,UAAM,YAAY,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,OAAO,WAAW,aAAa,GAAG,CAAC,CAAC;AAC9E,UAAM,YAAY,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,OAAO,WAAW,aAAa,GAAG,CAAC,CAAC;AAC9E,SAAK,MAAM,KAAK,UAAQ;AACtB,UAAI,aAAa,WAAW,aAAa,UAAU;AACjD,YAAI,YAAY,KAAK,eAAe,aAAa;AACjD,YAAI,YAAY,KAAK,eAAe,SAAS;AAC7C,aAAK,KAAK,WAAW,SAAS;AAAA,MAChC;AACA,WAAK,WAAW,mBAAmB,IAAI;AAAA,IACzC,CAAC;AACD,SAAK,MAAM,KAAK,UAAQ;AACtB,UAAI,aAAa,WAAW,aAAa,UAAU;AACjD,YAAI,YAAY,KAAK,eAAe,aAAa;AACjD,YAAI,YAAY,KAAK,eAAe,SAAS;AAC7C,aAAK,KAAK,WAAW,SAAS;AAAA,MAChC;AACA,WAAK,WAAW,mBAAmB,IAAI;AAAA,IACzC,CAAC;AAAA,EACH;AAAA,EACA,iBAAiB,MAAM,OAAO,KAAK,UAAU;AAC3C,SAAK,KAAK,UAAQ;AAChB,UAAI,YAAY,KAAK,YAAY,KAAK;AACtC,UAAI,UAAU,KAAK,YAAY,GAAG;AAClC,UAAI,gBAAgB,KAAK,KAAK,WAAW,SAAS,QAAW,QAAQ;AACrE,YAAM,kBAAkB;AACxB,WAAK,cAAc,iBAAiB,KAAK;AACzC,UAAI,eAAe;AACjB,sBAAc,OAAO,GAAG,WAAW,MAAM;AACvC,eAAK,cAAc,iBAAiB,IAAI;AAAA,QAC1C,CAAC;AAAA,MACH,OAAO;AACL,aAAK,cAAc,iBAAiB,IAAI;AAAA,MAC1C;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,aAAa,MAAM,WAAW;AAC5B,WAAO,KAAK,OAAO,MAAM,YAAU;AACjC,UAAI,OAAO,SAAS,SAAS;AAC3B,QAAO,KAAK,OAAO,WAAW,UAAQ;AACpC,eAAK,YAAY,IAAI;AAAA,QACvB,CAAC;AAAA,MACH,WAAW,OAAO,SAAS,QAAQ;AACjC,kBAAU,SAAS,KAAK,OAAO,QAAQ;AACvC,eAAO,SAAS,aAAa,IAAI;AAAA,MACnC,WAAW,OAAO,SAAS,YAAY;AACrC,kBAAU,SAAS,SAAS,OAAO,OAAO,OAAO,QAAQ;AACzD,eAAO,SAAS,aAAa,IAAI;AAAA,MACnC,WAAW,OAAO,SAAS,eAAe;AACxC,kBAAU,SAAS,YAAY,OAAO,OAAO,OAAO,QAAQ;AAC5D,eAAO,SAAS,aAAa,IAAI;AAAA,MACnC,WAAW,OAAO,SAAS,eAAe;AACxC,aAAK,YAAY,OAAO,QAAQ;AAAA,MAClC,WAAW,OAAO,SAAS,aAAa;AACtC,kBAAU,SAAS,UAAU,OAAO,OAAO,OAAO,QAAQ;AAC1D,eAAO,MAAM,aAAa,IAAI;AAAA,MAChC,OAAO;AACL,cAAM,IAAI,MAAM,yBAAyB;AAAA,MAC3C;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,YAAY,MAAM;AAChB,QAAI,CAAC,KAAK,WAAW,GAAG;AACtB,YAAM,aAAa,KAAK;AACxB,UAAI,YAAY;AACd,mBAAW,SAAS,YAAY,IAAI;AAAA,MACtC;AACA,YAAM,gBAAgB,KAAK;AAC3B,YAAM,aAAa,cAAc;AACjC,UAAI,YAAY;AACd,mBAAW,SAAS,YAAY,aAAa;AAAA,MAC/C;AACA,YAAM,mBAAmB,KAAK;AAC9B,YAAM,gBAAgB,iBAAiB;AACvC,UAAI,eAAe;AACjB,sBAAc,SAAS,YAAY,gBAAgB;AAAA,MACrD;AAAA,IACF;AAAA,EACF;AAAA,EACA,qBAAqB;AACnB,UAAM,OAAO,KAAK,kBAAkB,MAAM;AAC1C,UAAM,QAAQ,KAAK,mBAAmB,MAAM;AAC5C,UAAM,sBAAsB,KAAK;AACjC,wBAAoB,IAAI,eAAe,IAAI;AAC3C,wBAAoB,IAAI,gBAAgB,KAAK;AAC7C,UAAM,mBAAmB,KAAK;AAC9B,qBAAiB,IAAI,eAAe,IAAI;AACxC,qBAAiB,IAAI,gBAAgB,KAAK;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA,EAIA,YAAY,MAAM;AAChB,QAAI,SAAS,KAAK,IAAI,QAAQ;AAC9B,QAAI,QAAQ;AACV,WAAK,YAAY,KAAK,GAAG,SAAS,MAAM;AACtC,aAAK,cAAc;AAAA,MACrB,CAAC,CAAC;AACF,WAAK,YAAY,KAAK,GAAG,OAAO,MAAM;AACpC,aAAK,cAAc;AAAA,MACrB,CAAC,CAAC;AAAA,IACJ;AAAA,EACF;AAAA,EACA,qBAAqB,MAAM,OAAO;AAChC,QAAI,QAAQ,KAAK,YAAY,KAAK,IAAI,SAAS,CAAC,CAAC;AACjD,QAAI,MAAM,KAAK,YAAY,KAAK,IAAI,OAAO,CAAC,CAAC;AAC7C,QAAI,QAAQ,KAAK;AACf,OAAC,OAAO,GAAG,IAAI,CAAC,KAAK,KAAK;AAAA,IAC5B;AACA,QAAI,KAAK,MAAM,QAAQ,IAAI,KAAK,IAAI;AAClC,UAAI,SAAS,KAAK,WAAW,iBAAiB,GAAG;AAC/C,YAAI,aAAa,KAAK,IAAI,YAAY;AACtC,YAAI,eAAe,CAAC,WAAW,WAAW,QAAQ,KAAK,QAAQ;AAC7D,qBAAW,OAAO,SAAS,KAAK;AAChC,qBAAW,OAAO,OAAO,GAAG;AAC5B,qBAAW,YAAY;AAAA,QACzB;AAAA,MACF;AAAA,IACF,WAAW,KAAK,MAAM,QAAQ,IAAI,KAAK,IAAI;AACzC,UAAI,SAAS,KAAK,WAAW,iBAAiB,GAAG;AAC/C,YAAI,aAAa,KAAK,IAAI,YAAY;AACtC,YAAI,eAAe,CAAC,WAAW,WAAW,QAAQ,KAAK,QAAQ;AAC7D,qBAAW,OAAO,SAAS,KAAK;AAChC,qBAAW,OAAO,OAAO,GAAG;AAC5B,qBAAW,YAAY;AAAA,QACzB;AAAA,MACF;AAAA,IACF;AACA,SAAK,eAAe;AAAA,EACtB;AAAA,EACA,iBAAiB;AACf,QAAI,gBAAgB,KAAK;AACzB,QAAI,iBAAiB,cAAc,QAAQ;AACzC,UAAI,UAAU;AACd,WAAK,MAAM,KAAK,UAAQ;AACtB,YAAU,MAAM,KAAK,IAAI,SAAS,CAAC,GAAG,CAAC,KAAK,KAAW,MAAM,KAAK,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,GAAG;AACxF,oBAAU;AAAA,QACZ;AAAA,MACF,CAAC;AACD,WAAK,MAAM,KAAK,UAAQ;AACtB,YAAU,MAAM,KAAK,IAAI,SAAS,CAAC,GAAG,CAAC,KAAK,KAAW,MAAM,KAAK,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,GAAG;AACxF,oBAAU;AAAA,QACZ;AAAA,MACF,CAAC;AACD,UAAI,SAAS;AACX,YAAI,cAAc,SAAS,GAAG;AAC5B,wBAAc,KAAK;AAAA,QACrB;AAAA,MACF,OAAO;AACL,sBAAc,KAAK;AAAA,MACrB;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAOD,QAAO;AACZ,UAAM,gBAAgB,KAAK;AAC3B,UAAM,cAAc,KAAK,WAAW,eAAe,KAAK,YAAY;AACpE,UAAM,SAAS,cAAc,SAASA,MAAK;AAC3C,QAAIA,OAAM,KAAK,QAAQA,OAAM,KAAK,QAAQA,OAAM,KAAK,cAAc,MAAM,IAAI,OAAOA,OAAM,KAAK,cAAc,OAAO,IAAI,KAAK;AAC3H,aAAO;AAAA,IACT;AACA,QAAI,aAAa;AACf,eAAS,IAAI,YAAY,SAAS,GAAG,KAAK,GAAG,KAAK;AAChD,cAAM,QAAQ,YAAY,CAAC;AAC3B,YAAI,SAAS,MAAM;AACjB,gBAAM,qBAAqB,MAAM;AACjC,gBAAM,gBAAgB,KAAK,MAAM,oBAAoB,MAAM;AAC3D,gBAAM,YAAY,MAAM,MAAM,oBAAoB,aAAa;AAC/D,gBAAM,QAAQ,mBAAmB,QAAQ,SAAS;AAClD,cAAI,MAAM,KAAK,QAAQ,MAAM,KAAK,QAAQ,MAAM,KAAK,mBAAmB,MAAM,IAAI,OAAO,MAAM,KAAK,mBAAmB,OAAO,IAAI,KAAK;AACrI,mBAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIA,kBAAkB;AAChB,UAAM,gBAAgB,KAAK;AAC3B,UAAM,IAAI,cAAc,MAAM;AAC9B,UAAM,IAAI,cAAc,OAAO;AAC/B,QAAI,KAAK,KAAK,OAAO;AACrB,UAAM,SAAS,KAAK,MAAM,iBAAiB,IAAI,aAAa;AAC5D,QAAI,QAAQ;AACV,UAAI,OAAO,SAAS,IAAI;AACtB,aAAK,OAAO;AAAA,MACd;AAAA,IACF;AACA,QAAI,QAAQ,cAAc,SAAS,SAAS;AAAA,MAC1C,GAAG;AAAA,MACH,GAAG;AAAA,IACL,CAAC;AACD,QAAI,QAAQ,cAAc,SAAS,SAAS;AAAA,MAC1C,GAAG;AAAA,MACH,GAAG;AAAA,IACL,CAAC;AACD,UAAM,WAAW,CAAC;AAClB,QAAI,MAAM;AACV,QAAI,cAAc;AAClB,QAAI,YAAY,KAAK;AACrB,QAAI,qBAAqB,KAAK,IAAI,oBAAoB;AACtD,QAAI,uBAAuB,KAAK,IAAI,wBAAwB,IAAI;AAChE,QAAIE;AACJ,QAAI;AACJ,QAAU,SAAS,kBAAkB,GAAG;AACtC,WAAK,OAAO,KAAK,YAAU;AACzB,YAAI,CAAC,OAAO,SAAS,GAAG;AACtB,gBAAM,UAAU,OAAO,IAAI,SAAS;AACpC,cAAI,SAAS;AACX,gBAAIF,SAAQ,QAAQ,IAAI,SAAS;AACjC,gBAAIA,QAAO;AACT,kBAAI,WAAW,KAAK,MAAM,UAAU,IAAIA,OAAM,GAAG,UAAU,IAAIA,OAAM,CAAC;AACtE,kBAAI,wBAAwB,KAAK;AAC/B,2BAAW,KAAK,IAAI,UAAU,IAAIA,OAAM,CAAC;AAAA,cAC3C,WAAW,wBAAwB,KAAK;AACtC,2BAAW,KAAK,IAAI,UAAU,IAAIA,OAAM,CAAC;AAAA,cAC3C;AACA,kBAAI,WAAW,aAAa;AAC1B,8BAAc;AACd,gBAAAE,WAAU;AACV,+BAAeF;AAAA,cACjB;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AACA,UAAM,gBAAgB,CAAC;AACvB,SAAK,OAAO,KAAK,YAAU;AACzB,YAAM,UAAU,OAAO,IAAI,SAAS;AACpC,UAAI,WAAW,CAAC,QAAQ,IAAI,aAAa,GAAG;AAC1C,YAAI,SAAS;AACb,YAAIA,SAAQ,QAAQ,IAAI,SAAS;AACjC,YAAIA,QAAO;AACT,cAAI,sBAAsB,GAAG;AAC3B,gBAAIA,SAAQ,QAAQ,IAAI,SAAS;AACjC,gBAAIA,UAAS,cAAc;AACzB,kBAAI,UAAUE,UAAS;AACrB,oBAAI,WAAW,KAAK,MAAM,aAAa,IAAIF,OAAM,GAAG,aAAa,IAAIA,OAAM,CAAC;AAC5E,oBAAI,wBAAwB,KAAK;AAC/B,6BAAW,KAAK,IAAI,aAAa,IAAIA,OAAM,CAAC;AAAA,gBAC9C,WAAW,wBAAwB,KAAK;AACtC,6BAAW,KAAK,IAAI,aAAa,IAAIA,OAAM,CAAC;AAAA,gBAC9C;AACA,oBAAI,WAAW,oBAAoB;AACjC,2BAAS;AAAA,gBACX;AAAA,cACF;AAAA,YACF;AAAA,UACF,WAAW,sBAAsB,IAAI;AACnC,gBAAI,UAAUE,UAAS;AACrB,uBAAS;AAAA,YACX;AAAA,UACF;AACA,cAAI,CAAC,KAAK,OAAO,KAAK,gBAAgBF,MAAK,CAAC,KAAK,CAAC,QAAQ,UAAU;AAClE,qBAAS;AAAA,UACX,OAAO;AACL,gBAAI,CAAC,QAAQ;AACX,qBAAOA,OAAM;AAAA,YACf;AAAA,UACF;AACA,cAAI,UAAU,OAAO,SAAS,KAAK,OAAO,SAAS,GAAG;AACpD,oBAAQ,KAAK,CAAC;AAAA,UAChB,OAAO;AACL,oBAAQ,KAAK;AACb,qBAAS,KAAK,OAAO;AACrB,0BAAc,KAAK,MAAM;AAAA,UAC3B;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AACD,SAAK,WAAW,iBAAiB,aAAa;AAC9C,QAAI,KAAK,IAAI,iBAAiB,GAAG;AAC/B,UAAI,gBAAgB;AACpB,UAAI,eAAe;AACnB,YAAM,mBAAmB,KAAK,MAAM;AACpC,YAAM,QAAQ,SAAS;AACvB,YAAM,UAAU,MAAM;AACtB,UAAI,UAAU,IAAI,IAAI,MAAM,GAAG;AAC7B,iBAAS,KAAK,CAAC,GAAG,MAAa,cAAc,EAAE,IAAI,SAAS,EAAE,GAAG,EAAE,IAAI,SAAS,EAAE,CAAC,CAAC;AACpF,YAAI,QAAQ,MAAM;AAClB,QAAO,KAAK,UAAU,aAAW;AAC/B,cAAI,SAAS,QAAQ,OAAO;AAC5B;AACA,2BAAiB;AACjB,cAAI,UAAU,QAAQ,IAAI,SAAS;AACnC,cAAI,mBAAmB,SAAS;AAC9B,sBAAU,QAAQ;AAAA,UACpB;AACA,oBAAU,QAAQ,IAAI,gBAAgB,CAAC;AACvC,kBAAQ,IAAI,UAAU;AAAA,YACpB,MAAM,MAAM;AAAA,YACZ,KAAK,MAAM;AAAA,YACX,OAAO,MAAM;AAAA,YACb,QAAQ;AAAA,UACV,CAAC;AACD,kBAAQ,WAAW,cAAc;AAAA,YAC/B,MAAM,MAAM;AAAA,YACZ,KAAK,MAAM;AAAA,YACX,OAAO,MAAM;AAAA,YACb,QAAQ;AAAA,UACV,CAAC;AACD,kBAAQ,KAAK,IAAI,QAAQ,QAAQ,QAAQ,MAAM,MAAM;AACrD,cAAI,QAAQ,UAAU,kBAAkB;AACtC,6BAAiB,SAAS,UAAU,SAAS,CAAC;AAAA,UAChD;AAAA,QACF,CAAC;AACD,YAAI,QAAQ,GAAG;AACb,mBAAS,QAAQ;AACjB,cAAI,aAAa;AACjB,UAAO,KAAK,UAAU,aAAW;AAC/B;AACA,gBAAIG,UAAS,QAAQ,IAAI,QAAQ;AACjC,gBAAIA,SAAQ;AACV,kBAAI,MAAMA,QAAO,MAAM;AACvB,kBAAI,SAASA,QAAO,SAAS;AAC7B,kBAAI,MAAM,YAAY;AACpB,sBAAM;AACN,yBAAS,MAAM,QAAQ,OAAO;AAAA,cAChC;AACA,sBAAQ,IAAI,UAAU;AAAA,gBACpB,MAAMA,QAAO;AAAA,gBACb;AAAA,gBACA,OAAOA,QAAO;AAAA,gBACd;AAAA,cACF,CAAC;AACD,2BAAaA,QAAO,SAAS,QAAQ,QAAQ,IAAI,gBAAgB,CAAC;AAAA,YACpE;AAAA,UACF,CAAC;AAAA,QACH;AAAA,MACF,OAAO;AACL,iBAAS,QAAQ;AACjB,iBAAS,KAAK,CAAC,GAAG,MAAa,cAAc,EAAE,IAAI,SAAS,EAAE,GAAG,EAAE,IAAI,SAAS,EAAE,CAAC,CAAC;AACpF,YAAI,QAAQ;AACZ,QAAO,KAAK,UAAU,aAAW;AAC/B;AACA,cAAI,SAAS,QAAQ,OAAO;AAC5B,2BAAiB;AACjB,cAAI,UAAU,QAAQ,IAAI,SAAS;AACnC,cAAI,mBAAmB,SAAS;AAC9B,sBAAU,QAAQ;AAAA,UACpB;AACA,oBAAU,QAAQ,IAAI,gBAAgB,CAAC;AACvC,kBAAQ,IAAI,UAAU;AAAA,YACpB,MAAM,MAAM;AAAA,YACZ,KAAK;AAAA,YACL,OAAO,MAAM;AAAA,YACb,QAAQ,KAAK,IAAI,MAAM,IAAI,IAAI,QAAQ,MAAM;AAAA,UAC/C,CAAC;AACD,cAAI,QAAQ,UAAU,kBAAkB;AACtC,6BAAiB,SAAS,UAAU,SAAS,CAAC;AAAA,UAChD;AACA,kBAAQ,KAAK,IAAI,QAAQ,QAAQ,QAAQ,MAAM,MAAM;AAAA,QACvD,CAAC;AACD,YAAI,QAAQ,IAAI;AACd,mBAAS,QAAQ;AACjB,cAAI,aAAa;AACjB,UAAO,KAAK,UAAU,aAAW;AAC/B;AACA,gBAAIA,UAAS,QAAQ,IAAI,QAAQ;AACjC,gBAAIA,SAAQ;AACV,kBAAI,MAAMA,QAAO,OAAO,KAAK;AAC7B,kBAAI,SAASA,QAAO,UAAU,KAAK;AACnC,kBAAI,SAAS,YAAY;AACvB,yBAAS;AACT,sBAAM,SAAS,QAAQ,OAAO;AAAA,cAChC;AACA,sBAAQ,IAAI,UAAU;AAAA,gBACpB,MAAMA,QAAO;AAAA,gBACb;AAAA,gBACA,OAAOA,QAAO;AAAA,gBACd;AAAA,cACF,CAAC;AACD,2BAAa,SAAS,QAAQ,OAAO,IAAI,QAAQ,IAAI,gBAAgB,CAAC;AAAA,YACxE;AAAA,UACF,CAAC;AAAA,QACH;AAAA,MACF;AACA,UAAI,iBAAiB,KAAK,eAAe,GAAG;AAC1C,aAAK,WAAW,KAAK,KAAK,KAAK,OAAO,KAAK,cAAc,MAAM;AAC7D,eAAK,gBAAgB;AAAA,QACvB,CAAC,CAAC;AAAA,MACJ;AAAA,IACF;AAAA,EACF;AAAA,EACA,gBAAgBH,QAAO;AACrB,WAAO,KAAK,cAAc,QAAQA,MAAK;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA,EAIA,UAAU;AACR,SAAK,MAAM,KAAK,UAAQ;AACtB,WAAK,WAAW,mBAAmB,IAAI;AACvC,WAAK,KAAK,GAAG,CAAC;AAAA,IAChB,CAAC;AACD,SAAK,MAAM,KAAK,UAAQ;AACtB,WAAK,WAAW,mBAAmB,IAAI;AACvC,WAAK,KAAK,GAAG,CAAC;AAAA,IAChB,CAAC;AAAA,EACH;AAAA,EACA,WAAW;AACT,UAAM,SAAS;AAGf,UAAM,SAAS,KAAK,IAAI,QAAQ;AAChC,QAAI,QAAQ;AACV,aAAO,QAAQ;AAAA,IACjB;AAAA,EACF;AACF;AACA,OAAO,eAAe,SAAS,aAAa;AAAA,EAC1C,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO;AACT,CAAC;AACD,OAAO,eAAe,SAAS,cAAc;AAAA,EAC3C,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO,YAAY,WAAW,OAAO,CAAC,QAAQ,SAAS,CAAC;AAC1D,CAAC;;;ACn+CM,IAAM,mBAAN,cAA+B,UAAU;AAAA,EAC9C,cAAc;AACZ,UAAM,GAAG,SAAS;AAKlB,WAAO,eAAe,MAAM,SAAS;AAAA,MACnC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,KAAK,SAAS,KAAK,QAAQ,IAAI,KAAK,OAAO;AAAA,QAChD,WAAW,CAAC,OAAO;AAAA,QACnB,aAAa;AAAA,QACb,qBAAqB;AAAA,QACrB,MAAM;AAAA,QACN,MAAM;AAAA,QACN,QAAQ;AAAA,QACR,QAAQ;AAAA,MACV,CAAC,CAAC;AAAA,IACJ,CAAC;AAKD,WAAO,eAAe,MAAM,WAAW;AAAA,MACrC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,KAAK,SAAS,KAAK,SAAS,IAAI,KAAK,OAAO;AAAA,QACjD,WAAW,CAAC,SAAS;AAAA,QACrB,aAAa;AAAA,MACf,CAAC,CAAC;AAAA,IACJ,CAAC;AAAA,EACH;AAAA,EACA,YAAY;AACV,SAAK,qBAAqB;AAC1B,SAAK,UAAU,YAAmB,UAAU,KAAK,UAAU,WAAW,CAAC,aAAa,MAAM,SAAS,KAAK,UAAU,WAAW,CAAC;AAC9H,UAAM,WAAW,KAAK;AACtB,aAAS,UAAU,KAAK,KAAK;AAC7B,aAAS,UAAU,KAAK,SAAS;AACjC,aAAS,UAAU,KAAK,OAAO;AAC/B,SAAK,MAAM,IAAI,WAAW,CAAC;AAC3B,SAAK,MAAM,OAAO,OAAO,SAAS;AAAA,MAChC,SAAS;AAAA,IACX,CAAC;AACD,UAAM,gBAAgB,KAAK,MAAM;AACjC,kBAAc,IAAI,eAAe,KAAK;AACtC,kBAAc,OAAO,YAAY;AACjC,kBAAc,SAAS,YAAY,KAAK,MAAM,aAAa;AAC3D,UAAM,UAAU;AAAA,EAClB;AAAA,EACA,eAAe;AACb,UAAM,aAAa;AACnB,SAAK,QAAQ,IAAI,QAAQ,aAAW;AAClC,YAAM,YAAY,KAAK;AACvB,YAAM,UAAU,KAAK;AACrB,UAAI,KAAK,UAAU,EAAE;AACrB,UAAI,KAAK,UAAU,EAAE;AACrB,UAAI,KAAK,QAAQ,EAAE;AACnB,UAAI,KAAK,QAAQ,EAAE;AACnB,YAAM,IAAI,KAAK,OAAO;AACtB,YAAM,IAAI,KAAK,MAAM;AACrB,UAAI,KAAK,IAAI;AACX,SAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;AAAA,MACpB;AACA,UAAI,KAAK,IAAI;AACX,SAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;AAAA,MACpB;AACA,UAAI,KAAK,IAAI,aAAa,MAAM,cAAc;AAC5C,gBAAQ,OAAO,GAAG,CAAC;AACnB,gBAAQ,OAAO,IAAI,CAAC;AACpB,gBAAQ,OAAO,IAAI,CAAC;AACpB,gBAAQ,OAAO,GAAG,CAAC;AACnB,gBAAQ,OAAO,GAAG,CAAC;AACnB,gBAAQ,OAAO,IAAI,CAAC;AACpB,gBAAQ,OAAO,GAAG,CAAC;AACnB,gBAAQ,OAAO,GAAG,CAAC;AACnB,gBAAQ,OAAO,IAAI,CAAC;AACpB,gBAAQ,OAAO,IAAI,CAAC;AAAA,MACtB,OAAO;AACL,gBAAQ,OAAO,GAAG,CAAC;AACnB,gBAAQ,OAAO,GAAG,EAAE;AACpB,gBAAQ,OAAO,GAAG,EAAE;AACpB,gBAAQ,OAAO,GAAG,CAAC;AACnB,gBAAQ,OAAO,GAAG,CAAC;AACnB,gBAAQ,OAAO,GAAG,EAAE;AACpB,gBAAQ,OAAO,GAAG,CAAC;AACnB,gBAAQ,OAAO,GAAG,CAAC;AACnB,gBAAQ,OAAO,GAAG,EAAE;AACpB,gBAAQ,OAAO,GAAG,EAAE;AAAA,MACtB;AAAA,IACF,CAAC;AAAA,EACH;AACF;AACA,OAAO,eAAe,kBAAkB,aAAa;AAAA,EACnD,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO;AACT,CAAC;AACD,OAAO,eAAe,kBAAkB,cAAc;AAAA,EACpD,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO,UAAU,WAAW,OAAO,CAAC,iBAAiB,SAAS,CAAC;AACjE,CAAC;;;AC7GM,IAAM,OAAN,cAAmB,SAAS;AAAA,EACjC,iBAAiB;AACf,UAAM,eAAe;AACrB,QAAI,KAAK,eAAe,OAAO,KAAK,KAAK,eAAe,QAAQ,GAAG;AACjE,WAAK,SAAS;AAAA,IAChB;AAAA,EACF;AACF;AACA,OAAO,eAAe,MAAM,aAAa;AAAA,EACvC,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO;AACT,CAAC;AACD,OAAO,eAAe,MAAM,cAAc;AAAA,EACxC,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO,SAAS,WAAW,OAAO,CAAC,KAAK,SAAS,CAAC;AACpD,CAAC;;;ACVM,IAAM,WAAN,cAAuB,UAAU;AAAA,EACtC,cAAc;AACZ,UAAM,GAAG,SAAS;AAClB,WAAO,eAAe,MAAM,eAAe;AAAA,MACzC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AAMD,WAAO,eAAe,MAAM,SAAS;AAAA,MACnC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,KAAK,SAAS,KAAK,KAAK,IAAI,KAAK,OAAO;AAAA,QAC7C,WAAW,CAAC,GAAG;AAAA,MACjB,CAAC,CAAC;AAAA,IACJ,CAAC;AAMD,WAAO,eAAe,MAAM,SAAS;AAAA,MACnC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,KAAK,SAAS,KAAK,KAAK,IAAI,KAAK,OAAO;AAAA,QAC7C,WAAW,CAAC,GAAG;AAAA,MACjB,CAAC,CAAC;AAAA,IACJ,CAAC;AAMD,WAAO,eAAe,MAAM,aAAa;AAAA,MACvC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,KAAK,SAAS,KAAK,SAAS,IAAI,KAAK,OAAO;AAAA,QACjD,WAAW,CAAC,aAAa,QAAQ;AAAA,QACjC,OAAO;AAAA,MACT,CAAC,CAAC;AAAA,IACJ,CAAC;AACD,WAAO,eAAe,MAAM,cAAc;AAAA,MACxC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,cAAc;AAAA,MACxC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACL;AAAA,IACF,CAAC;AACD,WAAO,eAAe,MAAM,eAAe;AAAA,MACzC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,QACL,GAAG;AAAA,QACH,GAAG;AAAA,MACL;AAAA,IACF,CAAC;AACD,WAAO,eAAe,MAAM,aAAa;AAAA,MACvC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,aAAa;AAAA,MACvC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AAID,WAAO,eAAe,MAAM,SAAS;AAAA,MACnC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,QAAQ;AAAA,MAClC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,QAAQ;AAAA,MAClC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EACA,YAAY;AACV,SAAK,UAAU,YAAmB,UAAU,KAAK,UAAU,WAAW,CAAC,MAAM,QAAQ,CAAC;AACtF,UAAM,UAAU;AAChB,SAAK,OAAO;AAAA,MACV,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,YAAY;AAAA,MACZ,UAAU;AAAA,IACZ,CAAC;AACD,SAAK,OAAO,OAAO,UAAU;AAAA,MAC3B,SAAS;AAAA,MACT,SAAS;AAAA,IACX,CAAC;AACD,SAAK,WAAW;AAChB,SAAK,cAAc,WAAW,KAAK;AACnC,SAAK,WAAW,KAAK,KAAK,WAAW,MAAM;AACzC,WAAK,WAAW,WAAW,IAAI;AAAA,IACjC,GAAG,GAAG,CAAC;AACP,SAAK,WAAW,KAAK,KAAK,MAAM,OAAO,GAAG,mBAAmB,MAAM;AACjE,WAAK,aAAa;AAAA,IACpB,CAAC,CAAC;AACF,SAAK,WAAW,KAAK,KAAK,MAAM,OAAO,GAAG,mBAAmB,MAAM;AACjE,WAAK,aAAa;AAAA,IACpB,CAAC,CAAC;AACF,SAAK,WAAW,KAAK,KAAK,MAAM,OAAO,GAAG,SAAS,MAAM,KAAK,iBAAiB,CAAC,CAAC;AACjF,SAAK,WAAW,KAAK,KAAK,MAAM,OAAO,GAAG,QAAQ,MAAM,KAAK,gBAAgB,CAAC,CAAC;AAC/E,SAAK,WAAW,KAAK,KAAK,MAAM,OAAO,GAAG,SAAS,MAAM,KAAK,iBAAiB,CAAC,CAAC;AACjF,SAAK,WAAW,KAAK,KAAK,MAAM,OAAO,GAAG,QAAQ,MAAM,KAAK,gBAAgB,CAAC,CAAC;AAC/E,QAAW,SAAS,gBAAgB,GAAG;AACrC,WAAK,WAAW,KAAY,iBAAiB,UAAU,WAAW,QAAM;AACtE,aAAK,gBAAuB,YAAY,EAAE,GAAG,GAAG,OAAO;AAAA,MACzD,CAAC,CAAC;AAAA,IACJ;AAAA,EACF;AAAA,EACA,cAAc;AACZ,UAAM,QAAQ,KAAK;AACnB,QAAI,OAAO;AACT,YAAM,cAAc,SAAS,cAAc,KAAK,IAAI,UAAU,KAAK,SAAS,OAAO;AAAA,IACrF;AAAA,EACF;AAAA,EACA,eAAe;AACb,QAAI,IAAI,KAAK,MAAM,EAAE;AACrB,QAAI,UAAU;AACd,QAAI,IAAI,KAAK,IAAI,KAAK,MAAM,GAAG;AAC7B,gBAAU;AAAA,IACZ;AACA,SAAK,MAAM,WAAW,WAAW,OAAO;AAAA,EAC1C;AAAA,EACA,eAAe;AACb,QAAI,IAAI,KAAK,MAAM,EAAE;AACrB,QAAI,UAAU;AACd,QAAI,IAAI,KAAK,IAAI,KAAK,OAAO,GAAG;AAC9B,gBAAU;AAAA,IACZ;AACA,SAAK,MAAM,WAAW,WAAW,OAAO;AAAA,EAC1C;AAAA,EACA,gBAAgB,KAAK,SAAS;AAC5B,QAAI,MAAM;AACV,UAAM,QAAQ,KAAK;AACnB,QAAI;AACJ,QAAI,SAAS,MAAM,MAAM,QAAQ;AAC/B,UAAI,KAAK,MAAM,QAAQ,KAAK,KAAK,GAAG;AAClC,cAAM;AACN,eAAO,MAAM,MAAM,SAAS,CAAC;AAAA,MAC/B,WAAW,KAAK,MAAM,QAAQ,KAAK,KAAK,GAAG;AACzC,eAAO,MAAM,MAAM,SAAS,CAAC;AAC7B,cAAM;AAAA,MACR;AACA,UAAI,IAAI;AACR,UAAI,SAAS;AACX,YAAI;AAAA,MACN;AACA,UAAI,MAAM;AACR,YAAI,WAAW,KAAK,IAAI,UAAU,EAAE,IAAI,YAAY,KAAK;AACzD,YAAI;AACJ,YAAI,OAAO,gBAAgB,OAAO,aAAa;AAC7C,iBAAO;AAAA,QACT,WAAW,OAAO,eAAe,OAAO,WAAW;AACjD,iBAAO;AAAA,QACT,WAAW,OAAO,OAAO;AACvB,iBAAO;AAAA,QACT;AACA,YAAI,QAAQ,MAAM;AAChB,cAAI,UAAU;AACZ,oBAAQ;AAAA,UACV;AACA,eAAK,IAAI,KAAK,KAAK,aAAa,OAAO,CAAC,CAAC;AAAA,QAC3C;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,mBAAmB;AACjB,SAAK,cAAc,KAAK,IAAI,cAAc,KAAK;AAC/C,SAAK,OAAO;AAAA,MACV,WAAW,KAAK,WAAW,aAAa,CAAC;AAAA,MACzC,WAAW,KAAK,WAAW,aAAa,CAAC;AAAA,MACzC,YAAY;AAAA,IACd,CAAC;AACD,SAAK,gBAAgB,KAAK;AAAA,EAC5B;AAAA,EACA,kBAAkB;AAChB,QAAI,KAAK,MAAM,QAAQ,KAAK,KAAK,MAAM,QAAQ,GAAG;AAChD,WAAK,OAAO;AAAA,QACV,WAAW;AAAA,QACX,WAAW;AAAA,QACX,YAAY,KAAK;AAAA,MACnB,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EACA,mBAAmB;AACjB,UAAM,iBAAiB;AACvB,QAAI,KAAK,QAAQ,OAAO,GAAG;AACzB,WAAK,YAAY;AACjB,YAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,UAAI,OAAO;AACT,cAAM,UAAU,MAAM,IAAI,SAAS;AACnC,YAAI,SAAS;AACX,eAAK,YAAY;AACjB,eAAK,WAAW,KAAK,QAAQ,GAAG,WAAW,MAAM;AAC/C,iBAAK,aAAa,OAAO;AAAA,UAC3B,CAAC,CAAC;AAAA,QACJ;AAAA,MACF;AAAA,IACF;AACA,QAAI,KAAK,QAAQ,OAAO,GAAG;AACzB,WAAK,YAAY;AACjB,YAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,UAAI,OAAO;AACT,cAAM,UAAU,MAAM,IAAI,SAAS;AACnC,YAAI,SAAS;AACX,eAAK,YAAY;AACjB,eAAK,WAAW,KAAK,QAAQ,GAAG,WAAW,MAAM;AAC/C,iBAAK,aAAa,OAAO;AAAA,UAC3B,CAAC,CAAC;AAAA,QACJ;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,kBAAkB;AAChB,UAAM,QAAQ,KAAK;AACnB,QAAI,OAAO;AACT,YAAM,WAAW,KAAK,IAAI,UAAU;AACpC,YAAM,cAAc,CAAC;AACrB,UAAI,UAAU;AACZ,QAAO,KAAK,UAAU,YAAU;AAC9B,gBAAMI,SAAQ,OAAO;AACrB,cAAIA,QAAO;AACT,wBAAY,KAAKA,MAAK;AAAA,UACxB;AAAA,QACF,CAAC;AAAA,MACH;AACA,YAAM,eAAe;AAAA,IACvB;AAAA,EACF;AAAA,EACA,kBAAkB;AAChB,UAAM,gBAAgB;AACtB,SAAK,gBAAgB;AACrB,QAAI,KAAK,QAAQ,WAAW,KAAK,KAAK,QAAQ,WAAW,GAAG;AAC1D,YAAM,YAAY,KAAK,IAAI,WAAW;AACtC,YAAM,YAAY,KAAK,IAAI,WAAW;AACtC,UAAI,aAAa,QAAQ,aAAa,MAAM;AAC1C,aAAK,KAAK,CAAC;AAAA,MACb,OAAO;AACL,aAAK,aAAa,KAAK,SAAS,KAAK,UAAU,KAAK,IAAI,aAAa,CAAC,GAAG,KAAK,IAAI,aAAa,CAAC,CAAC,CAAC;AAClG,aAAK,WAAW;AAAA,MAClB;AAAA,IACF;AAAA,EACF;AAAA,EACA,aAAa,SAAS;AACpB,QAAI,IAAU,MAAM,KAAK,SAAS,QAAQ,QAAQ,IAAI,WAAW;AAAA,MAC/D,GAAG;AAAA,MACH,GAAG;AAAA,IACL,CAAC,CAAC,EAAE,GAAG,CAAC;AACR,QAAI,KAAK,QAAQ,GAAG;AAClB,WAAK,MAAM,QAAQ;AAAA,QACjB,KAAK;AAAA,QACL,IAAI;AAAA,QACJ,UAAU,QAAQ,IAAI,qBAAqB,CAAC;AAAA,QAC5C,QAAQ,QAAQ,IAAI,iBAAiB;AAAA,MACvC,CAAC;AACD,WAAK,OAAO;AAAA,IACd;AAAA,EACF;AAAA,EACA,aAAa,SAAS;AACpB,QAAI,IAAU,MAAM,KAAK,SAAS,QAAQ,QAAQ,IAAI,WAAW;AAAA,MAC/D,GAAG;AAAA,MACH,GAAG;AAAA,IACL,CAAC,CAAC,EAAE,GAAG,CAAC;AACR,QAAI,KAAK,QAAQ,GAAG;AAClB,WAAK,MAAM,QAAQ;AAAA,QACjB,KAAK;AAAA,QACL,IAAI;AAAA,QACJ,UAAU,QAAQ,IAAI,qBAAqB,CAAC;AAAA,QAC5C,QAAQ,QAAQ,IAAI,iBAAiB;AAAA,MACvC,CAAC;AACD,WAAK,OAAO;AAAA,IACd;AAAA,EACF;AAAA,EACA,aAAa;AACX,SAAK,MAAM,IAAI,QAAQ,aAAW;AAChC,cAAQ,OAAO,GAAG,CAAC;AACnB,cAAQ,OAAO,GAAG,KAAK,OAAO,CAAC;AAAA,IACjC,CAAC;AACD,SAAK,MAAM,IAAI,QAAQ,aAAW;AAChC,cAAQ,OAAO,GAAG,CAAC;AACnB,cAAQ,OAAO,KAAK,MAAM,GAAG,CAAC;AAAA,IAChC,CAAC;AAAA,EACH;AAAA,EACA,eAAe;AACb,QAAI,KAAK,IAAI,YAAY,GAAG;AAC1B,WAAK,aAAa,KAAK,SAAS,KAAK,UAAU,KAAK,IAAI,aAAa,CAAC,GAAG,KAAK,IAAI,aAAa,CAAC,CAAC,CAAC;AAAA,IACpG;AACA,SAAK,WAAW;AAAA,EAClB;AAAA,EACA,UAAU,OAAO;AACf,SAAK,QAAQ;AACb,SAAK,gBAAgB;AACrB,UAAM,gBAAgB,MAAM;AAC5B,SAAK,OAAO,GAAG,iBAAiB,MAAM;AACpC,WAAK,WAAW,KAAK,KAAK,WAAW,MAAM;AACzC,aAAK,aAAa;AAAA,MACpB,GAAG,EAAE,CAAC;AAAA,IACR,CAAC;AAED,QAAW,SAAS,aAAa,GAAG;AAClC,WAAK,WAAW,KAAK,cAAc,OAAO,GAAG,SAAS,WAAS;AAC7D,YAAW,aAAa,MAAM,aAAa,GAAG;AAC5C,eAAK,YAAY,KAAK;AAAA,QACxB;AAAA,MACF,CAAC,CAAC;AACF,WAAK,YAAY;AAAA,IACnB;AACA,SAAK,WAAW,KAAK,cAAc,OAAO,GAAG,eAAe,WAAS;AACnE,WAAK,kBAAkB,KAAK;AAAA,IAC9B,CAAC,CAAC;AACF,SAAK,WAAW,KAAK,cAAc,OAAO,GAAG,mBAAmB,WAAS;AACvE,WAAK,gBAAgB,KAAK;AAC1B,UAAI,CAAC,MAAM,UAAU,CAAC,KAAK,SAAS,GAAG;AACrC,aAAK,YAAY,KAAK;AAAA,MACxB;AAAA,IACF,CAAC,CAAC;AACF,SAAK,WAAW,KAAK,cAAc,OAAO,GAAG,qBAAqB,WAAS;AACzE,UAAI,CAAC,KAAK,IAAI,UAAU,GAAG;AACzB,YAAY,KAAK,cAAc,WAAW,EAAE,UAAU,KAAK,CAAC,MAAM,UAAU,KAAK,SAAS,GAAG;AAG3F;AAAA,QACF;AAAA,MACF;AACA,WAAK,YAAY,KAAK;AACtB,UAAI,KAAK,MAAM,KAAK,YAAY,IAAI,MAAM,MAAM,GAAG,KAAK,YAAY,IAAI,MAAM,MAAM,CAAC,IAAI,GAAG;AAC1F,aAAK,gBAAgB;AACrB,aAAK,cAAc,MAAM;AAAA,MAC3B;AAAA,IACF,CAAC,CAAC;AACF,UAAM,SAAS,KAAK;AACpB,QAAI,QAAQ;AACV,aAAO,SAAS,UAAU,KAAK,SAAS;AAAA,IAC1C;AAAA,EACF;AAAA,EACA,QAAQC,QAAO;AACb,UAAM,QAAQ,KAAK;AACnB,QAAI,OAAO;AACT,aAAO,MAAM,OAAOA,MAAK;AAAA,IAC3B;AACA,WAAO;AAAA,EACT;AAAA,EACA,kBAAkB,OAAO;AACvB,QAAI,MAAM,cAAc,UAAU,GAAG;AACnC;AAAA,IACF;AACA,UAAM,YAAY,MAAM;AACxB,QAAI,QAAQ,KAAK,SAAS,QAAQ,SAAS;AAC3C,UAAM,QAAQ,KAAK;AACnB,SAAK,UAAU,IAAI,QAAQ,MAAM;AAAA,IAAC,CAAC;AACnC,QAAI,SAAS,KAAK,QAAQ,KAAK,GAAG;AAChC,WAAK,aAAa;AAClB,UAAI,KAAK,IAAI,UAAU,KAAK,QAAQ;AAClC,aAAK,UAAU,KAAK;AACpB,cAAM,OAAO;AACb,YAAI,KAAK,OAAO,UAAU,IAAI,GAAG;AAC/B,eAAK,OAAO,SAAS,MAAM;AAAA,YACzB;AAAA,YACA,QAAQ;AAAA,YACR,eAAe,MAAM;AAAA,UACvB,CAAC;AAAA,QACH;AAAA,MACF;AACA,UAAI,YAAY,KAAK,aAAa,KAAK,EAAE;AACzC,UAAI,YAAY,KAAK,aAAa,KAAK,EAAE;AACzC,WAAK,WAAW,iBAAiB,SAAS;AAC1C,WAAK,WAAW,iBAAiB,SAAS;AAAA,IAC5C;AAAA,EACF;AAAA,EACA,gBAAgB,OAAO;AAErB,QAAI,KAAK,YAAY;AACnB,YAAM,WAAW,KAAK,IAAI,YAAY,MAAM;AAC5C,UAAI,YAAY,QAAQ;AACtB,YAAI,SAAS,OAAO,CAAC,MAAM,KAAK;AAC9B,eAAK,UAAU,KAAK;AAAA,QACtB;AACA,cAAM,YAAY,MAAM;AACxB,YAAI,QAAQ,KAAK,SAAS,QAAQ,SAAS;AAC3C,cAAM,YAAY,KAAK;AACvB,cAAM,gBAAgB,KAAK,IAAI,iBAAiB,CAAC;AACjD,YAAI,SAAS,WAAW;AACtB,cAAI,WAAW;AACf,cAAI,aAAa,WAAW,aAAa,YAAY,aAAa,aAAa,aAAa,YAAY;AACtG,gBAAI,KAAK,IAAI,MAAM,IAAI,UAAU,CAAC,IAAI,eAAe;AACnD,yBAAW;AAAA,YACb;AAAA,UACF;AACA,cAAI,aAAa,WAAW,aAAa,YAAY,aAAa,aAAa,aAAa,YAAY;AACtG,gBAAI,KAAK,IAAI,MAAM,IAAI,UAAU,CAAC,IAAI,eAAe;AACnD,yBAAW;AAAA,YACb;AAAA,UACF;AACA,cAAI,UAAU;AACZ,kBAAM,OAAO;AACb,gBAAI,KAAK,OAAO,UAAU,IAAI,GAAG;AAC/B,mBAAK,OAAO,SAAS,MAAM;AAAA,gBACzB;AAAA,gBACA,QAAQ;AAAA,gBACR,eAAe,MAAM;AAAA,cACvB,CAAC;AAAA,YACH;AAAA,UACF,OAAO;AACL,kBAAM,OAAO;AACb,gBAAI,KAAK,OAAO,UAAU,IAAI,GAAG;AAC/B,mBAAK,OAAO,SAAS,MAAM;AAAA,gBACzB;AAAA,gBACA,QAAQ;AAAA,gBACR,eAAe,MAAM;AAAA,cACvB,CAAC;AAAA,YACH;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AACA,SAAK,aAAa;AAAA,EACpB;AAAA,EACA,YAAY,OAAO;AACjB,QAAI,KAAK,WAAW,SAAS,GAAG;AAC9B,YAAM,QAAQ,KAAK;AACnB,UAAI,SAAiB,KAAK,MAAM,cAAc,WAAW,EAAE,SAAS,GAAG;AACrE,aAAK,IAAI,eAAe,IAAI;AAC5B;AAAA,MACF,OAAO;AACL,aAAK,IAAI,eAAe,KAAK;AAAA,MAC/B;AAEA,YAAM,YAAY,MAAM;AACxB,YAAM,YAAY,KAAK;AACvB,UAAI,KAAK,MAAM,UAAU,CAAC,MAAM,KAAK,MAAM,UAAU,CAAC,KAAK,KAAK,MAAM,UAAU,CAAC,MAAM,KAAK,MAAM,UAAU,CAAC,GAAG;AAC9G;AAAA,MACF;AACA,WAAK,aAAa;AAClB,WAAK,WAAW,aAAa,SAAS;AACtC,WAAK,WAAW;AAAA,QACd,GAAG,UAAU;AAAA,QACb,GAAG,UAAU;AAAA,MACf,GAAG,OAAO,MAAM,aAAa;AAAA,IAC/B;AAAA,EACF;AAAA,EACA,aAAaA,QAAO;AAClB,WAAO;AAAA,MACL,GAAGA,OAAM,IAAI,KAAK,MAAM;AAAA,MACxB,GAAGA,OAAM,IAAI,KAAK,OAAO;AAAA,IAC3B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,WAAWA,QAAO,WAAW,eAAe;AAC1C,QAAI,CAACA,QAAO;AACV,MAAAA,SAAQ,KAAK;AAAA,IACf;AACA,UAAM,aAAa,KAAK,IAAI,YAAY;AACxC,QAAI,CAACA,QAAO;AACV,WAAK,KAAK,CAAC;AACX;AAAA,IACF;AACA,SAAK,aAAaA;AAClB,QAAI,QAAQ,KAAK,SAAS,QAAQA,MAAK;AACvC,QAAI,QAAQ,KAAK;AACjB,QAAI,UAAU,KAAK,QAAQ,KAAK,KAAK,KAAK,aAAa;AACrD,YAAM,aAAaA;AACnB,UAAI,KAAK,SAAS,GAAG;AACnB,aAAK,KAAK;AACV,cAAM,WAAW,KAAK,IAAI,YAAY,EAAE;AACxC,YAAI,SAAS,OAAO,CAAC,KAAK,KAAK;AAC7B,eAAK,UAAU,IAAI,QAAQ,MAAM;AAAA,UAAC,CAAC;AAAA,QACrC;AAAA,MACF;AACA,UAAI,IAAI,MAAM;AACd,UAAI,IAAI,MAAM;AACd,UAAI,QAAQ,KAAK,aAAa,KAAK;AACnC,WAAK,WAAW,SAAS,KAAK;AAC9B,UAAI,eAAe,KAAK,IAAI,cAAc;AAC1C,UAAI,KAAK,YAAY;AACnB,uBAAe;AAAA,MACjB;AACA,UAAI,gBAAgB,KAAK,IAAI,WAAW;AACxC,UAAI,YAAY,MAAM;AACtB,UAAU,SAAS,aAAa,GAAG;AACjC,oBAAY;AAAA,MACd;AACA,UAAI,gBAAgB,KAAK,IAAI,WAAW;AACxC,UAAI,YAAY,MAAM;AACtB,UAAU,SAAS,aAAa,GAAG;AACjC,oBAAY;AAAA,MACd;AACA,WAAK,WAAW,aAAa,SAAS;AACtC,WAAK,WAAW,aAAa,SAAS;AACtC,YAAM,KAAK,KAAK,UAAU,WAAW,SAAS;AAC9C,UAAI,GAAG;AACP,UAAI,GAAG;AACP,YAAM,MAAM,KAAK,UAAQ;AACvB,aAAK,sBAAsB,WAAW,YAAY;AAClD,YAAI,YAAY;AACd,eAAK,iBAAiB;AAAA,QACxB;AAAA,MACF,CAAC;AACD,YAAM,MAAM,KAAK,UAAQ;AACvB,aAAK,sBAAsB,WAAW,YAAY;AAClD,YAAI,YAAY;AACd,eAAK,iBAAiB;AAAA,QACxB;AAAA,MACF,CAAC;AACD,UAAI,CAAC,WAAW;AACd,cAAM,sBAAsB;AAC5B,cAAM,OAAO;AACb,YAAI,KAAK,OAAO,UAAU,IAAI,GAAG;AAC/B,eAAK,OAAO,SAAS,MAAM;AAAA,YACzB;AAAA,YACA,QAAQ;AAAA,YACR,OAAOA;AAAA,YACP;AAAA,UACF,CAAC;AAAA,QACH;AAAA,MACF;AACA,WAAK,aAAa,GAAG,CAAC;AACtB,YAAM,gBAAgB;AAAA,IACxB,WAAW,CAAC,KAAK,YAAY;AAC3B,UAAI,CAAC,YAAY;AACf,aAAK,KAAK,CAAC;AACX,cAAM,OAAO;AACb,YAAI,KAAK,OAAO,UAAU,IAAI,GAAG;AAC/B,eAAK,OAAO,SAAS,MAAM;AAAA,YACzB;AAAA,YACA,QAAQ;AAAA,UACV,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF;AACA,QAAI,KAAK,cAAc,KAAK,IAAI,UAAU,KAAK,QAAQ;AACrD,WAAK,iBAAiB,KAAK;AAAA,IAC7B;AAAA,EACF;AAAA,EACA,UAAU,WAAW,WAAW;AAC9B,WAAO;AAAA,MACL,GAAG,KAAK,MAAM,IAAI;AAAA,MAClB,GAAG,KAAK,OAAO,IAAI;AAAA,IACrB;AAAA,EACF;AAAA,EACA,aAAa,GAAG,GAAG;AACjB,QAAI,CAAC,KAAK,WAAW;AACnB,WAAK,MAAM,IAAI,KAAK,CAAC;AAAA,IACvB;AACA,QAAI,CAAC,KAAK,WAAW;AACnB,WAAK,MAAM,IAAI,KAAK,CAAC;AAAA,IACvB;AACA,SAAK,WAAW;AAAA,EAClB;AAAA,EACA,iBAAiBA,QAAO;AACtB,UAAM,YAAY,KAAK;AACvB,UAAM,WAAW,KAAK,IAAI,UAAU;AACpC,UAAM,IAAI,KAAK,MAAM;AACrB,UAAM,IAAI,KAAK,OAAO;AACtB,QAAIA,OAAM,IAAI,GAAG;AACf,MAAAA,OAAM,IAAI;AAAA,IACZ;AACA,QAAIA,OAAM,IAAI,GAAG;AACf,MAAAA,OAAM,IAAI;AAAA,IACZ;AACA,QAAIA,OAAM,IAAI,GAAG;AACf,MAAAA,OAAM,IAAI;AAAA,IACZ;AACA,QAAIA,OAAM,IAAI,GAAG;AACf,MAAAA,OAAM,IAAI;AAAA,IACZ;AACA,cAAU,IAAI,QAAQ,aAAW;AAC/B,YAAM,YAAY,KAAK;AACvB,UAAI,WAAW;AACb,YAAI,aAAa,YAAY,aAAa,YAAY;AACpD,kBAAQ,OAAO,UAAU,GAAG,UAAU,CAAC;AACvC,kBAAQ,OAAO,UAAU,GAAGA,OAAM,CAAC;AACnC,kBAAQ,OAAOA,OAAM,GAAGA,OAAM,CAAC;AAC/B,kBAAQ,OAAOA,OAAM,GAAG,UAAU,CAAC;AACnC,kBAAQ,OAAO,UAAU,GAAG,UAAU,CAAC;AAAA,QACzC,WAAW,aAAa,WAAW,aAAa,WAAW;AACzD,kBAAQ,OAAO,UAAU,GAAG,CAAC;AAC7B,kBAAQ,OAAO,UAAU,GAAG,CAAC;AAC7B,kBAAQ,OAAOA,OAAM,GAAG,CAAC;AACzB,kBAAQ,OAAOA,OAAM,GAAG,CAAC;AACzB,kBAAQ,OAAO,UAAU,GAAG,CAAC;AAAA,QAC/B,WAAW,aAAa,WAAW,aAAa,WAAW;AACzD,kBAAQ,OAAO,GAAG,UAAU,CAAC;AAC7B,kBAAQ,OAAO,GAAG,UAAU,CAAC;AAC7B,kBAAQ,OAAO,GAAGA,OAAM,CAAC;AACzB,kBAAQ,OAAO,GAAGA,OAAM,CAAC;AACzB,kBAAQ,OAAO,GAAG,UAAU,CAAC;AAAA,QAC/B;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,UAAU;AACR,QAAI,KAAK,SAAS,GAAG;AACnB,UAAI,QAAQ,KAAK;AACjB,UAAI,OAAO;AACT,cAAM,MAAM,KAAK,UAAQ;AACvB,eAAK,iBAAiB;AAAA,QACxB,CAAC;AACD,cAAM,MAAM,KAAK,UAAQ;AACvB,eAAK,iBAAiB;AAAA,QACxB,CAAC;AACD,cAAM,OAAO,KAAK,YAAU;AAC1B,iBAAO,iBAAiB;AAAA,QAC1B,CAAC;AAAA,MACH;AAAA,IACF;AACA,UAAM,QAAQ;AAAA,EAChB;AAAA,EACA,UAAU;AACR,QAAI,CAAC,KAAK,SAAS,GAAG;AACpB,UAAI,QAAQ,KAAK;AACjB,UAAI,OAAO;AACT,cAAM,MAAM,KAAK,UAAQ;AACvB,eAAK,iBAAiB;AAAA,QACxB,CAAC;AACD,cAAM,MAAM,KAAK,UAAQ;AACvB,eAAK,iBAAiB;AAAA,QACxB,CAAC;AAAA,MACH;AAAA,IACF;AACA,UAAM,QAAQ;AAAA,EAChB;AAAA,EACA,WAAW;AACT,UAAM,SAAS;AACf,SAAK,UAAU,QAAQ;AAAA,EACzB;AACF;AACA,OAAO,eAAe,UAAU,aAAa;AAAA,EAC3C,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO;AACT,CAAC;AACD,OAAO,eAAe,UAAU,cAAc;AAAA,EAC5C,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO,UAAU,WAAW,OAAO,CAAC,SAAS,SAAS,CAAC;AACzD,CAAC;;;ACxqBD,SAAS,IAAI,MAAM,OAAO;AACxB,MAAI,QAAQ,MAAM;AAChB,WAAO;AAAA,EACT,WAAW,SAAS,MAAM;AACxB,WAAO;AAAA,EACT,WAAW,QAAQ,MAAM;AACvB,WAAO;AAAA,EACT,OAAO;AACL,WAAO;AAAA,EACT;AACF;AAIA,SAAS,IAAI,MAAM,OAAO;AACxB,MAAI,QAAQ,MAAM;AAChB,WAAO;AAAA,EACT,WAAW,SAAS,MAAM;AACxB,WAAO;AAAA,EACT,WAAW,QAAQ,MAAM;AACvB,WAAO;AAAA,EACT,OAAO;AACL,WAAO;AAAA,EACT;AACF;AAMO,IAAM,WAAN,cAAuB,OAAO;AAAA,EACnC,cAAc;AACZ,UAAM,GAAG,SAAS;AAClB,WAAO,eAAe,MAAM,WAAW;AAAA,MACrC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,WAAW;AAAA,MACrC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,eAAe;AAAA,MACzC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,eAAe;AAAA,MACzC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,cAAc;AAAA,MACxC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,eAAe;AAAA,MACzC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,cAAc;AAAA,MACxC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,eAAe;AAAA,MACzC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,cAAc;AAAA,MACxC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,eAAe;AAAA,MACzC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,uBAAuB;AAAA,MACjD,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,aAAa;AAAA,MACvC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC;AAAA,IACV,CAAC;AACD,WAAO,eAAe,MAAM,sBAAsB;AAAA,MAChD,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,MAAM;AAAA,MAChC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,MAAM;AAAA,MAChC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,YAAY;AAAA,MACtC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC;AAAA,IACV,CAAC;AAMD,WAAO,eAAe,MAAM,iBAAiB;AAAA,MAC3C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,KAAK,SAAS,KAAK,UAAU,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC;AAAA,IACzD,CAAC;AAMD,WAAO,eAAe,MAAM,cAAc;AAAA,MACxC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,IAAI,KAAK;AAAA,IAClB,CAAC;AACD,WAAO,eAAe,MAAM,YAAY;AAAA,MACtC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,iBAAiB;AAAA,MAC3C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC;AAAA,IACV,CAAC;AACD,WAAO,eAAe,MAAM,oBAAoB;AAAA,MAC9C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC;AAAA,IACV,CAAC;AACD,WAAO,eAAe,MAAM,kBAAkB;AAAA,MAC5C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC;AAAA,IACV,CAAC;AACD,WAAO,eAAe,MAAM,gBAAgB;AAAA,MAC1C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,gBAAgB;AAAA,MAC1C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,gBAAgB;AAAA,MAC1C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,gBAAgB;AAAA,MAC1C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,gBAAgB;AAAA,MAC1C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,gBAAgB;AAAA,MAC1C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC,UAAU,cAAc,aAAa,YAAY;AAAA,IAC3D,CAAC;AACD,WAAO,eAAe,MAAM,gBAAgB;AAAA,MAC1C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC,UAAU,cAAc,aAAa,YAAY;AAAA,IAC3D,CAAC;AACD,WAAO,eAAe,MAAM,iBAAiB;AAAA,MAC3C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,iBAAiB;AAAA,MAC3C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AAED,WAAO,eAAe,MAAM,qBAAqB;AAAA,MAC/C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,qBAAqB;AAAA,MAC/C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AAED,WAAO,eAAe,MAAM,sBAAsB;AAAA,MAChD,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,sBAAsB;AAAA,MAChD,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,kBAAkB;AAAA,MAC5C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,IAAI,SAAS,MAAM,QAAW,CAAC,CAAC;AAAA,IACzC,CAAC;AACD,WAAO,eAAe,MAAM,cAAc;AAAA,MACxC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,kBAAkB;AAAA,MAC5C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,kBAAkB;AAAA,MAC5C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,WAAW;AAAA,MACrC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,WAAW;AAAA,MACrC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EACA,YAAY;AACV,SAAK,OAAO,KAAK,aAAa,aAAa,iBAAiB,eAAe;AAC3E,SAAK,YAAY,KAAK,UAAU,UAAU,cAAc,cAAc,aAAa,aAAa,cAAc,YAAY;AAC1H,SAAK,eAAe,OAAO,CAAC;AAC5B,SAAK,eAAe,OAAO,CAAC;AAE5B,SAAK,eAAe,cAAc,eAAe;AACjD,SAAK,eAAe,cAAc,eAAe;AACjD,SAAK,eAAe,kBAAkB,mBAAmB;AACzD,SAAK,eAAe,kBAAkB,mBAAmB;AACzD,SAAK,eAAe,iBAAiB,kBAAkB;AACvD,SAAK,eAAe,iBAAiB,kBAAkB;AACvD,SAAK,eAAe,kBAAkB,mBAAmB;AACzD,SAAK,eAAe,kBAAkB,mBAAmB;AACzD,SAAK,eAAe,oBAAoB,KAAK;AAC7C,SAAK,eAAe,oBAAoB,KAAK;AAC7C,SAAK,eAAe,qBAAqB,MAAM;AAC/C,SAAK,eAAe,qBAAqB,MAAM;AAC/C,UAAM,UAAU;AAChB,SAAK,IAAI,eAAe,IAAI;AAC5B,SAAK,WAAW,KAAK,KAAK,WAAW,OAAO,MAAM,YAAU;AAC1D,UAAI,OAAO,SAAS,SAAS;AAC3B,QAAO,KAAK,OAAO,WAAW,eAAa;AACzC,eAAK,iBAAiB,SAAS;AAAA,QACjC,CAAC;AAAA,MACH,WAAW,OAAO,SAAS,QAAQ;AACjC,aAAK,kBAAkB,OAAO,QAAQ;AAAA,MACxC,WAAW,OAAO,SAAS,YAAY;AACrC,aAAK,kBAAkB,OAAO,QAAQ;AAAA,MACxC,WAAW,OAAO,SAAS,eAAe;AACxC,aAAK,kBAAkB,OAAO,QAAQ;AAAA,MACxC,WAAW,OAAO,SAAS,eAAe;AACxC,aAAK,iBAAiB,OAAO,QAAQ;AAAA,MACvC,WAAW,OAAO,SAAS,aAAa;AACtC,aAAK,kBAAkB,OAAO,KAAK;AAAA,MACrC,OAAO;AACL,cAAM,IAAI,MAAM,2BAA2B;AAAA,MAC7C;AAAA,IACF,CAAC,CAAC;AACF,SAAK,OAAO,OAAO,UAAU;AAAA,MAC3B,SAAS;AAAA,MACT,SAAS;AAAA,IACX,CAAC;AACD,SAAK,UAAU,cAAc,MAAM;AACjC,WAAK,KAAK,OAAO,KAAK,cAAc,MAAM;AACxC,aAAK,kBAAkB;AAAA,MACzB,CAAC;AAAA,IACH,CAAC;AACD,SAAK,UAAU,YAAY,MAAM;AAC/B,WAAK,KAAK,OAAO,KAAK,cAAc,MAAM;AACxC,aAAK,kBAAkB;AAAA,MACzB,CAAC;AAAA,IACH,CAAC;AACD,SAAK,gBAAgB;AAAA,EACvB;AAAA,EACA,kBAAkB,WAAW;AAC3B,UAAM,YAAY,UAAU,IAAI,KAAK,OAAO,CAAC,CAAC;AAC9C,cAAU,YAAY;AACtB,SAAK,SAAS,KAAK,SAAS;AAC5B,cAAU,SAAS;AACnB,UAAM,eAAe,UAAU;AAC/B,iBAAa,OAAO,WAAW,IAAI;AACnC,UAAM,OAAO,aAAa;AAC1B,QAAI,MAAM;AACR,WAAK,kBAAkB,cAAc,CAAC,SAAS,QAAQ,CAAC;AACxD,YAAM,SAAS,aAAa,IAAI,QAAQ;AACxC,UAAI,QAAQ;AACV,cAAM,SAAS,OAAO,IAAI,QAAQ;AAClC,YAAI,QAAQ;AACV,iBAAO,WAAW,WAAW,KAAK;AAAA,QACpC;AAAA,MACF;AACA,YAAM,WAAW,aAAa,IAAI,UAAU;AAC5C,UAAI,UAAU;AACZ,kBAAU,IAAI,QAAQ,QAAQ;AAAA,MAChC;AACA,WAAK,kBAAkB,KAAK,YAAY;AAAA,IAC1C;AAAA,EACF;AAAA,EACA,eAAe;AACb,UAAM,aAAa;AACnB,IAAQC,MAAK,KAAK,WAAW,CAAC,MAAM,cAAc;AAChD,MAAO,KAAK,WAAW,cAAY;AACjC,iBAAS,QAAQ;AAAA,MACnB,CAAC;AACD,gBAAU,SAAS;AAAA,IACrB,CAAC;AAAA,EACH;AAAA,EACA,iBAAiB,WAAW;AAC1B,UAAM,eAAe,UAAU;AAC/B,UAAM,OAAO,aAAa;AAC1B,iBAAa,QAAQ;AACrB,IAAO,OAAO,KAAK,mBAAmB,YAAY;AAClD,UAAM,YAAY,UAAU;AAC5B,QAAI,WAAW;AACb,gBAAU,QAAQ;AAAA,IACpB;AAAA,EACF;AAAA,EACA,gBAAgB;AACd,UAAM,cAAc;AACpB,SAAK,gBAAgB,CAAC;AACtB,SAAK,gBAAgB,CAAC;AACtB,SAAK,oBAAoB,CAAC;AAC1B,SAAK,oBAAoB,CAAC;AAC1B,SAAK,qBAAqB,CAAC;AAC3B,SAAK,qBAAqB,CAAC;AAC3B,QAAI,KAAK,cAAc;AACrB,MAAO,KAAK,KAAK,cAAc,SAAO;AACpC,cAAM,QAAQ,KAAK,IAAI,MAAM,OAAO;AACpC,YAAI,OAAO;AACT,eAAK,cAAc,KAAK,GAAG;AAC3B,cAAIC,SAAQ,KAAK,IAAI,MAAM,MAAM;AACjC,eAAK,mBAAmB,KAAKA,MAAK;AAClC,cAAIA,OAAM,QAAQ,SAAS,KAAK,IAAI;AAClC,iBAAK,kBAAkB,KAAKA,OAAM,MAAM,SAAS,EAAE,CAAC,CAAC;AAAA,UACvD,OAAO;AACL,iBAAK,kBAAkB,KAAKA,MAAK;AAAA,UACnC;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AACA,QAAI,KAAK,cAAc;AACrB,MAAO,KAAK,KAAK,cAAc,SAAO;AACpC,cAAM,QAAQ,KAAK,IAAI,MAAM,OAAO;AACpC,YAAI,OAAO;AACT,eAAK,cAAc,KAAK,GAAG;AAC3B,cAAIA,SAAQ,KAAK,IAAI,MAAM,MAAM;AACjC,eAAK,mBAAmB,KAAKA,MAAK;AAClC,cAAIA,OAAM,QAAQ,SAAS,KAAK,IAAI;AAClC,iBAAK,kBAAkB,KAAKA,OAAM,MAAM,SAAS,EAAE,CAAC,CAAC;AAAA,UACvD,OAAO;AACL,iBAAK,kBAAkB,KAAKA,MAAK;AAAA,UACnC;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EACA,WAAW;AACT,UAAM,SAAS;AACf,SAAK,WAAW,CAAC;AACjB,UAAM,QAAQ,KAAK;AACnB,QAAI,OAAO;AACT,YAAM,OAAO,YAAY,IAAI;AAAA,IAC/B;AACA,IAAO,YAAY,KAAK,IAAI,OAAO,EAAE,QAAQ,IAAI;AACjD,IAAO,YAAY,KAAK,IAAI,OAAO,EAAE,QAAQ,IAAI;AAAA,EACnD;AAAA;AAAA,EAEA,KAAK,KAAK,OAAO;AACf,QAAI,WAAW,IAAI,KAAK,WAAW,GAAG,GAAG,KAAK;AAC9C,SAAK,WAAW,KAAK,QAAQ;AAAA,EAC/B;AAAA;AAAA,EAEA,KAAK,KAAK,OAAO;AACf,QAAI,WAAW,IAAI,KAAK,WAAW,GAAG,GAAG,KAAK;AAC9C,SAAK,WAAW,KAAK,QAAQ;AAAA,EAC/B;AAAA,EACA,kBAAkB,UAAU;AAC1B,UAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,UAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,UAAM,WAAW,KAAK,IAAI,UAAU;AACpC,QAAI,CAAC,MAAM,UAAU,CAAC,MAAM,QAAQ;AAClC,aAAO;AAAA,IACT;AACA,UAAM,oBAAoB,KAAK,IAAI,qBAAqB,CAAC;AACzD,QAAI,oBAAoB,GAAG;AACzB,UAAI,aAAa,KAAK,WAAW;AACjC,UAAI,WAAW,KAAK,SAAS;AAC7B,UAAI,QAAQ,WAAW;AACvB,UAAI,SAAS,UAAU;AACrB,YAAI,MAAM,IAAI,UAAU,EAAE,WAAW,IAAI,QAAQ,oBAAoB,GAAG;AACtE,iBAAO;AAAA,QACT;AAAA,MACF,WAAW,SAAS,UAAU;AAC5B,YAAI,MAAM,IAAI,UAAU,EAAE,WAAW,IAAI,QAAQ,oBAAoB,GAAG;AACtE,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AACA,QAAI,SAAS,IAAI,KAAK,OAAO,KAAK,QAAQ,SAAS,IAAI,KAAK,OAAO,KAAK,MAAM;AAC5E,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAAA,EACA,kBAAkB;AAChB,UAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,UAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,UAAM,QAAQ,MAAM,WAAW,MAAM;AACrC,UAAM,WAAkB,gBAAgB,KAAK;AAC7C,UAAM,QAAQ,MAAM,WAAW,MAAM;AACrC,UAAM,WAAkB,gBAAgB,KAAK;AAC7C,UAAM,UAAU,MAAM,IAAI,UAAU,EAAE,WAAW,QAAQ;AACzD,UAAM,UAAU,MAAM,IAAI,UAAU,EAAE,WAAW,QAAQ;AACzD,UAAM,OAAO;AACb,UAAM,MAAM;AACZ,UAAM,OAAO;AACb,UAAM,OAAO;AACb,QAAI,MAAM,cAAc,aAAa;AACnC,WAAK,UAAU,KAAK,IAAI,QAAQ,UAAU,IAAI;AAC9C,WAAK,cAAc,KAAK,IAAI,OAAO,WAAW,UAAU,IAAI;AAC5D,WAAK,aAAa,KAAK,IAAI,MAAM,WAAW,UAAU,IAAI;AAC1D,WAAK,cAAc,KAAK,IAAI,OAAO,WAAW,UAAU,IAAI;AAAA,IAC9D,OAAO;AACL,WAAK,UAAU,QAAQ;AACvB,WAAK,cAAc,OAAO,WAAW;AACrC,WAAK,aAAa,MAAM,WAAW;AACnC,WAAK,cAAc,OAAO,WAAW;AAAA,IACvC;AACA,QAAI,MAAM,cAAc,aAAa;AACnC,WAAK,UAAU,KAAK,IAAI,QAAQ,UAAU,IAAI;AAC9C,WAAK,cAAc,KAAK,IAAI,OAAO,WAAW,UAAU,IAAI;AAC5D,WAAK,aAAa,KAAK,IAAI,MAAM,WAAW,UAAU,IAAI;AAC1D,WAAK,cAAc,KAAK,IAAI,OAAO,WAAW,UAAU,IAAI;AAAA,IAC9D,OAAO;AACL,WAAK,UAAU,QAAQ;AACvB,WAAK,cAAc,OAAO,WAAW;AACrC,WAAK,aAAa,MAAM,WAAW;AACnC,WAAK,cAAc,OAAO,WAAW;AAAA,IACvC;AAAA,EACF;AAAA,EACA,SAAS;AACP,UAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,UAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,UAAM,WAAW,KAAK,IAAI,UAAU;AACpC,UAAM,cAAc,KAAK,OAAO,OAAO,QAAQ;AAC/C,UAAM,yBAAyB,KAAK,IAAI,wBAAwB;AAChE,QAAI,aAAa;AACf,UAAI,QAAQ;AACZ,UAAI,wBAAwB;AAC1B,gBAAQ;AAAA,MACV;AACA,UAAI,UAAU,UAAU;AACtB,oBAAY,IAAI,OAAO,KAAK;AAAA,MAC9B,WAAW,UAAU,UAAU;AAC7B,oBAAY,IAAI,OAAO,KAAK;AAAA,MAC9B,OAAO;AACL,oBAAY,IAAI,OAAO,KAAK;AAC5B,oBAAY,IAAI,OAAO,KAAK;AAAA,MAC9B;AAAA,IACF;AAAA,EACF;AAAA,EACA,qBAAqB;AACnB,QAAI,KAAK,QAAQ,aAAa,GAAG;AAC/B,WAAK,iBAAiB,IAAI,eAAe,KAAK,IAAI,aAAa,CAAC;AAAA,IAClE;AAAA,EACF;AAAA,EACA,eAAe;AACb,UAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,UAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,SAAK,IAAI,KAAK,MAAM,EAAE,IAAW,gBAAgB,MAAM,IAAI,WAAW,CAAC,GAAG,MAAM,MAAM,CAAC,IAAI,MAAM,OAAO,IAAI,eAAe,CAAC,CAAC;AAC7H,SAAK,IAAI,KAAK,MAAM,EAAE,IAAW,gBAAgB,MAAM,IAAI,WAAW,CAAC,GAAG,MAAM,OAAO,CAAC,IAAI,MAAM,OAAO,IAAI,cAAc,CAAC,CAAC;AAC7H,SAAK,iBAAiB,IAAI,KAAK,KAAK,EAAE,CAAC;AACvC,SAAK,iBAAiB,IAAI,KAAK,KAAK,EAAE,CAAC;AAAA,EACzC;AAAA,EACA,mBAAmB;AACjB,UAAM,iBAAiB;AACvB,SAAK,WAAW,CAAC;AACjB,QAAI,KAAK,QAAQ,YAAY,KAAK,KAAK,QAAQ,YAAY,KAAK,KAAK,QAAQ,gBAAgB,KAAK,KAAK,QAAQ,gBAAgB,KAAK,KAAK,QAAQ,eAAe,KAAK,KAAK,QAAQ,eAAe,KAAK,KAAK,QAAQ,gBAAgB,KAAK,KAAK,QAAQ,gBAAgB,GAAG;AACtQ,WAAK,cAAc;AACnB,WAAK,gBAAgB;AACrB,WAAK,eAAe;AAAA,IACtB;AACA,QAAI,KAAK,QAAQ,OAAO,KAAK,KAAK,QAAQ,OAAO,GAAG;AAClD,WAAK,eAAe;AAAA,IACtB;AACA,SAAK,IAAI,SAAS,KAAK,IAAI,OAAO,EAAE,MAAM,CAAC;AAC3C,SAAK,IAAI,UAAU,KAAK,IAAI,OAAO,EAAE,OAAO,CAAC;AAC7C,SAAK,mBAAmB;AACxB,UAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,UAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,UAAM,WAAW,KAAK,IAAI,UAAU;AACpC,UAAM,mBAAmB,KAAK,IAAI,kBAAkB;AACpD,QAAI;AACJ,YAAQ,kBAAkB;AAAA,MACxB,KAAK;AACH,wBAAgB,KAAK;AACrB;AAAA,MACF,KAAK;AACH,wBAAgB,KAAK;AACrB;AAAA,MACF,KAAK;AACH,wBAAgB,KAAK;AACrB;AAAA,MACF;AACE,wBAAgB,KAAK;AAAA,IACzB;AACA,SAAK,iBAAiB;AACtB,UAAM,mBAAmB,KAAK,IAAI,kBAAkB;AACpD,QAAI;AACJ,YAAQ,kBAAkB;AAAA,MACxB,KAAK;AACH,wBAAgB,KAAK;AACrB;AAAA,MACF,KAAK;AACH,wBAAgB,KAAK;AACrB;AAAA,MACF,KAAK;AACH,wBAAgB,KAAK;AACrB;AAAA,MACF;AACE,wBAAgB,KAAK;AAAA,IACzB;AACA,SAAK,iBAAiB;AACtB,QAAI,KAAK,QAAQ,UAAU,GAAG;AAC5B,WAAK,OAAO;AAAA,IACd;AACA,SAAK,aAAa;AAClB,UAAM,UAAU,KAAK,IAAI,SAAS;AAClC,QAAI,KAAK,QAAQ,SAAS,GAAG;AAC3B,UAAI,SAAS;AACX,YAAI,KAAK,gBAAgB,CAAC,KAAK,gBAAgB;AAAA,QAAC,OAAO;AACrD,eAAK,OAAO;AAAA,QACd;AAAA,MACF,OAAO;AACL,aAAK,SAAS;AAAA,MAChB;AAAA,IACF;AACA,QAAI,KAAK,gBAAgB,CAAC,KAAK,gBAAgB;AAC7C,WAAK,iBAAiB;AACtB,UAAI,SAAS;AACX,aAAK,OAAO;AAAA,MACd;AACA,MAAO,KAAK,KAAK,WAAW,cAAY;AACtC,QAAO,KAAK,KAAK,mBAAmB,SAAO;AACzC,cAAI,QAAQ,SAAS,IAAI,GAAG;AAC5B,cAAI,SAAS,MAAM;AACjB,gBAAI,SAAS;AACX,uBAAS,KAAK,iBAAiB,UAAU,GAAG;AAAA,YAC9C;AACA,iBAAK,KAAK,QAAQ,KAAK;AACvB,iBAAK,KAAK,QAAQ,KAAK;AAAA,UACzB;AAAA,QACF,CAAC;AACD,QAAO,KAAK,KAAK,mBAAmB,SAAO;AACzC,cAAI,QAAQ,SAAS,IAAI,GAAG;AAC5B,cAAI,SAAS,MAAM;AACjB,gBAAI,SAAS;AACX,uBAAS,KAAK,iBAAiB,UAAU,GAAG;AAAA,YAC9C;AACA,iBAAK,KAAK,QAAQ,KAAK;AACvB,iBAAK,KAAK,QAAQ,KAAK;AAAA,UACzB;AAAA,QACF,CAAC;AACD,cAAM,sBAAsB,UAAU,KAAK,aAAa;AACxD,cAAM,sBAAsB,UAAU,KAAK,aAAa;AAAA,MAC1D,CAAC;AACD,YAAM,qBAAqB;AAC3B,YAAM,qBAAqB;AAC3B,UAAI,CAAC,KAAK,IAAI,cAAc,GAAG;AAC7B,YAAI,KAAK,eAAe,MAAM,KAAK,KAAK,eAAe,MAAM,GAAG;AAC9D,gBAAM,kBAAkB;AAAA,QAC1B;AACA,YAAI,KAAK,eAAe,MAAM,KAAK,KAAK,eAAe,MAAM,GAAG;AAC9D,gBAAM,kBAAkB;AAAA,QAC1B;AAAA,MACF;AACA,WAAK,sBAAsB;AAE3B,UAAI,CAAC,KAAK,IAAI,iBAAiB,GAAG;AAChC,aAAK,kBAAkB,MAAS;AAAA,MAClC;AAAA,IACF;AACA,QAAI,KAAK,QAAQ,KAAK,KAAK,KAAK,QAAQ,KAAK,GAAG;AAC9C,WAAK,sBAAsB;AAAA,IAC7B;AACA,QAAI,CAAC,KAAK,cAAc;AACtB,YAAM,iBAAiB,IAAI;AAC3B,YAAM,iBAAiB,IAAI;AAC3B,WAAK,eAAe;AAAA,IACtB;AACA,QAAI,KAAK,gBAAgB,KAAK,eAAe,YAAY,KAAK,KAAK,eAAe,oBAAoB,KAAK,KAAK,eAAe,UAAU,KAAK,KAAK,QAAQ,KAAK,KAAK,KAAK,QAAQ,KAAK,KAAK,KAAK,eAAe,KAAK,YAAY;AAC/N,UAAI,aAAa,KAAK,WAAW;AACjC,UAAI,WAAW,KAAK,SAAS;AAC7B,UAAI,oBAAoB,KAAK,IAAI,qBAAqB,CAAC;AACvD,UAAI,oBAAoB,KAAK,UAAU;AACrC,YAAI,SAAS,IAAI,UAAU,EAAE,WAAW,KAAK,WAAW,cAAc,mBAAmB;AACvF,eAAK,eAAe;AAAA,QACtB,OAAO;AACL,eAAK,eAAe;AAAA,QACtB;AAAA,MACF;AACA,WAAK,KAAK,QAAQ,cAAc,KAAK,QAAQ,YAAY,KAAK,QAAQ,KAAK,KAAK,KAAK,QAAQ,KAAK,KAAK,KAAK,eAAe,oBAAoB,KAAK,KAAK,eAAe,KAAK,iBAAiB,CAAC,KAAK,qBAAqB;AACvN,aAAK,sBAAsB;AAC3B,cAAM,MAAM,KAAK,IAAI,OAAO,CAAC;AAC7B,cAAM,MAAM,KAAK,IAAI,OAAO,CAAC;AAC7B,cAAMC,WAAU,KAAK,IAAI,WAAW,KAAK;AACzC,cAAM,iBAAiB,KAAK,WAAW,gBAAgB;AACvD,YAAI,aAAa,SAAS,CAAC,UAAU;AACnC,gBAAM,iBAAiB;AACvB,eAAK,cAAc,iBAAiB,MAAS;AAC7C,eAAK,cAAc,iBAAiB,MAAS;AAC7C,cAAI,CAAC,gBAAgB;AACnB,qBAAS,IAAI,YAAY,IAAI,UAAU,KAAK;AAC1C,mBAAK,0BAA0B,KAAK,UAAU,CAAC,GAAG,KAAKA,QAAO;AAAA,YAChE;AAAA,UACF,OAAO;AACL,kBAAM,2BAA2B;AAAA,UACnC;AAAA,QACF;AACA,YAAI,aAAa,SAAS,CAAC,UAAU;AACnC,gBAAM,iBAAiB;AACvB,eAAK,cAAc,iBAAiB,MAAS;AAC7C,eAAK,cAAc,iBAAiB,MAAS;AAC7C,cAAI,CAAC,gBAAgB;AACnB,qBAAS,IAAI,YAAY,IAAI,UAAU,KAAK;AAC1C,mBAAK,0BAA0B,KAAK,UAAU,CAAC,GAAG,KAAKA,QAAO;AAAA,YAChE;AAAA,UACF,OAAO;AACL,kBAAM,2BAA2B;AAAA,UACnC;AAAA,QACF;AACA,YAAI,aAAa,SAAS,CAAC,UAAU;AACnC,cAAI,KAAK,IAAI,YAAY,MAAM,mBAAmB,KAAK,IAAI,sBAAsB,GAAG;AAClF,kBAAM,gBAAgB,KAAK,WAAW,eAAe;AACrD,gBAAI,iBAAiB,MAAM;AACzB,mBAAK,cAAc,QAAQ,aAAa;AACxC,oBAAM,kBAAkB;AAAA,YAC1B;AACA,kBAAM,gBAAgB,KAAK,WAAW,eAAe;AACrD,gBAAI,iBAAiB,MAAM;AACzB,mBAAK,cAAc,QAAQ,aAAa;AACxC,oBAAM,kBAAkB;AAAA,YAC1B;AAAA,UACF;AAAA,QACF;AACA,YAAI,aAAa,SAAS,CAAC,UAAU;AACnC,cAAI,KAAK,IAAI,YAAY,MAAM,mBAAmB,KAAK,IAAI,sBAAsB,GAAG;AAClF,kBAAM,gBAAgB,KAAK,WAAW,eAAe;AACrD,gBAAI,iBAAiB,MAAM;AACzB,mBAAK,cAAc,QAAQ,aAAa;AACxC,oBAAM,kBAAkB;AAAA,YAC1B;AACA,kBAAM,gBAAgB,KAAK,WAAW,eAAe;AACrD,gBAAI,iBAAiB,MAAM;AACzB,mBAAK,cAAc,QAAQ,aAAa;AACxC,oBAAM,kBAAkB;AAAA,YAC1B;AAAA,UACF;AAAA,QACF;AACA,YAAI,KAAK,eAAe,eAAe,KAAK,KAAK,eAAe,eAAe,GAAG;AAChF,gBAAM,2BAA2B;AAAA,QACnC;AACA,YAAI,KAAK,eAAe,eAAe,KAAK,KAAK,eAAe,eAAe,GAAG;AAChF,gBAAM,2BAA2B;AAAA,QACnC;AAAA,MAEF;AAAA,IACF;AAAA,EACF;AAAA,EACA,iBAAiB;AACf,QAAI,KAAK,WAAW,SAAS,GAAG;AAC9B,UAAI,oBAAoB,KAAK;AAC7B,UAAI,qBAAqB,MAAM;AAC7B,4BAAoB,KAAK,SAAS,KAAK,SAAS,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC;AACnE,aAAK,qBAAqB;AAC1B,0BAAkB,IAAI,QAAQ,CAAC,SAAS,WAAW;AACjD,gBAAM,SAAS,KAAK;AACpB,cAAI,QAAQ;AACV,kBAAM,IAAI,KAAK,MAAM,UAAU,MAAM;AACrC,kBAAM,IAAI,KAAK,MAAM,UAAU,OAAO;AACtC,oBAAQ,OAAO,CAAC,GAAG,CAAC,CAAC;AACrB,oBAAQ,OAAO,CAAC,GAAG,IAAI,CAAC;AACxB,oBAAQ,OAAO,IAAI,GAAG,IAAI,CAAC;AAC3B,oBAAQ,OAAO,IAAI,GAAG,CAAC,CAAC;AACxB,oBAAQ,OAAO,CAAC,GAAG,CAAC,CAAC;AACrB,iBAAK,WAAW,KAAK,eAAa;AAChC,oBAAM,OAAO,UAAU,aAAa,IAAI,UAAU;AAClD,kBAAI,QAAQ;AACV,oBAAI,MAAM;AACR,sBAAI,OAAO,KAAK,IAAI,MAAM;AAC1B,sBAAI,MAAM;AACR,yBAAK,SAAS,MAAM;AAAA,kBACtB;AAAA,gBACF;AAAA,cACF;AAAA,YACF,CAAC;AAAA,UACH;AACA,eAAK,cAAc,SAAS,OAAO,kBAAkB;AAAA,QACvD,CAAC;AAAA,MACH;AACA,wBAAkB,UAAU;AAC5B,wBAAkB,cAAc,MAAM;AAAA,IACxC,OAAO;AACL,WAAK,cAAc,SAAS,OAAO;AAAA,IACrC;AAAA,EACF;AAAA,EACA,kBAAkB;AAChB,UAAM,gBAAgB;AAEtB,SAAK,KAAK,KAAK,EAAE;AACjB,SAAK,KAAK,KAAK,EAAE;AACjB,SAAK,eAAe;AAAA,EACtB;AAAA,EACA,SAAS;AACP,UAAM,QAAQ,KAAK;AACnB,QAAI,OAAO;AACT,YAAM,cAAc,MAAM,OAAO,QAAQ,IAAI;AAC7C,WAAK,gBAAgB,CAAC;AACtB,UAAI,cAAc,GAAG;AACnB,YAAI;AACJ,iBAAS,IAAI,cAAc,GAAG,KAAK,GAAG,KAAK;AACzC,mBAAS,MAAM,OAAO,SAAS,CAAC;AAChC,cAAI,OAAO,IAAI,OAAO,MAAM,KAAK,IAAI,OAAO,KAAK,OAAO,IAAI,OAAO,MAAM,KAAK,IAAI,OAAO,KAAK,OAAO,cAAc,KAAK,WAAW;AACjI,iBAAK,cAAc,KAAK,MAAM;AAC9B,gBAAI,CAAC,OAAO,IAAI,SAAS,GAAG;AAC1B;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AACA,WAAK,gBAAgB;AAAA,IACvB;AAAA,EACF;AAAA,EACA,WAAW;AACT,IAAQF,MAAK,KAAK,kBAAkB,CAAC,MAAM,UAAU;AACnD,aAAO,MAAM,eAAe,KAAK,GAAG;AAAA,IACtC,CAAC;AACD,SAAK,mBAAmB,CAAC;AACzB,IAAO,KAAK,KAAK,WAAW,cAAY;AACtC,eAAS,OAAO,gBAAgB,MAAS;AACzC,eAAS,OAAO,gBAAgB,MAAS;AAAA,IAC3C,CAAC;AAAA,EACH;AAAA,EACA,iBAAiB;AACf,UAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,QAAI,OAAO;AACT,YAAM,qBAAqB;AAAA,IAC7B;AACA,UAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,QAAI,OAAO;AACT,YAAM,qBAAqB;AAAA,IAC7B;AAAA,EACF;AAAA,EACA,kBAAkB;AAEhB,UAAM,WAAW,KAAK,IAAI,UAAU;AACpC,UAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,UAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,QAAI;AACJ,QAAI;AACJ,QAAI,aAAa,OAAO;AACtB,cAAQ;AACR,uBAAiB;AAAA,IACnB,WAAW,aAAa,OAAO;AAC7B,cAAQ;AACR,uBAAiB;AAAA,IACnB;AACA,QAAI,MAAM,KAAK,cAAc;AAC7B,QAAI,QAAQ;AACZ,UAAM,kBAAkB,KAAK,IAAI,iBAAiB;AAClD,SAAK,mBAAmB,CAAC;AACzB,IAAO,KAAK,KAAK,WAAW,cAAY;AACtC,eAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,YAAI,gBAAgB,KAAK,cAAc,CAAC;AACxC,YAAI,cAAc,cAAc,UAAU,KAAK;AAC/C,YAAI,QAAQ,SAAS,IAAI,KAAK;AAC9B,YAAI,aAAa;AACf,cAAI,aAAa,YAAY,IAAI,KAAK;AACtC,cAAI,iBAAiB;AACnB,gBAAU,SAAS,KAAK,GAAG;AACzB,kBAAU,SAAS,UAAU,GAAG;AAC9B,oBAAI,KAAK,MAAM,GAAG;AAChB,2BAAS,OAAO,gBAAgB,MAAS;AAAA,gBAC3C;AACA,oBAAI,SAAS,KAAK,cAAc,GAAG;AACjC,2BAAS,OAAO,gBAAgB,WAAW;AAC3C,uBAAK,iBAAiB,cAAc,GAAG,IAAI;AAC3C,gCAAc,eAAe,KAAK,GAAG,IAAI;AACzC;AAAA,gBACF;AACA,oBAAI,QAAQ,KAAK,aAAa,GAAG;AAC/B,2BAAS,OAAO,gBAAgB,WAAW;AAC3C,uBAAK,iBAAiB,cAAc,GAAG,IAAI;AAC3C,gCAAc,eAAe,KAAK,GAAG,IAAI;AACzC;AAAA,gBACF;AAAA,cACF;AAAA,YACF,OAAO;AACL;AAAA,YACF;AAAA,UACF,OAAO;AACL,gBAAU,SAAS,KAAK,KAAW,SAAS,UAAU,GAAG;AACvD,uBAAS,OAAO,gBAAgB,WAAW;AAC3C,mBAAK,iBAAiB,cAAc,GAAG,IAAI;AAC3C,4BAAc,eAAe,KAAK,GAAG,IAAI;AACzC;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AACA;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,0BAA0B,UAAU,KAAK,SAAS;AAChD,IAAO,KAAK,KAAK,oBAAoB,SAAO;AAC1C,UAAI,QAAQ,SAAS,IAAI,GAAG;AAC5B,UAAI,SAAS,MAAM;AACjB,YAAI,SAAS;AACX,mBAAS,KAAK,wBAAwB,UAAU,GAAG;AAAA,QACrD;AACA,aAAK,KAAK,iBAAiB,KAAK;AAChC,aAAK,KAAK,iBAAiB,QAAQ,GAAG;AAAA,MACxC;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,0BAA0B,UAAU,KAAK,SAAS;AAChD,IAAO,KAAK,KAAK,oBAAoB,SAAO;AAC1C,UAAI,QAAQ,SAAS,IAAI,GAAG;AAC5B,UAAI,SAAS,MAAM;AACjB,YAAI,SAAS;AACX,mBAAS,KAAK,wBAAwB,UAAU,GAAG;AAAA,QACrD;AACA,aAAK,KAAK,iBAAiB,KAAK;AAChC,aAAK,KAAK,iBAAiB,QAAQ,GAAG;AAAA,MACxC;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAIA,wBAAwB,UAAU,KAAK;AACrC,UAAM,cAAc,SAAS,IAAI,cAAc;AAC/C,QAAI,aAAa;AACf,YAAM,kBAAkB,YAAY;AACpC,aAAO,YAAY,IAAI,KAAK,CAAC,IAAI,gBAAgB,IAAI,OAAO,CAAC,IAAI,KAAK,wBAAwB,aAAa,GAAG;AAAA,IAChH;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIA,wBAAwB,UAAU,KAAK;AACrC,UAAM,cAAc,SAAS,IAAI,cAAc;AAC/C,QAAI,aAAa;AACf,YAAM,kBAAkB,YAAY;AACpC,aAAO,YAAY,IAAI,KAAK,CAAC,IAAI,gBAAgB,IAAI,OAAO,CAAC,IAAI,KAAK,wBAAwB,aAAa,GAAG;AAAA,IAChH;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIA,iBAAiB,UAAU,KAAK;AAC9B,UAAM,cAAc,SAAS,IAAI,cAAc;AAC/C,QAAI,aAAa;AACf,aAAO,YAAY,IAAI,KAAK,CAAC,IAAI,KAAK,iBAAiB,aAAa,GAAG;AAAA,IACzE;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIA,iBAAiB,UAAU,KAAK;AAC9B,UAAM,cAAc,SAAS,IAAI,cAAc;AAC/C,QAAI,aAAa;AACf,aAAO,YAAY,IAAI,KAAK,CAAC,IAAI,KAAK,iBAAiB,aAAa,GAAG;AAAA,IACzE;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIA,mBAAmB,WAAW;AAC5B,SAAK,mBAAmB;AAAA,EAC1B;AAAA,EACA,iBAAiB;AACf,SAAK,aAAa;AAClB,SAAK,UAAU;AAAA,EACjB;AAAA,EACA,oBAAoB;AAClB,SAAK,iBAAiB;AACtB,SAAK,eAAe;AACpB,SAAK,iBAAiB;AACtB,SAAK,wBAAwB;AAC7B,SAAK,UAAU;AAAA,EACjB;AAAA,EACA,cAAc;AACZ,UAAM,YAAY;AAClB,SAAK,aAAa;AAClB,SAAK,sBAAsB;AAC3B,SAAK,cAAc;AACnB,SAAK,iBAAiB;AAAA,EACxB;AAAA,EACA,gBAAgB,QAAQ;AACtB,QAAI,SAAS,OAAO,IAAI,QAAQ;AAChC,QAAI,QAAQ;AACV,UAAI,WAAW,OAAO;AACtB,UAAI,YAAY,OAAO,IAAI,aAAa,SAAS,IAAI,aAAa,GAAG,CAAC;AACtE,UAAI,YAAY,OAAO,IAAI,aAAa,SAAS,IAAI,aAAa,GAAG,CAAC;AACtE,UAAI,QAAQ,KAAK,IAAI,OAAO;AAC5B,UAAI,QAAQ,KAAK,IAAI,OAAO;AAC5B,UAAI,iBAAiB,KAAK,IAAI,kBAAkB,KAAK;AACrD,UAAI,iBAAiB,KAAK,IAAI,kBAAkB,KAAK;AACrD,UAAI,YAAY,MAAM,qBAAqB,UAAU,KAAK,SAAS,WAAW,KAAK,IAAI,OAAO,CAAC,GAAG,cAAc;AAChH,UAAI,YAAY,MAAM,qBAAqB,UAAU,KAAK,SAAS,WAAW,KAAK,IAAI,OAAO,CAAC,GAAG,cAAc;AAChH,UAAIG,SAAQ,KAAK,SAAS,WAAW,SAAS;AAC9C,UAAI,OAAO,SAAS,IAAI,QAAQA,OAAM,CAAC;AACvC,UAAI,QAAQ,SAAS,IAAI,SAASA,OAAM,CAAC;AACzC,UAAI,MAAM,SAAS,IAAI,OAAOA,OAAM,CAAC;AACrC,UAAI,SAAS,SAAS,IAAI,UAAUA,OAAM,CAAC;AAC3C,UAAI,IAAI;AACR,UAAI,IAAI;AACR,UAAI,IAAI,QAAQ;AAChB,UAAI,IAAI,SAAS;AACjB,UAAI,KAAK,kBAAkB,WAAW,SAAS,GAAG;AAChD,eAAO,WAAW,WAAW,CAAC,OAAO,WAAW,QAAQ,CAAC;AACzD,YAAI,QAAQ,OAAO,IAAI,OAAO;AAC9B,cAAM,WAAW,KAAK,IAAI,UAAU;AACpC,cAAMC,SAAQ,KAAK,IAAI,OAAO;AAC9B,cAAMC,SAAQ,KAAK,IAAI,OAAO;AAC9B,YAAI,SAAS,QAAW;AACtB,cAAI;AACJ,cAAI,YAAYD,QAAO;AACrB,gBAAI,SAAS,SAAS;AACpB,0BAAY,KAAK;AAAA,YACnB,WAAW,SAAS,QAAQ;AAC1B,0BAAY,KAAK;AAAA,YACnB,WAAW,SAAS,QAAQ;AAC1B,0BAAY,KAAK;AAAA,YACnB,WAAW,SAAS,OAAO;AACzB,0BAAY,KAAK;AAAA,YACnB;AACA,gBAAI,WAAW;AACb,0BAAYC,OAAM,qBAAqB,UAAU,WAAW,GAAG,KAAK,IAAI,OAAO,CAAC,GAAG,cAAc;AACjG,cAAAF,SAAQE,OAAM,IAAI,UAAU,EAAE,gBAAgB,SAAS;AACvD,kBAAIF,OAAM;AACV,kBAAI,OAAO,IAAI;AAAA,YACjB;AAAA,UACF,OAAO;AACL,gBAAI,SAAS,SAAS;AACpB,0BAAY,KAAK;AAAA,YACnB,WAAW,SAAS,QAAQ;AAC1B,0BAAY,KAAK;AAAA,YACnB,WAAW,SAAS,QAAQ;AAC1B,0BAAY,KAAK;AAAA,YACnB,WAAW,SAAS,OAAO;AACzB,0BAAY,KAAK;AAAA,YACnB;AACA,gBAAI,WAAW;AACb,0BAAYC,OAAM,qBAAqB,UAAU,WAAW,GAAG,KAAK,IAAI,OAAO,CAAC,GAAG,cAAc;AACjG,cAAAD,SAAQC,OAAM,IAAI,UAAU,EAAE,gBAAgB,SAAS;AACvD,kBAAID,OAAM;AACV,kBAAI,SAAS,IAAI;AAAA,YACnB;AAAA,UACF;AAAA,QACF,OAAO;AACL,cAAI,OAAO,IAAI;AACf,cAAI,SAAS,IAAI;AAAA,QACnB;AACA,cAAM,UAAU,OAAO,IAAI,SAAS;AACpC,YAAI,SAAS;AACX,gBAAM,QAAQ,KAAK;AACnB,cAAI,YAAYC,QAAO;AACrB,gBAAI,iBAAiB,KAAK,SAAS,YAAY,MAAM,SAAS;AAC9D,gBAAI,gBAAgB;AAClB,kBAAI,iBAAiB,eAAe,OAAO;AAC3C,kBAAI,SAAS,OAAO,YAAY;AAChC,kBAAI,KAAK;AACT,kBAAI,eAAe;AACnB,kBAAI,WAAW,QAAQ;AACrB,oBAAI,eAAe,SAAS,OAAO;AAAA,cACrC,WAAW,WAAW,QAAQ;AAC5B,oBAAI,OAAO;AACT,sBAAI,KAAK,MAAM,cAAc,OAAO,IAAI,GAAG;AACzC,wBAAI,eAAe,SAAS,OAAO;AAAA,kBACrC,OAAO;AACL,yBAAK,OAAO;AAAA,kBACd;AAAA,gBACF;AAAA,cACF,OAAO;AACL,qBAAK,OAAO;AAAA,cACd;AAAA,YACF;AACA,iBAAK,SAAS,YAAY,MAAM,SAAS,IAAI;AAAA,UAC/C,OAAO;AACL,gBAAI,iBAAiB,KAAK,SAAS,YAAY,MAAM,SAAS;AAC9D,gBAAI,gBAAgB;AAClB,kBAAI,iBAAiB,eAAe,OAAO;AAC3C,kBAAI,SAAS,OAAO,YAAY;AAChC,kBAAI,KAAK;AACT,kBAAI,eAAe;AACnB,kBAAI,WAAW,QAAQ;AACrB,oBAAI,eAAe,OAAO,OAAO;AAAA,cACnC,WAAW,WAAW,QAAQ;AAC5B,oBAAI,OAAO;AACT,sBAAI,KAAK,MAAM,cAAc,MAAM,IAAI,GAAG;AACxC,wBAAI,eAAe,OAAO,OAAO;AAAA,kBACnC,OAAO;AACL,yBAAK,OAAO;AAAA,kBACd;AAAA,gBACF;AAAA,cACF,OAAO;AACL,qBAAK,OAAO;AAAA,cACd;AAAA,YACF;AACA,iBAAK,SAAS,YAAY,MAAM,SAAS,IAAI;AAAA,UAC/C;AAAA,QACF;AACA,YAAI,OAAO,OAAO,OAAO,GAAG;AAC1B,iBAAO,WAAW,YAAY,KAAK,IAAI,CAAC,CAAC;AACzC,iBAAO,WAAW,aAAa,KAAK,IAAI,CAAC,CAAC;AAAA,QAC5C;AACA,eAAO,OAAO;AAAA,UACZ;AAAA,UACA;AAAA,QACF,CAAC;AAAA,MACH,OAAO;AACL,eAAO,WAAW,WAAW,KAAK;AAAA,MACpC;AAAA,IACF;AAAA,EACF;AAAA,EACA,kBAAkB,YAAY,YAAY;AACxC,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAIA,WAAW,IAAI;AACb,QAAI,KAAK,UAAU,EAAE,GAAG;AACtB,WAAK,qBAAqB;AAC1B,WAAK,aAAa,KAAK,UAAU,EAAE;AACnC,WAAK,kBAAkB;AACvB,WAAK,aAAa;AAClB,YAAM,OAAO;AACb,UAAI,KAAK,OAAO,UAAU,IAAI,GAAG;AAC/B,aAAK,OAAO,SAAS,MAAM;AAAA,UACzB;AAAA,UACA,QAAQ;AAAA,UACR;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,gBAAgB;AACd,IAAQJ,MAAK,KAAK,WAAW,CAAC,MAAM,YAAY;AAC9C,UAAI,WAAW,KAAK,gBAAgB;AAClC,QAAO,KAAK,SAAS,cAAY;AAC/B,mBAAS,QAAQ;AAAA,QACnB,CAAC;AAAA,MACH;AAAA,IACF,CAAC;AACD,SAAK,YAAY,CAAC;AAClB,SAAK,aAAa,KAAK;AAAA,EACzB;AAAA,EACA,uBAAuB;AACrB,IAAO,KAAK,KAAK,YAAY,cAAY;AACvC,UAAI,UAAU,SAAS;AACvB,UAAI,SAAS;AACX,QAAO,KAAK,SAAS,YAAU;AAC7B,cAAI,QAAQ;AACV,gBAAI,SAAS,OAAO,IAAI,QAAQ;AAChC,gBAAI,QAAQ;AACV,qBAAO,WAAW,WAAW,KAAK;AAAA,YACpC;AAAA,UACF;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF,CAAC;AACD,SAAK,sBAAsB;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,KAAK,UAAU;AACb,UAAM,SAAS,OAAO,OAAO,MAAM;AAAA,MACjC,MAAM;AAAA,QACJ,KAAK,MAAM,MAAM;AAAA,MACnB;AAAA,IACF,CAAC;AACD,WAAO,UAAU,MAAM,QAAQ,QAAQ,aAAa;AAClD,WAAK,OAAO;AACZ,UAAI,WAAW,CAAC;AAChB,eAAS,KAAK,OAAO,KAAK,KAAK,MAAM,QAAQ,EAAE,KAAK,MAAM;AACxD,aAAK,aAAa;AAClB,YAAI,QAAQ,KAAK,IAAI,OAAO;AAC5B,YAAI,QAAQ,KAAK,IAAI,OAAO;AAC5B,YAAI,WAAW,KAAK,IAAI,UAAU;AAClC,YAAI,UAAU,UAAU;AACtB,gBAAM,2BAA2B;AAAA,QACnC;AACA,YAAI,UAAU,UAAU;AACtB,gBAAM,2BAA2B;AAAA,QACnC;AAAA,MACF,CAAC,CAAC;AACF,eAAS,KAAK,KAAK,iBAAiB,KAAK,QAAQ,CAAC;AAClD,eAAS,KAAK,KAAK,mBAAmB,MAAM,QAAQ,CAAC;AACrD,YAAM,QAAQ,IAAI,QAAQ;AAAA,IAC5B,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,KAAK,UAAU;AACb,UAAM,SAAS,OAAO,OAAO,MAAM;AAAA,MACjC,MAAM;AAAA,QACJ,KAAK,MAAM,MAAM;AAAA,MACnB;AAAA,IACF,CAAC;AACD,WAAO,UAAU,MAAM,QAAQ,QAAQ,aAAa;AAClD,WAAK,OAAO;AACZ,UAAI,WAAW,CAAC;AAChB,eAAS,KAAK,OAAO,KAAK,KAAK,MAAM,QAAQ,EAAE,KAAK,MAAM;AACxD,aAAK,YAAY;AAAA,MACnB,CAAC,CAAC;AACF,eAAS,KAAK,KAAK,iBAAiB,KAAK,QAAQ,CAAC;AAClD,eAAS,KAAK,KAAK,mBAAmB,OAAO,QAAQ,CAAC;AACtD,YAAM,QAAQ,IAAI,QAAQ;AAAA,IAC5B,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa,UAAU,UAAU;AAC/B,UAAM,SAAS,OAAO,OAAO,MAAM;AAAA,MACjC,cAAc;AAAA,QACZ,KAAK,MAAM,MAAM;AAAA,MACnB;AAAA,IACF,CAAC;AACD,WAAO,UAAU,MAAM,QAAQ,QAAQ,aAAa;AAClD,YAAM,WAAW,CAAC,OAAO,aAAa,KAAK,MAAM,UAAU,QAAQ,CAAC;AACpE,UAAI,CAAO,SAAS,QAAQ,GAAG;AAC7B,mBAAW,KAAK,IAAI,0BAA0B,CAAC;AAAA,MACjD;AACA,YAAM,SAAS,KAAK,IAAI,sBAAsB;AAC9C,MAAO,KAAK,KAAK,cAAc,SAAO;AACpC,iBAAS,KAAK,SAAS,QAAQ;AAAA,UAC7B,KAAK,MAAM;AAAA,UACX,IAAI,SAAS,IAAI,GAAG;AAAA,UACpB;AAAA,UACA;AAAA,QACF,CAAC,EAAE,YAAY,CAAC;AAAA,MAClB,CAAC;AACD,YAAM,QAAQ,IAAI,QAAQ;AAAA,IAC5B,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa,UAAU,UAAU;AAC/B,UAAM,SAAS,OAAO,OAAO,MAAM;AAAA,MACjC,cAAc;AAAA,QACZ,KAAK,MAAM,MAAM;AAAA,MACnB;AAAA,IACF,CAAC;AACD,WAAO,UAAU,MAAM,QAAQ,QAAQ,aAAa;AAClD,YAAM,WAAW,CAAC,OAAO,aAAa,KAAK,MAAM,UAAU,QAAQ,CAAC;AACpE,YAAM,cAAc,KAAK,OAAO,OAAO,UAAU,CAAC,CAAC;AACnD,UAAI,CAAO,SAAS,QAAQ,GAAG;AAC7B,mBAAW,YAAY,IAAI,0BAA0B,KAAK,IAAI,0BAA0B,CAAC,CAAC;AAAA,MAC5F;AACA,YAAM,SAAS,YAAY,IAAI,wBAAwB,KAAK,IAAI,sBAAsB,CAAC;AACvF,YAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,YAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,YAAM,WAAW,KAAK,IAAI,UAAU;AACpC,YAAM,UAAU,KAAK,IAAI,SAAS;AAClC,UAAI,aAAa,SAAS,CAAC,UAAU;AACnC,QAAO,KAAK,KAAK,eAAe,SAAO;AACrC,cAAIM,OAAM,MAAM,WAAW,KAAK;AAChC,cAAI,YAAY,MAAM,UAAU;AAChC,cAAU,SAASA,IAAG,KAAKA,OAAM,WAAW;AAC1C,wBAAYA;AAAA,UACd;AACA,cAAI,SAAS;AACX,wBAAY;AAAA,UACd;AACA,cAAI,QAAQ,SAAS,IAAI,GAAG;AAC5B,cAAI,SAAS,MAAM;AACjB,qBAAS,KAAK,SAAS,QAAQ;AAAA,cAC7B,KAAK,MAAM;AAAA,cACX,IAAI;AAAA,cACJ;AAAA,cACA;AAAA,YACF,CAAC,EAAE,YAAY,CAAC;AAAA,UAClB;AAAA,QACF,CAAC;AAAA,MACH;AACA,UAAI,aAAa,SAAS,CAAC,UAAU;AACnC,YAAIA,OAAM,MAAM,WAAW,KAAK;AAChC,YAAI,YAAY,MAAM,UAAU;AAChC,YAAU,SAASA,IAAG,KAAKA,OAAM,WAAW;AAC1C,sBAAYA;AAAA,QACd;AACA,YAAI,SAAS;AACX,sBAAY;AAAA,QACd;AACA,QAAO,KAAK,KAAK,eAAe,SAAO;AACrC,cAAI,QAAQ,SAAS,IAAI,GAAG;AAC5B,cAAI,SAAS,MAAM;AACjB,qBAAS,KAAK,SAAS,QAAQ;AAAA,cAC7B,KAAK,MAAM;AAAA,cACX,IAAI;AAAA,cACJ;AAAA,cACA;AAAA,YACF,CAAC,EAAE,YAAY,CAAC;AAAA,UAClB;AAAA,QACF,CAAC;AAAA,MACH;AACA,YAAM,QAAQ,IAAI,QAAQ;AAAA,IAC5B,CAAC;AAAA,EACH;AAAA,EACA,kBAAkB;AAChB,SAAK,cAAc;AACnB,SAAK,UAAU;AACf,SAAK,sBAAsB;AAAA,EAC7B;AAAA,EACA,wBAAwB;AACtB,UAAM,gBAAgB,KAAK;AAC3B,QAAI,eAAe;AACjB,MAAQN,MAAK,eAAe,CAAC,MAAM,UAAU;AAC3C,YAAI,CAAC,MAAM,aAAa;AACtB,gBAAM,gBAAgB;AAAA,QACxB;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EACA,gBAAgB;AACd,UAAM,cAAc;AACpB,QAAI,KAAK,UAAU;AACjB,WAAK,eAAe;AACpB,WAAK,WAAW;AAAA,IAClB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,oBAAoB,UAAU;AAC5B,QAAI,CAAC,KAAK,WAAW,mBAAmB,GAAG;AACzC,WAAK,mBAAmB,QAAQ;AAChC,WAAK,kBAAkB,QAAQ;AAAA,IACjC;AACA,UAAM,UAAU,KAAK,IAAI,SAAS;AAClC,UAAM,iBAAiB,KAAK,IAAI,kBAAkB,KAAK;AACvD,UAAM,iBAAiB,KAAK,IAAI,kBAAkB,KAAK;AACvD,QAAI,SAAS;AACX,UAAI,CAAC,KAAK,SAAS,KAAK,KAAK,IAAI,SAAS,GAAG;AAC3C,gBAAQ,aAAa,QAAQ;AAC7B,YAAI,UAAU;AACZ,cAAI,YAAY,KAAK,IAAI,aAAa,CAAC;AACvC,cAAI,YAAY,KAAK,IAAI,aAAa,CAAC;AACvC,cAAI,gBAAgB,SAAS,IAAI,aAAa,SAAS;AACvD,cAAI,gBAAgB,SAAS,IAAI,aAAa,SAAS;AACvD,gBAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,gBAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,gBAAM,MAAM,KAAK,IAAI,OAAO,CAAC;AAC7B,gBAAM,MAAM,KAAK,IAAI,OAAO,CAAC;AAC7B,gBAAM,OAAO,MAAM,qBAAqB,UAAU,KAAK,gBAAgB,KAAK,gBAAgB,KAAK,eAAe,KAAK,gBAAgB,eAAe,KAAK,cAAc;AACvK,gBAAM,OAAO,MAAM,qBAAqB,UAAU,KAAK,gBAAgB,KAAK,gBAAgB,KAAK,eAAe,KAAK,gBAAgB,eAAe,KAAK,cAAc;AACvK,gBAAMG,SAAQ,KAAK,SAAS,MAAM,IAAI;AACtC,cAAI,OAAO;AACX,UAAO,KAAK,KAAK,cAAc,WAAS;AACtC,gBAAI,SAAS,IAAI,KAAK,KAAK,MAAM;AAC/B,qBAAO;AAAA,YACT;AAAA,UACF,CAAC;AACD,cAAI,MAAM;AACR,kBAAM,QAAQ,KAAK;AACnB,gBAAI,SAAS,MAAM,OAAOA,MAAK,GAAG;AAChC,sBAAQ,MAAM,KAAK,cAAc;AACjC,sBAAQ,IAAI,iBAAiB,KAAK,kBAAkB,QAAQ,CAAC;AAC7D,sBAAQ,IAAI,WAAW,KAAK,SAAS,SAAS;AAAA,gBAC5C,GAAGA,OAAM;AAAA,gBACT,GAAGA,OAAM;AAAA,cACX,CAAC,CAAC;AAAA,YACJ,OAAO;AACL,sBAAQ,aAAa,MAAS;AAAA,YAChC;AAAA,UACF,OAAO;AACL,oBAAQ,aAAa,MAAS;AAAA,UAChC;AAAA,QACF;AAAA,MACF,OAAO;AACL,aAAK,YAAY;AAAA,MACnB;AAAA,IACF;AAAA,EACF;AAAA,EACA,cAAc;AACZ,UAAM,UAAU,KAAK,IAAI,SAAS;AAClC,QAAI,SAAS;AACX,cAAQ,IAAI,iBAAiB,IAAI;AAAA,IACnC;AACA,WAAO,MAAM,YAAY;AAAA,EAC3B;AAAA,EACA,kBAAkB,UAAU;AAC1B,QAAI,KAAK,IAAI,qBAAqB,KAAK,UAAU;AAC/C,YAAM,UAAU,SAAS;AACzB,UAAI,WAAW,QAAQ,SAAS,GAAG;AACjC,cAAM,SAAS,QAAQ,CAAC;AACxB,cAAM,SAAS,OAAO,IAAI,QAAQ;AAClC,YAAI,QAAQ;AACV,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIA,kBAAkB,UAAU;AAC1B,UAAM,iBAAiB,KAAK,IAAI,gBAAgB;AAChD,QAAI,gBAAgB;AAClB,YAAM,QAAQ,eAAe,IAAI,OAAO;AACxC,UAAI,OAAO;AACT,YAAI,MAAM;AACV,YAAI,UAAU;AACZ,gBAAM,aAAa,QAAQ;AAC3B,gBAAM,KAAK,IAAI,mBAAmB,MAAM,IAAI,QAAQ,KAAK,IAAI,QAAQ,EAAE,CAAC,CAAC;AAAA,QAC3E,OAAO;AACL,gBAAM,aAAa,KAAK,cAAc;AACtC,gBAAM,KAAK,IAAI,wBAAwB,KAAK,IAAI,mBAAmB,MAAM,IAAI,QAAQ,KAAK,IAAI,QAAQ,EAAE,CAAC,CAAC,CAAC;AAAA,QAC7G;AACA,cAAM,IAAI,QAAQ,GAAG;AAAA,MACvB;AACA,YAAM,aAAa,eAAe,IAAI,YAAY;AAClD,UAAI,YAAY;AACd,YAAI,MAAM;AACV,YAAI,UAAU;AACZ,qBAAW,aAAa,QAAQ;AAChC,gBAAM,KAAK,IAAI,mBAAmB,WAAW,IAAI,QAAQ,EAAE,CAAC;AAAA,QAC9D,OAAO;AACL,qBAAW,aAAa,KAAK,cAAc;AAC3C,gBAAM,KAAK,IAAI,wBAAwB,WAAW,IAAI,QAAQ,EAAE,CAAC;AAAA,QACnE;AACA,mBAAW,IAAI,QAAQ,GAAG;AAAA,MAC5B;AAAA,IACF;AAAA,EACF;AAAA,EACA,sBAAsB;AACpB,QAAI,OAAO,SAAS,KAAK;AACzB,QAAI,KAAK,IAAI,OAAO,EAAE,OAAO,UAAU,GAAG;AACxC,cAAQ;AAAA,IACV;AACA,YAAQ,YAAY,KAAK;AACzB,QAAI,KAAK,IAAI,OAAO,EAAE,OAAO,UAAU,GAAG;AACxC,cAAQ;AAAA,IACV;AACA,YAAQ;AACR,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIA,SAAS,WAAW,WAAW;AAC7B,QAAI,IAAI,KAAK,IAAI,OAAO,EAAE,IAAI,UAAU,EAAE,qBAAqB,SAAS;AACxE,QAAI,IAAI,KAAK,IAAI,OAAO,EAAE,IAAI,UAAU,EAAE,qBAAqB,SAAS;AAExE,QAAII,OAAM;AACV,QAAI,IAAI,CAACA,MAAK;AACZ,UAAI,CAACA;AAAA,IACP;AACA,QAAI,IAAIA,MAAK;AACX,UAAIA;AAAA,IACN;AACA,QAAI,IAAI,CAACA,MAAK;AACZ,UAAI,CAACA;AAAA,IACP;AACA,QAAI,IAAIA,MAAK;AACX,UAAIA;AAAA,IACN;AACA,WAAO;AAAA,MACL;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EACA,eAAe,WAAW;AACxB,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIA,mBAAmB;AACjB,SAAK,YAAY;AACjB,SAAK,kBAAkB,MAAS;AAChC,SAAK,mBAAmB,MAAS;AAAA,EACnC;AAAA,EACA,mBAAmB;AACjB,UAAM,iBAAiB;AACvB,SAAK,IAAI,OAAO,EAAE,cAAc,OAAO;AACvC,SAAK,IAAI,OAAO,EAAE,cAAc,OAAO;AACvC,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAIA,gBAAgB;AACd,SAAK,WAAW,iBAAiB,MAAS;AAC1C,SAAK,WAAW,iBAAiB,MAAS;AAC1C,SAAK,WAAW,iBAAiB,MAAS;AAC1C,SAAK,WAAW,iBAAiB,MAAS;AAC1C,SAAK,WAAW,QAAQ,MAAS;AACjC,SAAK,WAAW,QAAQ,MAAS;AACjC,SAAK,WAAW,QAAQ,MAAS;AACjC,SAAK,WAAW,QAAQ,MAAS;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,gBAAgB,cAAc;AAC5B,WAAO,KAAK,WAAW,KAAK;AAAA,MAC1B;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,gBAAgB;AAClB,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAIA,kBAAkB,OAAO;AACvB,UAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,UAAM,WAAW,KAAK,IAAI,UAAU;AACpC,QAAI,YAAY,SAAS,MAAM,OAAO,UAAU,GAAG;AACjD,YAAM,eAAe,MAAM,aAAa;AACxC,YAAM,eAAe,MAAM,WAAW,gBAAgB,MAAM,WAAW,OAAO,CAAC,CAAC;AAChF,YAAM,KAAK,eAAe,KAAK,IAAI,aAAa,GAAG;AACnD,UAAI,QAAQ;AACZ,aAAO,QAAQ,cAAc;AAC3B,cAAM,WAAW,KAAK,UAAU,KAAK;AACrC,YAAI,UAAU;AACZ,gBAAM,OAAO,SAAS;AACtB,cAAI,MAAM;AACR,oBAAQ,KAAK,QAAQ;AAAA,UACvB,OAAO;AACL,oBAAQ,SAAS,IAAI,UAAU,CAAC;AAAA,UAClC;AACA,mBAAS;AACT,cAAI,QAAQ,cAAc;AACxB;AAAA,UACF,OAAO;AACL;AAAA,UACF;AAAA,QACF,OAAO;AACL;AAAA,QACF;AAAA,MACF;AAAA,IACF;AACA,WAAO;AAAA,EACT;AACF;AACA,OAAO,eAAe,UAAU,aAAa;AAAA,EAC3C,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO;AACT,CAAC;AACD,OAAO,eAAe,UAAU,cAAc;AAAA,EAC5C,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO,OAAO,WAAW,OAAO,CAAC,SAAS,SAAS,CAAC;AACtD,CAAC;;;ACtiDM,IAAM,mBAAN,MAAM,0BAAyB,SAAS;AAAA,EAC7C,cAAc;AACZ,UAAM,GAAG,SAAS;AAClB,WAAO,eAAe,MAAM,OAAO;AAAA,MACjC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,OAAO;AAAA,MACjC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EACA,cAAc,cAAc,UAAU;AACpC,WAAO,KAAK,WAAW,UAAU,YAAY;AAAA,EAC/C;AAAA,EACA,kBAAkB;AAChB,UAAM,gBAAgB;AACtB,UAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,UAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,UAAM,eAAe;AACrB,UAAM,YAAY;AAClB,QAAI,MAAM,OAAO,YAAY,GAAG;AAC9B,UAAI,CAAC,KAAK,IAAI,oBAAoB,GAAG;AACnC,aAAK,cAAc,KAAK;AAAA,MAC1B;AAAA,IACF;AACA,QAAI,MAAM,OAAO,SAAS,GAAG;AAC3B,UAAI,CAAC,KAAK,IAAI,iBAAiB,GAAG;AAChC,aAAK,cAAc,KAAK;AAAA,MAC1B;AAAA,IACF;AACA,QAAI,MAAM,OAAO,YAAY,GAAG;AAC9B,UAAI,CAAC,KAAK,IAAI,oBAAoB,GAAG;AACnC,aAAK,cAAc,KAAK;AAAA,MAC1B;AAAA,IACF;AACA,QAAI,MAAM,OAAO,SAAS,GAAG;AAC3B,UAAI,CAAC,KAAK,IAAI,iBAAiB,GAAG;AAChC,aAAK,cAAc,KAAK;AAAA,MAC1B;AAAA,IACF;AAAA,EACF;AAAA,EACA,mBAAmB;AACjB,UAAM,iBAAiB;AACvB,UAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,UAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,UAAM,MAAM,KAAK,UAAU;AAC3B,UAAM,aAAa,KAAK,IAAI,GAAG,KAAK,WAAW,IAAI,CAAC;AACpD,UAAM,WAAW,KAAK,IAAI,KAAK,SAAS,IAAI,GAAG,MAAM,CAAC;AACtD,QAAI,MAAM,UAAU,MAAM,QAAQ;AAChC,eAAS,IAAI,YAAY,KAAK,UAAU,KAAK;AAC3C,YAAI,WAAW,KAAK,UAAU,CAAC;AAC/B,aAAK,gBAAgB,QAAQ;AAAA,MAC/B;AAAA,IACF;AAAA,EACF;AAAA,EACA,kBAAkB;AAChB,UAAM,QAAQ,KAAK;AACnB,QAAI,OAAO;AACT,WAAK,MAAM,MAAM,cAAc,OAAO;AACtC,WAAK,MAAM,MAAM,cAAc,MAAM;AAAA,IACvC;AACA,UAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,UAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,UAAM,WAAW,KAAK,IAAI,UAAU;AACpC,UAAM,kBAAkB,KAAK,QAAQ;AACrC,QAAI,KAAK,QAAQ,MAAM,GAAG;AACxB,UAAI,gBAAgB,IAAI,MAAM,KAAK,MAAM;AACvC,wBAAgB,IAAI,QAAQ,KAAK,IAAI,MAAM,CAAC;AAAA,MAC9C;AAAA,IACF;AACA,QAAI,KAAK,QAAQ,aAAa,GAAG;AAC/B,UAAI,gBAAgB,IAAI,aAAa,KAAK,MAAM;AAC9C,wBAAgB,IAAI,eAAe,KAAK,IAAI,aAAa,CAAC;AAAA,MAC5D;AAAA,IACF;AACA,QAAI,KAAK,QAAQ,QAAQ,GAAG;AAC1B,UAAI,gBAAgB,IAAI,QAAQ,KAAK,MAAM;AACzC,wBAAgB,IAAI,UAAU,KAAK,IAAI,QAAQ,CAAC;AAAA,MAClD;AAAA,IACF;AACA,QAAI,QAAQ;AACZ,QAAI,eAAe;AACnB,QAAI,IAAI;AACR,IAAO,KAAK,SAAS,QAAQ,YAAU;AACrC,UAAI,kBAAkB,mBAAkB;AACtC,cAAM,UAAU,OAAO,IAAI,SAAS;AACpC,YAAI,WAAW,KAAK,GAAG;AACrB;AAAA,QACF;AACA,YAAI,CAAC,WAAW,OAAO,IAAI,WAAW,GAAG;AACvC;AAAA,QACF;AAAA,MACF;AACA,UAAI,WAAW,MAAM;AACnB,gBAAQ,eAAe;AAAA,MACzB;AACA;AAAA,IACF,CAAC;AACD,QAAI,CAAC,KAAK,IAAI,WAAW,GAAG;AAC1B,cAAQ;AACR,qBAAe;AAAA,IACjB;AACA,QAAI,iBAAiB,GAAG;AACtB,qBAAe;AACf,cAAQ;AAAA,IACV;AACA,UAAM,YAAY,MAAM,IAAI,UAAU;AACtC,UAAM,YAAY,MAAM,IAAI,UAAU;AACtC,UAAM,oBAAoB;AAC1B,UAAM,kBAAkB;AACxB,UAAM,iBAAiB,UAAU,IAAI,mBAAmB,CAAC;AACzD,UAAM,iBAAiB,UAAU,IAAI,iBAAiB,CAAC;AACvD,UAAM,iBAAiB,UAAU,IAAI,mBAAmB,CAAC;AACzD,UAAM,iBAAiB,UAAU,IAAI,iBAAiB,CAAC;AACvD,SAAK,eAAe,iBAAiB,QAAQ,gBAAgB,iBAAiB;AAC9E,SAAK,eAAe,kBAAkB,QAAQ,KAAK,gBAAgB,iBAAiB;AACpF;AACA,SAAK,eAAe,iBAAiB,QAAQ,gBAAgB,iBAAiB;AAC9E,SAAK,eAAe,kBAAkB,QAAQ,KAAK,gBAAgB,iBAAiB;AACpF,QAAI,MAAM,UAAU,MAAM,QAAQ;AAChC,UAAI,KAAK,cAAc,KAAK,gBAAgB,KAAK,eAAe,KAAK,QAAQ,KAAK,KAAK,KAAK,QAAQ,KAAK,KAAK,KAAK,YAAY;AAC7H,cAAM,MAAM,KAAK,UAAU;AAC3B,YAAI,aAAa,KAAK,IAAI,GAAG,KAAK,WAAW,IAAI,CAAC;AAClD,YAAI,WAAW,KAAK,IAAI,KAAK,SAAS,IAAI,GAAG,MAAM,CAAC;AACpD,iBAASC,KAAI,GAAGA,KAAI,YAAYA,MAAK;AACnC,eAAK,cAAc,KAAK,UAAUA,EAAC,GAAG,KAAK;AAAA,QAC7C;AACA,YAAI,WAAW,KAAK,UAAU,UAAU;AACxC,iBAASA,KAAI,YAAYA,MAAK,UAAUA,MAAK;AAC3C,cAAI,WAAW,KAAK,UAAUA,EAAC;AAC/B,cAAI,SAAS,IAAI,QAAQ,KAAK,QAAQ,SAAS,IAAI,QAAQ,KAAK,MAAM;AACpE,uBAAW;AACX,gBAAIA,KAAI,KAAK,aAAa,GAAG;AAC3B,uBAAS,IAAIA,KAAI,GAAG,KAAK,GAAG,KAAK;AAC/B,oBAAIC,YAAW,KAAK,UAAU,CAAC;AAC/B,oBAAIA,UAAS,IAAI,QAAQ,KAAK,QAAQA,UAAS,IAAI,QAAQ,KAAK,MAAM;AACpE,6BAAWA;AACX;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AACA;AAAA,UACF,OAAO;AACL,iBAAK,cAAc,UAAU,KAAK;AAAA,UACpC;AAAA,QACF;AACA,iBAASD,KAAI,YAAYA,MAAK,UAAUA,MAAK;AAC3C,cAAI,WAAW,KAAK,UAAUA,EAAC;AAC/B,eAAK,gBAAgB,UAAU,QAAQ;AACvC,cAAI,SAAS,IAAI,QAAQ,KAAK,QAAQ,SAAS,IAAI,QAAQ,KAAK,MAAM;AACpE,uBAAW;AAAA,UACb;AAAA,QACF;AACA,iBAASA,KAAI,WAAW,GAAGA,KAAI,KAAKA,MAAK;AACvC,eAAK,cAAc,KAAK,UAAUA,EAAC,GAAG,KAAK;AAAA,QAC7C;AAAA,MACF;AAAA,IACF,OAAO;AACL,WAAK,WAAW;AAAA,IAClB;AACA,QAAI,CAAC,KAAK,WAAW,mBAAmB,GAAG;AACzC,WAAK,mBAAmB,KAAK,IAAI,iBAAiB,CAAC;AAAA,IACrD;AACA,UAAM,gBAAgB;AAAA,EACxB;AAAA,EACA,gBAAgB,UAAU;AACxB,QAAI,WAAW,SAAS,IAAI,UAAU;AACtC,QAAI,CAAC,UAAU;AACb,iBAAW,KAAK,cAAc,KAAK,SAAS,QAAQ;AACpD,eAAS,IAAI,YAAY,QAAQ;AACjC,eAAS,aAAa,QAAQ;AAC9B,YAAM,iBAAiB,SAAS,IAAI,gBAAgB;AACpD,UAAI,gBAAgB;AAClB,cAAM,kBAAkB,eAAe,IAAI,iBAAiB;AAC5D,YAAI,iBAAiB;AACnB,gBAAM,KAAK,gBAAgB,OAAO,OAAO,SAAS;AAClD,UAAO,KAAK,gBAAgB,aAAW;AACrC,kBAAM,QAAQ,SAAS,IAAI,SAAS,KAAK,IAAI,OAAO,CAAC;AACrD,4BAAgB,IAAI,SAAS,KAAK;AAClC,eAAG,IAAI,SAAS,KAAK;AAAA,UACvB,CAAC;AAAA,QACH;AAAA,MACF;AACA,UAAI,gBAAgB,SAAS,IAAI,eAAe;AAChD,UAAI,eAAe;AACjB,QAAO,KAAK,eAAe,CAAAE,cAAY;AACrC,UAAAA,UAAS,QAAQ;AAAA,QACnB,CAAC;AAAA,MACH;AACA,sBAAgB,CAAC;AACjB,eAAS,OAAO,iBAAiB,aAAa;AAC9C,WAAK,WAAW,KAAK,eAAa;AAChC,cAAM,YAAY,UAAU;AAC5B,cAAM,gBAAgB,KAAK,cAAc,UAAU,SAAS,QAAQ;AACpE,YAAI,eAAe;AACjB,wBAAc,KAAK,aAAa;AAAA,QAClC;AACA,sBAAc,WAAW,QAAQ,UAAU,OAAO;AAClD,kBAAU,SAAS,KAAK,aAAa;AAAA,MACvC,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EACA,gBAAgB,cAAc;AAC5B,IAAO,KAAK,KAAK,WAAW,cAAY;AACtC,YAAM,WAAW,SAAS,IAAI,UAAU;AACxC,UAAI,UAAU;AACZ,iBAAS,QAAQ;AACjB,iBAAS,IAAI,YAAY,MAAS;AAAA,MACpC;AAAA,IACF,CAAC;AACD,WAAO,MAAM,gBAAgB,YAAY;AAAA,EAC3C;AAAA,EACA,gBAAgB,UAAU,kBAAkB;AAC1C,QAAI,WAAW,SAAS,IAAI,UAAU;AAKtC,UAAM,SAAS,KAAK;AACpB,UAAM,SAAS,KAAK;AACpB,UAAM,SAAS,SAAS,IAAI,MAAM;AAClC,UAAM,SAAS,SAAS,IAAI,MAAM;AAClC,QAAI,UAAU,QAAQ,UAAU,MAAM;AACpC,YAAM,aAAa,KAAK;AACxB,YAAM,aAAa,KAAK;AACxB,YAAM,YAAY,KAAK,IAAI,aAAa,SAAS,IAAI,aAAa,GAAG,CAAC;AACtE,YAAM,YAAY,KAAK,IAAI,aAAa,SAAS,IAAI,aAAa,GAAG,CAAC;AACtE,YAAM,gBAAgB,KAAK,IAAI,iBAAiB,SAAS,IAAI,iBAAiB,SAAS,CAAC;AACxF,YAAM,gBAAgB,KAAK,IAAI,iBAAiB,SAAS,IAAI,iBAAiB,SAAS,CAAC;AACxF,YAAM,QAAQ,SAAS,IAAI,OAAO;AAClC,YAAM,SAAS,SAAS,IAAI,QAAQ;AACpC,YAAM,UAAU,KAAK,IAAI,SAAS;AAClC,YAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,YAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,YAAM,WAAW,KAAK,IAAI,UAAU;AACpC,YAAM,SAAS,MAAM,IAAI,OAAO;AAChC,YAAM,OAAO,MAAM,IAAI,KAAK;AAC5B,YAAM,SAAS,MAAM,IAAI,OAAO;AAChC,YAAM,OAAO,MAAM,IAAI,KAAK;AAC5B,UAAI;AACJ,UAAI;AACJ,UAAI;AACJ,UAAI;AACJ,UAAI,MAAM,KAAK,IAAI,OAAO,CAAC;AAC3B,UAAI,MAAM,KAAK,IAAI,OAAO,CAAC;AAC3B,UAAI,OAAO;AACX,UAAI,OAAO;AACX,UAAI,MAAM,OAAO,cAAc,KAAK,MAAM,OAAO,cAAc,GAAG;AAChE,YAAI,gBAAgB,KAAK,eAAe,gBAAgB;AACxD,YAAI,cAAc,KAAK,eAAe,YAAY;AAClD,YAAI,iBAAiB,SAAS;AAC5B,cAAI,UAAU,cAAc,kBAAkB,IAAI,MAAM,SAAS;AACjE,2BAAiB;AACjB,yBAAe;AAAA,QACjB;AACA,YAAI,MAAM,qBAAqB,UAAU,YAAY,eAAe,GAAG;AACvE,YAAI,MAAM,qBAAqB,UAAU,QAAQ,aAAa,GAAG;AACjE,wBAAgB,KAAK,eAAe,gBAAgB;AACpD,sBAAc,KAAK,eAAe,YAAY;AAC9C,YAAI,kBAAkB,SAAS;AAC7B,cAAI,UAAU,cAAc,kBAAkB,IAAI,OAAO,SAAS;AAClE,2BAAiB;AACjB,yBAAe;AAAA,QACjB;AACA,YAAI,MAAM,qBAAqB,UAAU,YAAY,eAAe,GAAG;AACvE,YAAI,MAAM,qBAAqB,UAAU,QAAQ,aAAa,GAAG;AACjE,iBAAS,OAAO,SAAS;AAAA,UACvB,GAAG,KAAK,IAAI,KAAK;AAAA,UACjB,GAAG,KAAK,IAAI,KAAK;AAAA,QACnB,CAAC;AAAA,MACH,WAAW,UAAU,UAAU;AAC7B,YAAI,gBAAgB,KAAK,eAAe,gBAAgB;AACxD,YAAI,cAAc,KAAK,eAAe,YAAY;AAClD,YAAI,iBAAiB,SAAS;AAC5B,cAAI,UAAU,cAAc,kBAAkB,IAAI,MAAM,SAAS;AACjE,2BAAiB;AACjB,yBAAe;AAAA,QACjB;AACA,YAAI,MAAM,qBAAqB,UAAU,YAAY,eAAe,GAAG;AACvE,YAAI,MAAM,qBAAqB,UAAU,QAAQ,aAAa,GAAG;AACjE,YAAI,MAAM,qBAAqB,UAAU,QAAQ,WAAW,GAAG;AAC/D,YAAI,KAAK,gBAAgB,KAAK,SAAS;AACrC,cAAI,MAAM,qBAAqB,UAAU,YAAY,eAAe,GAAG;AAAA,QACzE,OAAO;AACL,cAAI,SAAS;AACX,gBAAI,eAAe,SAAS,IAAI,cAAc;AAC9C,gBAAI,cAAc;AAChB,kBAAI,MAAM,qBAAqB,cAAc,QAAQ,eAAe,aAAa,UAAU,IAAI,KAAK,CAAC;AAAA,YACvG,OAAO;AACL,kBAAI,MAAM,aAAa;AAAA,YACzB;AAAA,UACF,OAAO;AACL,gBAAI,MAAM,aAAa;AAAA,UACzB;AAAA,QACF;AACA,iBAAS,OAAO,SAAS;AAAA,UACvB,GAAG,KAAK,IAAI,KAAK;AAAA,UACjB,GAAG;AAAA,QACL,CAAC;AACD,eAAO;AAAA,MACT,WAAW,UAAU,UAAU;AAC7B,YAAI,gBAAgB,KAAK,eAAe,gBAAgB;AACxD,YAAI,cAAc,KAAK,eAAe,YAAY;AAClD,YAAI,kBAAkB,SAAS;AAC7B,cAAI,UAAU,cAAc,kBAAkB,IAAI,OAAO,SAAS;AAClE,2BAAiB;AACjB,yBAAe;AAAA,QACjB;AACA,YAAI,MAAM,qBAAqB,UAAU,YAAY,eAAe,GAAG;AACvE,YAAI,MAAM,qBAAqB,UAAU,QAAQ,aAAa,GAAG;AACjE,YAAI,MAAM,qBAAqB,UAAU,QAAQ,WAAW,GAAG;AAC/D,YAAI,KAAK,gBAAgB,KAAK,SAAS;AACrC,cAAI,MAAM,qBAAqB,UAAU,YAAY,eAAe,GAAG;AAAA,QACzE,OAAO;AACL,cAAI,SAAS;AACX,gBAAI,eAAe,SAAS,IAAI,cAAc;AAC9C,gBAAI,cAAc;AAChB,kBAAI,MAAM,qBAAqB,cAAc,QAAQ,eAAe,aAAa,UAAU,IAAI,KAAK,CAAC;AAAA,YACvG,OAAO;AACL,kBAAI,MAAM,aAAa;AAAA,YACzB;AAAA,UACF,OAAO;AACL,gBAAI,MAAM,aAAa;AAAA,UACzB;AAAA,QACF;AACA,eAAO;AACP,iBAAS,OAAO,SAAS;AAAA,UACvB,GAAG;AAAA,UACH,GAAG,KAAK,IAAI,KAAK;AAAA,QACnB,CAAC;AAAA,MACH;AACA,WAAK,sBAAsB,UAAU,UAAU,GAAG,GAAG,GAAG,GAAG,MAAM,IAAI;AACrE,UAAI,IAAI,UAAU,IAAI,UAAU,IAAI,QAAQ,IAAI,QAAQ,IAAI,UAAU,KAAK,UAAU,KAAK,QAAQ,IAAI,QAAc,MAAM,CAAC,KAAW,MAAM,CAAC,GAAG;AAC9I,aAAK,cAAc,UAAU,KAAK;AAAA,MACpC,OAAO;AACL,aAAK,cAAc,UAAU,IAAI;AAAA,MACnC;AACA,UAAI,gBAAgB,SAAS,IAAI,eAAe;AAChD,UAAI,eAAe;AACjB,QAAO,KAAK,eAAe,CAAAA,cAAY;AACrC,eAAK,sBAAsB,UAAUA,WAAU,GAAG,GAAG,GAAG,GAAG,MAAM,IAAI;AAAA,QACvE,CAAC;AAAA,MACH;AACA,WAAK,qBAAqB,UAAU,gBAAgB;AAAA,IACtD,OAAO;AACL,WAAK,cAAc,UAAU,KAAK;AAAA,IACpC;AAAA,EACF;AAAA,EACA,sBAAsB,UAAU,UAAU,GAAG,GAAG,GAAG,GAAG,MAAM,MAAM;AAChE,UAAM,QAAQ,SAAS,IAAI,OAAO;AAClC,UAAM,SAAS,SAAS,IAAI,QAAQ;AACpC,UAAM,WAAW,SAAS,IAAI,UAAU;AACxC,UAAM,YAAY,SAAS,IAAI,WAAW;AAC1C,UAAM,MAAM,KAAK,SAAS,GAAG,CAAC;AAC9B,UAAM,MAAM,KAAK,SAAS,GAAG,CAAC;AAC9B,UAAM,eAAe,SAAS,IAAI,OAAO;AACzC,QAAI,cAAc;AAChB,YAAMC,SAAQ,KAAK,SAAS,aAAa,GAAG,aAAa,CAAC;AAC1D,mBAAa,IAAIA,OAAM,IAAI,KAAK;AAChC,mBAAa,IAAIA,OAAM,IAAI,KAAK;AAAA,IAClC;AACA,QAAI,IAAI;AACR,QAAI,IAAI;AACR,QAAI,IAAI;AACR,QAAI,IAAI;AACR,QAAU,SAAS,KAAK,GAAG;AACzB,YAAM,UAAU,IAAI,IAAI,SAAS;AACjC,WAAK;AACL,WAAK;AAAA,IACP;AACA,QAAU,SAAS,QAAQ,KAAK,WAAW,KAAK,IAAI,IAAI,CAAC,GAAG;AAC1D,YAAM,UAAU,IAAI,IAAI,YAAY;AACpC,WAAK;AACL,WAAK;AAAA,IACP;AACA,QAAU,SAAS,MAAM,GAAG;AAC1B,YAAM,UAAU,IAAI,IAAI,UAAU;AAClC,WAAK;AACL,WAAK;AAAA,IACP;AACA,QAAU,SAAS,SAAS,KAAK,YAAY,KAAK,IAAI,IAAI,CAAC,GAAG;AAC5D,YAAM,UAAU,IAAI,IAAI,aAAa;AACrC,WAAK;AACL,WAAK;AAAA,IACP;AACA,QAAI,KAAK,IAAI,sBAAsB,GAAG;AACpC,UAAI,MAAM;AACR,YAAI,KAAK,IAAI,KAAK,IAAI,GAAG,CAAC,GAAG,KAAK,GAAG;AACrC,YAAI,KAAK,IAAI,KAAK,IAAI,GAAG,CAAC,GAAG,KAAK,GAAG;AAAA,MACvC;AACA,UAAI,MAAM;AACR,YAAI,KAAK,IAAI,KAAK,IAAI,GAAG,CAAC,GAAG,KAAK,GAAG;AACrC,YAAI,KAAK,IAAI,KAAK,IAAI,GAAG,CAAC,GAAG,KAAK,GAAG;AAAA,MACvC;AAAA,IACF;AACA,aAAS,OAAO,QAAQ,CAAC;AACzB,aAAS,OAAO,SAAS,CAAC;AAC1B,aAAS,OAAO,OAAO,CAAC;AACxB,aAAS,OAAO,UAAU,CAAC;AAC3B,aAAS,WAAW,SAAS,IAAI,CAAC;AAClC,aAAS,WAAW,UAAU,IAAI,CAAC;AACnC,aAAS,IAAI,KAAK,CAAC;AACnB,aAAS,IAAI,KAAK,KAAK,IAAI,EAAE;AAAA,EAC/B;AAAA,EACA,uBAAuB;AACrB,UAAM,qBAAqB;AAC3B,IAAO,KAAK,KAAK,YAAY,cAAY;AACvC,WAAK,cAAc,UAAU,KAAK;AAAA,IACpC,CAAC;AAAA,EACH;AAAA,EACA,qBAAqB,UAAU,kBAAkB;AAC/C,UAAM,WAAW,SAAS,IAAI,UAAU;AACxC,UAAM,eAAe,SAAS,OAAO,OAAO,cAAc;AAC1D,UAAM,eAAe,SAAS,OAAO,OAAO,cAAc;AAC1D,UAAM,mBAAmB,SAAS,OAAO,OAAO,kBAAkB;AAClE,UAAM,mBAAmB,SAAS,OAAO,OAAO,kBAAkB;AAClE,QAAI,gBAAgB,oBAAoB,gBAAgB,kBAAkB;AACxE,YAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,YAAM,QAAQ,KAAK,IAAI,OAAO;AAC9B,YAAM,WAAW,KAAK,IAAI,UAAU;AACpC,UAAI;AACJ,UAAI;AACJ,UAAI;AACJ,UAAI,aAAa,SAAS,MAAM,OAAO,WAAW,GAAG;AACnD,eAAO,SAAS,IAAI,KAAK,WAAW;AACpC,gBAAQ,SAAS,IAAI,KAAK,OAAO;AACjC,wBAAgB,iBAAiB,IAAI,KAAK,OAAO;AAAA,MACnD,WAAW,aAAa,SAAS,MAAM,OAAO,WAAW,GAAG;AAC1D,eAAO,SAAS,IAAI,KAAK,WAAW;AACpC,gBAAQ,SAAS,IAAI,KAAK,OAAO;AACjC,wBAAgB,iBAAiB,IAAI,KAAK,OAAO;AAAA,MACnD;AACA,UAAU,SAAS,IAAI,KAAW,SAAS,KAAK,GAAG;AACjD,YAAI,QAAQ,MAAM;AAChB,cAAI,cAAc;AAChB,yBAAa,MAAM;AAAA,UACrB;AAAA,QACF,OAAO;AACL,cAAI,cAAc;AAChB,yBAAa,MAAM;AAAA,UACrB;AAAA,QACF;AACA,YAAU,SAAS,aAAa,GAAG;AACjC,cAAI,QAAQ,eAAe;AACzB,gBAAI,kBAAkB;AACpB,+BAAiB,MAAM;AAAA,YACzB;AAAA,UACF,OAAO;AACL,gBAAI,kBAAkB;AACpB,+BAAiB,MAAM;AAAA,YACzB;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,gBAAgB,UAAU;AACxB,UAAM,gBAAgB,QAAQ;AAC9B,UAAM,WAAW,SAAS,IAAI,UAAU;AACxC,QAAI,UAAU;AACZ,WAAK,QAAQ,YAAY,QAAQ;AACjC,eAAS,QAAQ;AAAA,IACnB;AACA,UAAM,gBAAgB,SAAS,IAAI,eAAe;AAClD,QAAI,eAAe;AACjB,MAAO,KAAK,eAAe,CAAAD,cAAY;AACrC,cAAM,OAAOA,UAAS,WAAW,MAAM;AACvC,YAAI,MAAM;AACR,eAAK,YAAYA,SAAQ;AAAA,QAC3B;AACA,QAAAA,UAAS,QAAQ;AAAA,MACnB,CAAC;AAAA,IACH;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa,UAAU,UAAU;AAC/B,UAAM,SAAS,OAAO,OAAO,MAAM;AAAA,MACjC,cAAc;AAAA,QACZ,KAAK,MAAM,MAAM;AAAA,MACnB;AAAA,IACF,CAAC;AACD,WAAO,UAAU,MAAM,QAAQ,QAAQ,aAAa;AAClD,YAAM,WAAW,CAAC,OAAO,aAAa,KAAK,MAAM,UAAU,QAAQ,CAAC;AACpE,YAAM,WAAW,SAAS,IAAI,UAAU;AACxC,UAAI,UAAU;AACZ,iBAAS,KAAK,SAAS,KAAK,QAAQ,CAAC;AAAA,MACvC;AACA,YAAM,gBAAgB,SAAS,IAAI,eAAe;AAClD,UAAI,eAAe;AACjB,QAAO,KAAK,eAAe,CAAAA,cAAY;AACrC,mBAAS,KAAKA,UAAS,KAAK,QAAQ,CAAC;AAAA,QACvC,CAAC;AAAA,MACH;AACA,YAAM,QAAQ,IAAI,QAAQ;AAAA,IAC5B,CAAC;AAAA,EACH;AAAA,EACA,cAAc,UAAU,SAAS;AAC/B,UAAM,WAAW,SAAS,IAAI,UAAU;AACxC,QAAI,UAAU;AACZ,eAAS,WAAW,WAAW,OAAO;AAAA,IACxC;AACA,UAAM,gBAAgB,SAAS,IAAI,eAAe;AAClD,QAAI,eAAe;AACjB,MAAO,KAAK,eAAe,CAAAA,cAAY;AACrC,QAAAA,UAAS,WAAW,WAAW,OAAO;AAAA,MACxC,CAAC;AAAA,IACH;AACA,UAAM,UAAU,SAAS;AACzB,QAAI,SAAS;AACX,MAAO,KAAK,SAAS,YAAU;AAC7B,eAAO,WAAW,UAAU,CAAC,OAAO;AAAA,MACtC,CAAC;AAAA,IACH;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa,UAAU,UAAU;AAC/B,UAAM,SAAS,OAAO,OAAO,MAAM;AAAA,MACjC,cAAc;AAAA,QACZ,KAAK,MAAM,MAAM;AAAA,MACnB;AAAA,IACF,CAAC;AACD,WAAO,UAAU,MAAM,QAAQ,QAAQ,aAAa;AAClD,YAAM,WAAW,CAAC,OAAO,aAAa,KAAK,MAAM,UAAU,QAAQ,CAAC;AACpE,YAAM,WAAW,SAAS,IAAI,UAAU;AACxC,UAAI,UAAU;AACZ,iBAAS,KAAK,SAAS,KAAK,QAAQ,CAAC;AAAA,MACvC;AACA,YAAM,gBAAgB,SAAS,IAAI,eAAe;AAClD,UAAI,eAAe;AACjB,QAAO,KAAK,eAAe,CAAAA,cAAY;AACrC,mBAAS,KAAKA,UAAS,KAAK,QAAQ,CAAC;AAAA,QACvC,CAAC;AAAA,MACH;AACA,YAAM,QAAQ,IAAI,QAAQ;AAAA,IAC5B,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAIA,mBAAmB,UAAU;AAC3B,QAAI,iBAAiB,KAAK,IAAI,gBAAgB;AAC9C,QAAI,KAAK,IAAI,6BAA6B,GAAG;AAC3C,UAAI,CAAC,UAAU;AACb,cAAM,eAAe,KAAK,UAAU,KAAK,SAAS,IAAI,CAAC;AACvD,YAAI,cAAc;AAChB,qBAAW;AAAA,QACb;AAAA,MACF;AAAA,IACF;AACA,QAAI,gBAAgB;AAClB,UAAI,WAAW,KAAK,QAAQ;AAC5B,UAAI,UAAU;AACZ,YAAI,SAAS,SAAS,IAAI,UAAU;AACpC,YAAI,QAAQ;AACV,qBAAW;AAAA,QACb;AAAA,MACF;AACA,YAAM,kBAAkB,eAAe,IAAI,iBAAiB;AAC5D,UAAI,iBAAiB;AACnB,YAAI,CAAC,eAAe,IAAI,eAAe,EAAE,IAAI,UAAU,GAAG;AACxD,gBAAM,KAAK,gBAAgB,OAAO,OAAO,SAAS;AAClD,UAAO,KAAK,gBAAgB,aAAW;AACrC,kBAAM,QAAQ,SAAS,IAAI,SAAS,KAAK,IAAI,OAAO,CAAC;AACrD,4BAAgB,IAAI,SAAS,KAAK;AAClC,eAAG,IAAI,SAAS,KAAK;AAAA,UACvB,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,kBAAkB,UAAU;AAC1B,QAAI,KAAK,IAAI,qBAAqB,KAAK,UAAU;AAC/C,aAAO,MAAM,kBAAkB,QAAQ;AAAA,IACzC;AACA,QAAI,SAAS,SAAS,IAAI,UAAU;AACpC,QAAI,QAAQ;AACV,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AACF;AACA,OAAO,eAAe,kBAAkB,aAAa;AAAA,EACnD,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO;AACT,CAAC;AACD,OAAO,eAAe,kBAAkB,cAAc;AAAA,EACpD,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO,SAAS,WAAW,OAAO,CAAC,iBAAiB,SAAS,CAAC;AAChE,CAAC;;;AC/lBM,IAAM,OAAN,cAAmB,UAAU;AAAA,EAClC,cAAc;AACZ,UAAM,GAAG,SAAS;AAClB,WAAO,eAAe,MAAM,WAAW;AAAA,MACrC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC;AAAA,IACV,CAAC;AACD,WAAO,eAAe,MAAM,cAAc;AAAA,MACxC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AAID,WAAO,eAAe,MAAM,kBAAkB;AAAA,MAC5C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC;AAAA,IACV,CAAC;AAMD,WAAO,eAAe,MAAM,mBAAmB;AAAA,MAC7C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,KAAK,SAAS,KAAK,UAAU,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC;AAAA,IACzD,CAAC;AAMD,WAAO,eAAe,MAAM,iBAAiB;AAAA,MAC3C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,UAAU,IAAI,KAAK,OAAO;AAAA,QAC/B,OAAO;AAAA,QACP,QAAQ;AAAA,MACV,CAAC;AAAA,IACH,CAAC;AAMD,WAAO,eAAe,MAAM,oBAAoB;AAAA,MAC9C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,UAAU,IAAI,KAAK,OAAO;AAAA,QAC/B,OAAO;AAAA,QACP,QAAQ;AAAA,MACV,CAAC;AAAA,IACH,CAAC;AAMD,WAAO,eAAe,MAAM,oBAAoB;AAAA,MAC9C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,KAAK,SAAS,KAAK,UAAU,IAAI,KAAK,OAAO;AAAA,QAClD,YAAY;AAAA,QACZ,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,UAAU;AAAA,MACZ,CAAC,CAAC;AAAA,IACJ,CAAC;AAID,WAAO,eAAe,MAAM,SAAS;AAAA,MACnC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,gBAAgB;AAAA,MAC1C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,aAAa;AAAA,MACvC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,WAAW;AAAA,MACrC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,eAAe;AAAA,MACzC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,eAAe;AAAA,MACzC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,aAAa;AAAA,MACvC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AAOD,WAAO,eAAe,MAAM,cAAc;AAAA,MACxC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,IAAI,KAAK;AAAA,IAClB,CAAC;AACD,WAAO,eAAe,MAAM,qBAAqB;AAAA,MAC/C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC;AAAA,IACV,CAAC;AAOD,WAAO,eAAe,MAAM,cAAc;AAAA,MACxC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,mBAAmB;AAAA,MAC7C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,iBAAiB;AAAA,MAC3C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,sBAAsB;AAAA,MAChD,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,gBAAgB;AAAA,MAC1C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AAQD,WAAO,eAAe,MAAM,cAAc;AAAA,MACxC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,KAAK,SAAS,KAAK,UAAU,IAAI,KAAK,OAAO;AAAA,QAClD,WAAW,CAAC,QAAQ,QAAQ;AAAA,QAC5B,UAAU;AAAA,QACV,YAAY,UAAU,IAAI,KAAK,OAAO;AAAA,UACpC,WAAW,CAAC,UAAU,YAAY;AAAA,UAClC,MAAM,KAAK,MAAM,gBAAgB,IAAI,YAAY;AAAA,QACnD,CAAC;AAAA,MACH,CAAC,CAAC;AAAA,IACJ,CAAC;AACD,WAAO,eAAe,MAAM,YAAY;AAAA,MACtC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC;AAAA,IACV,CAAC;AAAA,EACH;AAAA,EACA,WAAW;AAET,SAAK,cAAc,QAAQ;AAC3B,SAAK,iBAAiB,QAAQ;AAC9B,SAAK,iBAAiB,QAAQ;AAC9B,SAAK,gBAAgB,QAAQ;AAC7B,SAAK,WAAW,QAAQ;AACxB,UAAM,SAAS;AAAA,EACjB;AAAA,EACA,YAAY;AACV,UAAM,UAAU;AAChB,SAAK,WAAW,mBAAmB,IAAI;AACvC,SAAK,WAAW,KAAK,KAAK,WAAW,OAAO,MAAM,YAAU;AAC1D,UAAI,OAAO,SAAS,SAAS;AAC3B,QAAO,KAAK,OAAO,WAAW,cAAY;AACxC,mBAAS,QAAQ;AAAA,QACnB,CAAC;AAAA,MACH,WAAW,OAAO,SAAS,QAAQ;AACjC,aAAK,kBAAkB,OAAO,UAAU,CAAC,OAAO,CAAC;AAAA,MACnD,WAAW,OAAO,SAAS,YAAY;AACrC,aAAK,kBAAkB,OAAO,UAAU,CAAC,OAAO,CAAC;AAAA,MACnD,WAAW,OAAO,SAAS,eAAe;AACxC,aAAK,kBAAkB,OAAO,UAAU,CAAC,OAAO,CAAC;AAAA,MACnD,WAAW,OAAO,SAAS,eAAe;AACxC,aAAK,gBAAgB,OAAO,QAAQ;AAAA,MACtC,WAAW,OAAO,SAAS,aAAa;AACtC,aAAK,kBAAkB,OAAO,OAAO,CAAC,OAAO,CAAC;AAAA,MAChD,OAAO;AACL,cAAM,IAAI,MAAM,2BAA2B;AAAA,MAC7C;AAAA,IACF,CAAC,CAAC;AACF,UAAM,WAAW,KAAK,IAAI,UAAU;AACpC,QAAI,UAAU;AACZ,eAAS,OAAO;AAChB,eAAS,YAAY;AAAA,IACvB;AACA,SAAK,SAAS,KAAK,QAAQ;AAC3B,SAAK,aAAa,SAAS,UAAU,IAAI,SAAS,MAAM,QAAW,CAAC,CAAC,GAAG,CAAC,CAAC;AAC1E,SAAK,WAAW,SAAS,QAAQ,MAAM;AACvC,SAAK,WAAW,OAAO;AAAA,MACrB,SAAS;AAAA,MACT,aAAa;AAAA,MACb,aAAa;AAAA,MACb,aAAa;AAAA,IACf,CAAC;AACD,SAAK,WAAW,OAAO,QAAQ;AAAA,EACjC;AAAA,EACA,cAAc,QAAQ,MAAM;AAAA,EAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAW7B,KAAK,OAAO,KAAK,UAAU,UAAU;AACnC,QAAI,KAAK,IAAI,YAAY,IAAI,GAAG;AAC9B,WAAK,cAAc,OAAO,GAAG;AAC7B,UAAI,KAAK,IAAI,OAAO,MAAM,SAAS,KAAK,IAAI,KAAK,KAAK,KAAK;AACzD,YAAI,aAAa,KAAK;AACtB,YAAI,aAAa,KAAK;AACtB,YAAI,eAAe,KAAK,IAAI,gBAAgB,GAAG,IAAI,KAAK,IAAI,GAAG,MAAM,KAAK;AAC1E,YAAI,QAAQ,CAAC,cAAc;AACzB,kBAAQ,CAAC;AAAA,QACX;AACA,YAAI,MAAM,IAAI,cAAc;AAC1B,gBAAM,IAAI;AAAA,QACZ;AACA,YAAI,QAAQ,KAAK;AACf,WAAC,OAAO,GAAG,IAAI,CAAC,KAAK,KAAK;AAAA,QAC5B;AACA,YAAI,CAAO,SAAS,QAAQ,GAAG;AAC7B,qBAAW,KAAK,IAAI,yBAAyB,CAAC;AAAA,QAChD;AACA,YAAI,CAAC,UAAU;AACb,qBAAW;AAAA,QACb;AACA,YAAI,gBAAgB,KAAK,WAAW,iBAAiB,KAAK,IAAI,iBAAiB,GAAG,CAAC;AACnF,YAAI,oBAAoB;AACxB,YAAI,QAAQ,KAAK,UAAU,GAAG;AAC5B,cAAI,QAAQ,KAAK,IAAI,SAAS,CAAC,GAAG;AAChC,uBAAW;AAAA,UACb,OAAO;AACL,uBAAW;AAAA,UACb;AAAA,QACF;AACA,YAAI,UAAU,KAAK,QAAQ,GAAG;AAC5B,cAAI,MAAM,KAAK,IAAI,OAAO,CAAC,GAAG;AAC5B,uBAAW;AAAA,UACb,OAAO;AACL,uBAAW;AAAA,UACb;AAAA,QACF;AACA,YAAI,eAAe,KAAK,IAAI,gBAAgB,CAAC;AAC7C,YAAI,eAAe,KAAK,IAAI,gBAAgB,QAAQ;AACpD,YAAU,SAAS,YAAY,GAAG;AAChC,0BAAgB,oBAAoB;AAAA,QACtC;AACA,YAAI,gBAAgB;AACpB,YAAU,SAAS,YAAY,GAAG;AAChC,0BAAgB,oBAAoB;AAAA,QACtC;AAEA,YAAI,aAAa,SAAS;AACxB,cAAI,eAAe,GAAG;AAEpB,gBAAI,KAAK,MAAM,SAAS,eAAe;AACrC,oBAAM,QAAQ,IAAI;AAAA,YACpB;AAAA,UACF;AAEA,cAAI,KAAK,MAAM,SAAS,eAAe;AACrC,kBAAM,QAAQ,IAAI;AAAA,UACpB;AAEA,cAAI,MAAM,KAAK,MAAM,QAAQ,IAAI,eAAe;AAE9C,oBAAQ,MAAM,IAAI;AAAA,UACpB;AAAA,QACF,OAEK;AACH,cAAI,eAAe,GAAG;AAEpB,gBAAI,KAAK,MAAM,SAAS,eAAe;AACrC,sBAAQ,MAAM,IAAI;AAAA,YACpB;AAAA,UACF;AAEA,cAAI,KAAK,MAAM,SAAS,eAAe;AACrC,oBAAQ,MAAM,IAAI;AAAA,UACpB;AACA,cAAI,QAAQ,KAAK,MAAM,QAAQ,IAAI,eAAe;AAEhD,kBAAM,QAAQ,IAAI;AAAA,UACpB;AAAA,QACF;AACA,YAAI,KAAK,MAAM,SAAS,eAAe;AACrC,gBAAM,QAAQ,IAAI;AAAA,QACpB;AACA,YAAI,KAAK,MAAM,SAAS,eAAe;AACrC,kBAAQ,MAAM,IAAI;AAAA,QACpB;AACA,YAAI,gBAAgB,QAAQ,gBAAgB,QAAQ,SAAS,KAAK,IAAI,OAAO,KAAK,OAAO,KAAK,IAAI,KAAK,GAAG;AACxG,gBAAM,QAAQ,KAAK;AACnB,cAAI,OAAO;AACT,kBAAM,qBAAqB,MAAM,IAAI;AAAA,UACvC;AAAA,QACF;AACA,aAAK,cAAc,WAAW,WAAW,WAAW,MAAM,SAAS,KAAK,IAAI,OAAO,KAAK,WAAW,cAAc,WAAW,WAAW,WAAW,MAAM,OAAO,KAAK,IAAI,KAAK,KAAK,MAAM;AACtL;AAAA,QACF;AACA,YAAI,WAAW,GAAG;AAChB,cAAI,SAAS,KAAK,IAAI,qBAAqB;AAC3C,cAAIE,aAAYC;AAChB,cAAI,KAAK,IAAI,OAAO,KAAK,OAAO;AAC9B,YAAAD,cAAa,KAAK,QAAQ;AAAA,cACxB,KAAK;AAAA,cACL,IAAI;AAAA,cACJ;AAAA,cACA;AAAA,YACF,CAAC;AAAA,UACH;AACA,cAAI,KAAK,IAAI,KAAK,KAAK,KAAK;AAC1B,YAAAC,cAAa,KAAK,QAAQ;AAAA,cACxB,KAAK;AAAA,cACL,IAAI;AAAA,cACJ;AAAA,cACA;AAAA,YACF,CAAC;AAAA,UACH;AACA,eAAK,cAAcD;AACnB,eAAK,cAAcC;AACnB,cAAID,aAAY;AACd,mBAAOA;AAAA,UACT,WAAWC,aAAY;AACrB,mBAAOA;AAAA,UACT;AAAA,QACF,OAAO;AACL,eAAK,IAAI,SAAS,KAAK;AACvB,eAAK,IAAI,OAAO,GAAG;AAAA,QACrB;AAAA,MACF,OAAO;AACL,YAAI,KAAK,aAAa;AACpB,eAAK,YAAY,KAAK;AAAA,QACxB;AACA,YAAI,KAAK,aAAa;AACpB,eAAK,YAAY,KAAK;AAAA,QACxB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,SAAS;AACX,WAAO,KAAK;AAAA,EACd;AAAA,EACA,kBAAkB,UAAU,WAAW;AACrC,aAAS,OAAO,WAAW,IAAI;AAC/B,SAAK,cAAc,UAAU,SAAS;AACtC,SAAK,eAAe;AACpB,SAAK,iBAAiB,QAAQ;AAC9B,UAAM,QAAQ,SAAS,IAAI,OAAO;AAClC,UAAM,YAAY,KAAK;AACvB,UAAM,OAAO,SAAS,IAAI,MAAM;AAChC,QAAI,SAAS,MAAM;AACjB,gBAAU,SAAS,UAAU,IAAI;AAAA,IACnC;AACA,UAAM,OAAO,SAAS,IAAI,UAAU;AACpC,QAAI,SAAS,MAAM;AACjB,gBAAU,SAAS,UAAU,IAAI;AAAA,IACnC;AAAA,EACF;AAAA,EACA,iBAAiB,WAAW,QAAQ;AAAA,EAAC;AAAA;AAAA;AAAA;AAAA,EAIrC,oBAAoB;AAAA,EAAC;AAAA;AAAA;AAAA;AAAA,EAIrB,6BAA6B;AAAA,EAAC;AAAA,EAC9B,mBAAmB;AAAA,EAAC;AAAA,EACpB,oBAAoB;AAClB,SAAK,WAAW,CAAC;AACjB,SAAK,WAAW,KAAK,eAAa;AAChC,WAAK,iBAAiB,SAAS;AAAA,IACjC,CAAC;AACD,IAAO,KAAK,KAAK,mBAAmB,eAAa;AAC/C,WAAK,iBAAiB,SAAS;AAAA,IACjC,CAAC;AAAA,EACH;AAAA,EACA,mBAAmB;AACjB,UAAM,iBAAiB;AACvB,QAAI,KAAK,IAAI,aAAa,GAAG;AAC3B,WAAK,WAAW,IAAI,WAAW,IAAI;AAAA,IACrC,OAAO;AACL,WAAK,WAAW,IAAI,WAAW,KAAK;AAAA,IACtC;AACA,QAAI,KAAK,QAAQ,OAAO,KAAK,KAAK,QAAQ,KAAK,GAAG;AAChD,YAAM,QAAQ,KAAK;AACnB,UAAI,OAAO;AACT,cAAM,cAAc;AAAA,MACtB;AACA,UAAI,QAAQ,KAAK,IAAI,SAAS,CAAC;AAC/B,UAAI,MAAM,KAAK,IAAI,OAAO,CAAC;AAC3B,UAAI,eAAe,KAAK,IAAI,gBAAgB,GAAG,IAAI,KAAK,IAAI,GAAG,MAAM,KAAK;AAC1E,UAAI,QAAQ,CAAC,cAAc;AACzB,YAAI,QAAQ,QAAQ;AACpB,gBAAQ,CAAC;AACT,aAAK,OAAO,SAAS,KAAK;AAC1B,YAAI,KAAK,QAAQ,KAAK,GAAG;AACvB,eAAK,OAAO,OAAO,MAAM,KAAK;AAAA,QAChC;AAAA,MACF;AACA,UAAI,MAAM,IAAI,cAAc;AAC1B,YAAI,QAAQ,MAAM,IAAI;AACtB,cAAM,IAAI;AACV,aAAK,OAAO,OAAO,GAAG;AACtB,YAAI,KAAK,QAAQ,OAAO,GAAG;AACzB,eAAK,OAAO,SAAS,QAAQ,KAAK;AAAA,QACpC;AAAA,MACF;AAAA,IACF;AACA,UAAM,WAAW,KAAK,IAAI,UAAU;AACpC,aAAS,SAAS,KAAK,IAAI,OAAO;AAClC,aAAS,OAAO,KAAK,IAAI,KAAK;AAC9B,aAAS,YAAY,SAAS,IAAI,YAAY,KAAK;AACnD,aAAS,cAAc,SAAS,WAAW,KAAK,SAAS,OAAO,SAAS;AACzE,aAAS,UAAU;AACnB,QAAI,KAAK,QAAQ,SAAS,GAAG;AAC3B,YAAM,UAAU,KAAK,IAAI,SAAS;AAClC,UAAI,SAAS;AACX,cAAM,eAAe,SAAS,IAAI,WAAW;AAC7C,gBAAQ,OAAO,MAAM;AACrB,gBAAQ,OAAO,KAAK,UAAU,YAAY,CAAC;AAC3C,gBAAQ,aAAa;AACrB,YAAI,cAAc;AAChB,kBAAQ,IAAI,aAAoB,UAAU,QAAQ,IAAI,WAAW,GAAG,YAAY,CAAC;AACjF,kBAAQ,MAAM,aAAa;AAAA,QAC7B;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,uBAAuB;AACrB,UAAM,UAAU,KAAK,IAAI,SAAS;AAClC,QAAI,SAAS;AACX,WAAK,IAAI,UAAU,EAAE,oBAAoB,OAAO;AAAA,IAClD;AAAA,EACF;AAAA,EACA,gBAAgB;AACd,UAAM,cAAc;AACpB,SAAK,qBAAqB;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA,EAIA,aAAa,OAAO;AAClB,SAAK,QAAQ;AACb,UAAM,WAAW,KAAK,IAAI,UAAU;AACpC,aAAS,QAAQ;AACjB,UAAM,cAAc,SAAS,KAAK,KAAK,aAAa;AACpD,UAAM,iBAAiB,SAAS,KAAK,KAAK,gBAAgB;AAC1D,UAAM,qBAAqB,SAAS,KAAK,KAAK,UAAU;AACxD,SAAK,GAAG,SAAS,MAAM;AACrB,YAAM,qBAAqB,IAAI;AAAA,IACjC,CAAC;AACD,SAAK,GAAG,OAAO,MAAM;AACnB,YAAM,qBAAqB,IAAI;AAAA,IACjC,CAAC;AACD,UAAM,cAAc,UAAU,SAAS,MAAM;AAC3C,WAAK,cAAc;AAAA,IACrB,CAAC;AACD,UAAM,cAAc,UAAU,UAAU,MAAM;AAC5C,WAAK,cAAc;AAAA,IACrB,CAAC;AACD,UAAM,YAAY,IAAI;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA,EAIA,aAAa,UAAU;AACrB,SAAK,kBAAkB,UAAU,IAAI;AACrC,WAAO,MAAM,aAAa,QAAQ;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA,EAIA,aAAa,UAAU;AACrB,SAAK,kBAAkB,UAAU,KAAK;AACtC,WAAO,MAAM,aAAa,QAAQ;AAAA,EACpC;AAAA,EACA,kBAAkB,UAAU,aAAa;AACvC,UAAM,KAAK;AACX,UAAM,QAAQ,SAAS,IAAI,OAAO;AAClC,QAAI,OAAO;AACT,YAAM,IAAI,IAAI,WAAW;AAAA,IAC3B;AACA,UAAM,OAAO,SAAS,IAAI,MAAM;AAChC,QAAI,MAAM;AACR,WAAK,IAAI,IAAI,WAAW;AAAA,IAC1B;AACA,UAAM,OAAO,SAAS,IAAI,MAAM;AAChC,QAAI,MAAM;AACR,WAAK,IAAI,IAAI,WAAW;AAAA,IAC1B;AACA,UAAM,WAAW,SAAS,IAAI,UAAU;AACxC,QAAI,UAAU;AACZ,eAAS,IAAI,IAAI,WAAW;AAAA,IAC9B;AACA,UAAM,SAAS,SAAS,IAAI,QAAQ;AACpC,QAAI,QAAQ;AACV,YAAM,SAAS,OAAO,IAAI,QAAQ;AAClC,UAAI,QAAQ;AACV,eAAO,IAAI,IAAI,WAAW;AAAA,MAC5B;AAAA,IACF;AAAA,EACF;AAAA,EACA,gBAAgB,UAAU,SAAS;AACjC,UAAM,QAAQ,SAAS,IAAI,OAAO;AAClC,UAAM,IAAI;AACV,QAAI,OAAO;AACT,YAAM,WAAW,GAAG,OAAO;AAAA,IAC7B;AACA,UAAM,OAAO,SAAS,IAAI,MAAM;AAChC,QAAI,MAAM;AACR,WAAK,WAAW,GAAG,OAAO;AAAA,IAC5B;AACA,UAAM,OAAO,SAAS,IAAI,MAAM;AAChC,QAAI,MAAM;AACR,WAAK,WAAW,GAAG,OAAO;AAAA,IAC5B;AACA,UAAM,WAAW,SAAS,IAAI,UAAU;AACxC,QAAI,UAAU;AACZ,eAAS,WAAW,GAAG,OAAO;AAAA,IAChC;AACA,UAAM,SAAS,SAAS,IAAI,QAAQ;AACpC,QAAI,QAAQ;AACV,YAAM,SAAS,OAAO,IAAI,QAAQ;AAClC,UAAI,QAAQ;AACV,eAAO,WAAW,GAAG,OAAO;AAAA,MAC9B;AAAA,IACF;AAAA,EACF;AAAA,EACA,cAAc,UAAU,MAAM,OAAO;AACnC,QAAI,IAAI,IAAI;AACZ,UAAM,WAAW,KAAK,IAAI,UAAU;AACpC,QAAI,IAAI;AACR,UAAM,QAAQ,SAAS,IAAI,OAAO;AAClC,QAAI,CAAC,OAAO;AACV,eAAS,UAAU,UAAU,IAAI;AAAA,IACnC,OAAO;AACL,UAAI,YAAY,MAAM,IAAI,WAAW;AACrC,UAAIC,UAAS;AACb,UAAI,OAAO;AACT,aAAK,cAAc,QAAQ,cAAc,SAAS,SAAS,UAAU,QAAQ,CAAC,MAAM,IAAI;AACtF,UAAAA,UAAS;AAAA,QACX;AAAA,MACF,OAAO;AACL,aAAK,cAAc,QAAQ,cAAc,SAAS,SAAS,UAAU,QAAQ,CAAC,MAAM,IAAI;AACtF,UAAAA,UAAS;AAAA,QACX;AAAA,MACF;AACA,UAAIA,SAAQ;AACV,SAAC,KAAK,MAAM,YAAY,QAAQ,OAAO,SAAS,SAAS,GAAG,SAAS,YAAY,KAAK;AACtF,iBAAS,UAAU,UAAU,IAAI;AACjC,cAAM,QAAQ;AACd,iBAAS,OAAO,YAAY,KAAK;AAAA,MACnC;AAAA,IACF;AACA,UAAM,OAAO,SAAS,IAAI,MAAM;AAChC,QAAI,CAAC,MAAM;AACT,eAAS,SAAS,UAAU,IAAI;AAAA,IAClC,OAAO;AACL,UAAI,YAAY,KAAK,IAAI,WAAW;AACpC,UAAIA,UAAS;AACb,UAAI,OAAO;AACT,aAAK,cAAc,QAAQ,cAAc,SAAS,SAAS,UAAU,QAAQ,CAAC,MAAM,IAAI;AACtF,UAAAA,UAAS;AAAA,QACX;AAAA,MACF,OAAO;AACL,aAAK,cAAc,QAAQ,cAAc,SAAS,SAAS,UAAU,QAAQ,CAAC,MAAM,IAAI;AACtF,UAAAA,UAAS;AAAA,QACX;AAAA,MACF;AACA,UAAIA,SAAQ;AACV,SAAC,KAAK,KAAK,YAAY,QAAQ,OAAO,SAAS,SAAS,GAAG,SAAS,YAAY,IAAI;AACpF,iBAAS,SAAS,UAAU,IAAI;AAChC,aAAK,QAAQ;AACb,iBAAS,KAAK,YAAY,IAAI;AAAA,MAChC;AAAA,IACF;AACA,UAAM,OAAO,SAAS,IAAI,MAAM;AAChC,QAAI,CAAC,MAAM;AACT,eAAS,SAAS,UAAU,IAAI;AAAA,IAClC,OAAO;AACL,UAAIA,UAAS;AACb,UAAI,YAAY,KAAK,IAAI,WAAW;AACpC,UAAI,OAAO;AACT,aAAK,cAAc,QAAQ,cAAc,SAAS,SAAS,UAAU,QAAQ,CAAC,MAAM,IAAI;AACtF,UAAAA,UAAS;AAAA,QACX;AAAA,MACF,OAAO;AACL,aAAK,cAAc,QAAQ,cAAc,SAAS,SAAS,UAAU,QAAQ,CAAC,MAAM,IAAI;AACtF,UAAAA,UAAS;AAAA,QACX;AAAA,MACF;AACA,UAAIA,SAAQ;AACV,SAAC,KAAK,KAAK,YAAY,QAAQ,OAAO,SAAS,SAAS,GAAG,SAAS,YAAY,IAAI;AACpF,iBAAS,SAAS,UAAU,IAAI;AAChC,aAAK,QAAQ;AACb,iBAAS,MAAM,YAAY,IAAI;AAAA,MACjC;AAAA,IACF;AACA,QAAI,CAAC,SAAS,CAAC,SAAS,IAAI,UAAU,GAAG;AACvC,eAAS,aAAa,UAAU,IAAI;AAAA,IACtC;AACA,SAAK,eAAe,QAAQ;AAAA,EAC9B;AAAA,EACA,eAAe,UAAU;AACvB,QAAI,SAAS,SAAS,IAAI,QAAQ;AAClC,QAAI,aAAa,KAAK,IAAI,QAAQ;AAClC,QAAI,CAAC,UAAU,cAAc,CAAC,SAAS,IAAI,SAAS,GAAG;AACrD,eAAS,WAAW,KAAK,OAAO,MAAM,QAAQ;AAAA,IAChD;AACA,QAAI,QAAQ;AACV,aAAO,OAAO;AACd,YAAM,SAAS,OAAO,IAAI,QAAQ;AAClC,UAAI,QAAQ;AACV,eAAO,aAAa,QAAQ;AAC5B,iBAAS,OAAO,UAAU,MAAM;AAChC,YAAI,CAAC,OAAO,QAAQ;AAClB,eAAK,iBAAiB,SAAS,KAAK,MAAM;AAAA,QAC5C;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,gBAAgB;AACd,UAAM,cAAc;AACpB,UAAM,QAAQ,KAAK;AACnB,QAAI,OAAO;AACT,YAAM,mBAAmB;AACzB,YAAM,qBAAqB,cAAc;AAAA,IAC3C;AACA,SAAK,IAAI,UAAU,EAAE,iBAAiB;AACtC,SAAK,eAAe;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAIA,gBAAgB,UAAU;AACxB,UAAM,gBAAgB,QAAQ;AAC9B,UAAM,WAAW,KAAK,IAAI,UAAU;AACpC,UAAM,QAAQ,SAAS,IAAI,OAAO;AAClC,QAAI,OAAO;AACT,eAAS,OAAO,YAAY,KAAK;AACjC,YAAM,QAAQ;AAAA,IAChB;AACA,UAAM,OAAO,SAAS,IAAI,MAAM;AAChC,QAAI,MAAM;AACR,eAAS,MAAM,YAAY,IAAI;AAC/B,WAAK,QAAQ;AAAA,IACf;AACA,UAAM,OAAO,SAAS,IAAI,MAAM;AAChC,QAAI,MAAM;AACR,eAAS,KAAK,YAAY,IAAI;AAC9B,WAAK,QAAQ;AAAA,IACf;AACA,UAAM,WAAW,SAAS,IAAI,UAAU;AACxC,QAAI,UAAU;AACZ,eAAS,UAAU,YAAY,QAAQ;AACvC,eAAS,QAAQ;AAAA,IACnB;AACA,UAAM,SAAS,SAAS,IAAI,QAAQ;AACpC,QAAI,QAAQ;AACV,aAAO,QAAQ;AAAA,IACjB;AAAA,EACF;AAAA,EACA,eAAe;AACb,SAAK,WAAW,aAAa,KAAK,qBAAqB,IAAI,KAAK,IAAI,UAAU,EAAE,WAAW,CAAC;AAC5F,UAAM,aAAa,KAAK;AACxB,QAAI,CAAC,WAAW,SAAS,GAAG;AAC1B,YAAM,SAAS,WAAW,YAAY;AACtC,YAAM,SAAS,KAAK,KAAK,OAAO,QAAQ,OAAO,IAAI;AACnD,UAAI,OAAO,WAAW,IAAI,MAAM;AAChC,MAAO,KAAK,KAAK,WAAW,cAAY;AACtC,cAAM,QAAQ,SAAS,IAAI,OAAO;AAClC,YAAI,SAAS,CAAC,MAAM,SAAS,GAAG;AAC9B,gBAAMC,UAAS,MAAM,YAAY;AACjC,gBAAM,IAAI,KAAK,KAAKA,QAAO,QAAQA,QAAO,IAAI;AAC9C,cAAI,IAAI,QAAQ;AACd,mBAAO,MAAM,KAAK,SAAS;AAAA,UAC7B;AAAA,QACF;AAAA,MACF,CAAC;AACD,iBAAW,IAAI,QAAQ,IAAI;AAAA,IAC7B;AACA,QAAI,QAAQ,KAAK,IAAI,SAAS,CAAC;AAC/B,QAAI,MAAM,KAAK,IAAI,OAAO,CAAC;AAC3B,SAAK,IAAI,UAAU,EAAE,YAAY,YAAY,SAAS,MAAM,SAAS,GAAG;AAAA,EAC1E;AAAA,EACA,sBAAsB,UAAU,cAAc;AAC5C,UAAM,WAAW,KAAK,IAAI,UAAU;AACpC,eAAW,SAAS,eAAe,QAAQ;AAC3C,SAAK,kBAAkB;AACvB,SAAK,gBAAgB;AACrB,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAgB;AACd,UAAM,eAAe,KAAK;AAC1B,QAAI,WAAW,KAAK;AACpB,UAAM,UAAU,KAAK,IAAI,SAAS;AAClC,UAAM,WAAW,KAAK,IAAI,UAAU;AACpC,QAAU,SAAS,QAAQ,GAAG;AAC5B,MAAO,KAAK,KAAK,QAAQ,YAAU;AACjC,YAAI,OAAO,IAAI,UAAU,MAAM,MAAM;AACnC,gBAAM,WAAW,KAAK,cAAc,QAAQ,UAAU,KAAK,IAAI,iBAAiB,CAAC;AACjF,cAAI,gBAAgB,aAAa,QAAQ,MAAM,KAAK,IAAI;AACtD,mBAAO,mBAAmB,QAAQ;AAClC,mBAAO,kBAAkB,QAAQ;AACjC,mBAAO,UAAU,kBAAkB;AAAA,UACrC,OAAO;AACL,mBAAO,oBAAoB,QAAQ;AACnC,mBAAO,OAAO,mBAAmB,QAAQ;AAAA,UAC3C;AAAA,QACF;AAAA,MACF,CAAC;AACD,UAAI,KAAK,IAAI,aAAa,GAAG;AAC3B,mBAAW,KAAK,kBAAkB,UAAU,KAAK,IAAI,mBAAmB,GAAG,CAAC;AAAA,MAC9E;AACA,WAAK,cAAc,mBAAmB,QAAQ;AAC9C,UAAI,SAAS;AACX,iBAAS,oBAAoB,OAAO;AACpC,YAAI,CAAO,MAAM,QAAQ,GAAG;AAC1B,eAAK,mBAAmB,SAAS,QAAQ;AACzC,mBAAS,gBAAgB,SAAS,QAAQ;AAC1C,cAAI,WAAW,KAAK,IAAI,SAAS,CAAC,KAAK,WAAW,KAAK,IAAI,OAAO,CAAC,GAAG;AACpE,oBAAQ,KAAK,CAAC;AAAA,UAChB,OAAO;AACL,oBAAQ,KAAK,CAAC;AAAA,UAChB;AAAA,QACF,OAAO;AACL,kBAAQ,KAAK,CAAC;AAAA,QAChB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,mBAAmB,SAAS,UAAU;AACpC,YAAQ,MAAM,IAAI,QAAQ,KAAK,eAAe,QAAQ,CAAC;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA,EAIA,kBAAkB,UAAU,WAAW;AACrC,WAAO;AAAA,EACT;AAAA,EACA,uBAAuB;AAAA,EAAC;AAAA;AAAA;AAAA;AAAA,EAIxB,mBAAmB;AACjB,QAAI,UAAU,KAAK,IAAI,SAAS;AAChC,QAAI,SAAS;AACX,cAAQ,KAAK;AAAA,IACf;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,mBAAmB;AACjB,QAAI,UAAU,KAAK,IAAI,SAAS;AAChC,QAAI,SAAS;AACX,cAAQ,KAAK;AAAA,IACf;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,sBAAsB,WAAW,SAAS;AAAA,EAAC;AAAA,EAC3C,cAAc;AACZ,UAAM,YAAY;AAClB,SAAK,aAAa;AAClB,SAAK,eAAe;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,qBAAqB,YAAY;AAC/B,UAAM,WAAW,KAAK,IAAI,UAAU;AACpC,WAAO,SAAS,eAAe,aAAa,SAAS,WAAW,CAAC;AAAA,EACnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,eAAe,UAAU;AACvB,WAAO,KAAK,IAAI,UAAU,EAAE,eAAe,QAAQ;AAAA,EACrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,iBAAiB,UAAU;AACzB,WAAO,KAAK,IAAI,UAAU,EAAE,iBAAiB,QAAQ;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,YAAY,UAAU;AACpB,WAAO,KAAK,IAAI,UAAU,EAAE,YAAY,QAAQ;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA,EAIA,UAAU,WAAW,WAAW,eAAe,YAAY;AACzD,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,gBAAgB,cAAc;AAC5B,WAAO,KAAK,WAAW,KAAK,YAAY;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA,EAIA,iBAAiB,SAAS;AAAA,EAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM3B,uBAAuB;AACrB,WAAO;AAAA,EACT;AACF;AACA,OAAO,eAAe,MAAM,aAAa;AAAA,EACvC,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO;AACT,CAAC;AACD,OAAO,eAAe,MAAM,cAAc;AAAA,EACxC,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO,UAAU,WAAW,OAAO,CAAC,KAAK,SAAS,CAAC;AACrD,CAAC;;;ACv5BM,IAAM,YAAN,cAAwB,KAAK;AAAA,EAClC,cAAc;AACZ,UAAM,GAAG,SAAS;AAClB,WAAO,eAAe,MAAM,kBAAkB;AAAA,MAC5C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,2BAA2B;AAAA,MACrD,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,eAAe;AAAA,MACzC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,gBAAgB;AAAA,MAC1C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,YAAY;AAAA,MACtC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,YAAY;AAAA,MACtC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,eAAe;AAAA,MACzC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,cAAc;AAAA,MACxC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,WAAW;AAAA,MACrC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,mBAAmB;AAAA,MAC7C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAIA,oBAAoB;AAClB,SAAK,iBAAiB;AACtB,SAAK,UAAU;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA,EAIA,6BAA6B;AAC3B,SAAK,0BAA0B;AAC/B,SAAK,UAAU;AAAA,EACjB;AAAA,EACA,YAAY;AACV,SAAK,UAAU,YAAmB,UAAU,KAAK,UAAU,WAAW,CAAC,MAAM,CAAC;AAC9E,SAAK,cAAc,QAAQ,OAAO;AAClC,SAAK,OAAO,OAAO;AACnB,UAAM,UAAU;AAAA,EAClB;AAAA,EACA,mBAAmB;AACjB,UAAM,iBAAiB;AACvB,QAAI,KAAK,QAAQ,cAAc,GAAG;AAChC,UAAI,gBAAgB,KAAK,cAAc;AACvC,UAAI,eAAe;AACjB,YAAI,KAAK,SAAS;AAChB,eAAK,QAAQ,QAAQ;AAAA,QACvB;AAAA,MACF;AACA,UAAI,eAAe,KAAK,IAAI,cAAc;AAC1C,UAAI,cAAc;AAChB,aAAK,UAAU,IAAI,cAAc,CAAC,aAAa,UAAU,qBAAqB,MAAM;AAClF,eAAK,0BAA0B;AAAA,QACjC,CAAC,GAAG,aAAa,UAAU,qBAAqB,MAAM;AACpD,eAAK,0BAA0B;AAAA,QACjC,CAAC,CAAC,CAAC;AAAA,MACL;AAAA,IACF;AACA,QAAI,YAAY;AAChB,QAAI,KAAK,QAAQ,KAAK,KAAK,KAAK,QAAQ,KAAK,KAAK,KAAK,QAAQ,cAAc,KAAK,KAAK,QAAQ,cAAc,GAAG;AAC9G,kBAAY;AACZ,WAAK,WAAW,IAAI,QAAQ,EAAE;AAAA,IAChC;AAEA,QAAI,KAAK,cAAc,KAAK,kBAAkB,KAAK,gBAAgB,aAAa,KAAK,eAAe,OAAO,KAAK,KAAK,eAAe,QAAQ,KAAK,KAAK,QAAQ,UAAU,KAAK,KAAK,QAAQ,UAAU,KAAK,KAAK,QAAQ,aAAa,KAAK,KAAK,QAAQ,aAAa,KAAK,KAAK,QAAQ,WAAW,KAAK,KAAK,QAAQ,cAAc,KAAK,KAAK,QAAQ,uBAAuB,GAAG;AACzW,WAAK,WAAW;AAChB,WAAK,iBAAiB;AAAA,IACxB;AACA,SAAK,iBAAiB;AACtB,QAAI,KAAK,2BAA2B,CAAC,KAAK,cAAc,KAAK,IAAI,YAAY,IAAI,GAAG;AAClF,YAAM,QAAQ,KAAK;AACnB,UAAI,QAAQ;AAEZ,UAAI,OAAO;AACT,cAAM,SAAS,KAAK,IAAI,UAAU,EAAE,WAAW,QAAQ;AACvD,YAAI,UAAU,KAAK;AACjB,gBAAM,MAAM,KAAK,UAAQ;AACvB,gBAAI,KAAK,aAAa,aAAa;AACjC,sBAAQ;AAAA,YACV;AAAA,UACF,CAAC;AAAA,QACH,WAAW,UAAU,KAAK;AACxB,gBAAM,MAAM,KAAK,UAAQ;AACvB,gBAAI,KAAK,aAAa,aAAa;AACjC,sBAAQ;AAAA,YACV;AAAA,UACF,CAAC;AAAA,QACH;AAAA,MACF;AACA,UAAI,OAAO;AACT,aAAK,oBAAoB;AAAA,MAC3B;AACA,WAAK,0BAA0B;AAAA,IACjC;AACA,SAAK,WAAW;AAChB,QAAI,KAAK,cAAc,KAAK,gBAAgB,KAAK,QAAQ,OAAO,KAAK,KAAK,QAAQ,KAAK,KAAK,KAAK,eAAe,KAAK,KAAK,KAAK,eAAe,cAAc,KAAK,KAAK,eAAe,cAAc,KAAK,KAAK,eAAe,KAAK,KAAK,KAAK,eAAe,MAAM,KAAK,KAAK,eAAe,OAAO,KAAK,KAAK,eAAe,QAAQ,KAAK,KAAK,QAAQ,aAAa,GAAG;AACjW,WAAK,mBAAmB;AACxB,WAAK,kBAAkB;AACvB,WAAK,kBAAkB;AAAA,IACzB;AACA,SAAK,aAAa,KAAK,UAAU;AAAA,EACnC;AAAA,EACA,mBAAmB;AACjB,QAAI,KAAK,cAAc,CAAC,KAAK,aAAa;AACxC,WAAK,0BAA0B;AAC/B,WAAK,cAAc;AACnB,UAAI,KAAK,WAAW,mBAAmB,KAAK,KAAK,WAAW,cAAc,KAAK,KAAK,WAAW,mBAAmB,KAAK,KAAK,WAAW,cAAc,GAAG;AACtJ,aAAK,0BAA0B;AAAA,MACjC;AAAA,IACF;AAAA,EACF;AAAA,EACA,cAAc;AACZ,UAAM,YAAY;AAClB,SAAK,cAAc;AAAA,EACrB;AAAA,EACA,aAAa;AAAA,EAAC;AAAA,EACd,YAAY,OAAO;AACjB,UAAM,eAAe,KAAK,IAAI,cAAc;AAC5C,UAAM,YAAY,KAAK,mBAAmB;AAC1C,QAAI,OAAO;AACX,QAAI,cAAc;AAChB,aAAO,UAAU,OAAO,OAAO,YAAY;AAAA,IAC7C,OAAO;AACL,aAAO,UAAU,OAAO,OAAO,QAAW,KAAK,WAAW,mBAAmB,CAAC;AAAA,IAChF;AACA,WAAO;AAAA,EACT;AAAA,EACA,oBAAoB;AAClB,UAAMC,OAAM,KAAK,WAAW,KAAK;AACjC,UAAMC,OAAM,KAAK,WAAW,KAAK;AACjC,QAAU,SAASD,IAAG,KAAW,SAASC,IAAG,GAAG;AAC9C,YAAM,cAAc,KAAK,IAAI,aAAa;AAC1C,YAAM,OAAO,KAAK,WAAW,MAAM;AACnC,YAAM,eAAe,KAAK,WAAW,cAAc;AACnD,YAAM,eAAe,KAAK,WAAW,cAAc,IAAI;AACvD,UAAI,QAAQ,eAAe;AAC3B,UAAI,kBAAkB;AACtB,UAAI,SAASD;AACb,UAAI,aAAa;AACf,gBAAQ,KAAK;AACb,YAAI,QAAQ,cAAc;AACxB,iBAAO,QAAQ,cAAc;AAC3B,qBAAS;AAAA,UACX;AAAA,QACF;AACA,iBAAS;AACT,YAAI,UAAU,GAAG;AACf,mBAAS;AACT,cAAI,OAAO,GAAG;AACZ,gBAAU,SAAS,KAAK,WAAW,GAAG;AACpC,uBAAS,KAAK;AAAA,YAChB,OAAO;AACL,uBAAS,KAAK,IAAI,IAAI,GAAG;AAAA,YAC3B;AAAA,UACF;AAAA,QACF;AACA,0BAAkB,KAAK,IAAI,eAAe,IAAI,IAAI,KAAK,SAAS,KAAK,IAAI,MAAM,IAAI,KAAK;AACxF,YAAI,kBAAkB,GAAG;AACvB,kBAAQ,KAAK,IAAI,IAAI,KAAK,IAAI,MAAM,IAAI,KAAK,SAAS,EAAE;AAAA,QAC1D;AAAA,MACF;AAEA,YAAM,WAAW,KAAK,IAAI,UAAU;AACpC,YAAM,qBAAqB,SAAS,IAAI,oBAAoB;AAC5D,YAAM,mBAAmB,SAAS,IAAI,oBAAoB,kBAAkB;AAC5E,UAAI,YAAY,KAAK,IAAI,IAAI,KAAK,MAAM,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,CAAC;AAC/E,YAAM,eAAe,KAAK,MAAM,OAAO,SAAS;AAChD,UAAI,iBAAiB;AACrB,UAAU,MAAM,eAAe,GAAG,EAAE,IAAI,KAAK,GAAG;AAC9C,yBAAiB;AAAA,MACnB;AACA,UAAU,MAAM,eAAe,IAAI,EAAE,IAAI,KAAK,GAAG;AAC/C,yBAAiB;AAAA,MACnB;AACA,UAAI,YAAY,OAAO;AAEvB,UAAI,IAAI;AACR,UAAI,IAAI;AACR,UAAI,WAAW;AACf,aAAO,QAAQ,cAAc;AAC3B,YAAI;AACJ,YAAI,KAAK,UAAU,SAAS,IAAI,GAAG;AACjC,qBAAW,IAAI,SAAS,MAAM,QAAW,CAAC,CAAC;AAC3C,eAAK,WAAW,KAAK,QAAQ;AAC7B,eAAK,gBAAgB,QAAQ;AAAA,QAC/B,OAAO;AACL,qBAAW,KAAK,UAAU,CAAC;AAAA,QAC7B;AACA,aAAK,cAAc,UAAU,CAAC,CAAC;AAC/B,aAAK,gBAAgB,UAAU,IAAI;AACnC,iBAAS,OAAO,SAAS,KAAK;AAC9B,cAAM,QAAQ,SAAS,IAAI,OAAO;AAClC,YAAI,OAAO;AACT,gBAAM,IAAI,QAAQ,KAAK,YAAY,KAAK,CAAC;AAAA,QAC3C;AACA,aAAK,iBAAiB,QAAQ;AAC9B,YAAI,YAAY;AAChB,YAAI,CAAC,aAAa;AAChB,uBAAa;AAAA,QACf,OAAO;AACL,cAAI,kBAAkB,GAAG;AACvB,wBAAY,KAAK,IAAI,IAAI,KAAK,IAAI,MAAM,IAAI,KAAK,SAAS,IAAI,EAAE;AAAA,UAClE,OAAO;AACL,yBAAa;AAAA,UACf;AAAA,QACF;AAEA,YAAI,kBAAkB;AACpB,cAAI,aAAa,QAAQ;AACzB,cAAI,aAAa;AACf,gBAAI,kBAAkB,GAAG;AACvB,kBAAI,kBAAkB,KAAK,cAAc,OAAO,WAAW,EAAE;AAC7D,0BAAY,gBAAgB;AAAA,YAC9B;AACA,yBAAa,QAAQ;AAAA,UACvB;AACA,iBAAO,aAAa,YAAY,OAAO,OAAe;AACpD,gBAAI;AACJ,gBAAI,KAAK,eAAe,SAAS,IAAI,GAAG;AACtC,8BAAgB,IAAI,SAAS,MAAM,QAAW,CAAC,CAAC;AAChD,mBAAK,eAAe,KAAK,aAAa;AACtC,mBAAK,gBAAgB,aAAa;AAAA,YACpC,OAAO;AACL,8BAAgB,KAAK,eAAe,CAAC;AAAA,YACvC;AACA,iBAAK,cAAc,eAAe,CAAC,OAAO,GAAG,IAAI;AACjD,iBAAK,gBAAgB,eAAe,IAAI;AACxC,0BAAc,OAAO,SAAS,UAAU;AACxC,kBAAM,aAAa,cAAc,IAAI,OAAO;AAC5C,gBAAI,YAAY;AACd,kBAAI,oBAAoB;AACtB,2BAAW,IAAI,QAAQ,KAAK,YAAY,UAAU,CAAC;AAAA,cACrD,OAAO;AACL,2BAAW,WAAW,WAAW,KAAK;AAAA,cACxC;AAAA,YACF;AACA,iBAAK,iBAAiB,aAAa;AACnC,0BAAc;AACd;AAAA,UACF;AAAA,QACF;AACA,gBAAQ;AACR,YAAI,YAAY,OAAO;AACrB;AAAA,QACF;AACA,YAAIE,aAAY,KAAK,IAAI,IAAI,KAAK,MAAM,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,CAAC;AAC/E,YAAIA,aAAY,KAAK,CAAC,aAAa;AAEjC,cAAI,WAAW,KAAK,MAAM,KAAK,IAAI,KAAK,IAAI,KAAK,IAAIA,UAAS,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI;AAEnF,kBAAc,MAAM,OAAO,QAAQ;AAAA,QACrC;AACA;AAEA,YAAI,eAAe,mBAAmB,GAAG;AACvC,cAAI,QAAQ,OAAO,MAAM;AACvB,oBAAQ;AAAA,UACV;AAAA,QACF;AACA,mBAAW;AAAA,MACb;AACA,eAAS,IAAI,GAAG,IAAI,KAAK,UAAU,QAAQ,KAAK;AAC9C,aAAK,gBAAgB,KAAK,UAAU,CAAC,GAAG,KAAK;AAAA,MAC/C;AACA,eAAS,IAAI,GAAG,IAAI,KAAK,eAAe,QAAQ,KAAK;AACnD,aAAK,gBAAgB,KAAK,eAAe,CAAC,GAAG,KAAK;AAAA,MACpD;AACA,MAAO,KAAK,KAAK,QAAQ,YAAU;AACjC,YAAI,OAAO,QAAQ;AACjB,iBAAO,eAAe;AAAA,QACxB;AAAA,MACF,CAAC;AACD,WAAK,aAAa;AAAA,IACpB;AAAA,EACF;AAAA,EACA,iBAAiB,UAAU,OAAO;AAChC,QAAI,WAAW,KAAK,IAAI,UAAU;AAClC,QAAI,QAAQ,SAAS,IAAI,OAAO;AAChC,QAAI,WAAW,SAAS,IAAI,UAAU;AACtC,QAAI,WAAW,KAAK,gBAAgB,KAAK;AACzC,QAAI,cAAc;AAClB,QAAI,kBAAkB,KAAK,gBAAgB,QAAQ,KAAK,WAAW,MAAM,CAAC;AAC1E,QAAU,SAAS,QAAQ,GAAG;AAC5B,oBAAc,KAAK,gBAAgB,QAAQ;AAC3C,wBAAkB;AAAA,IACpB;AACA,QAAI,SAAS,IAAI,SAAS,GAAG;AAC3B,UAAI,YAAY,MAAM;AACpB,0BAAkB;AAAA,MACpB;AAAA,IACF;AACA,QAAI,mBAAmB;AACvB,QAAI,gBAAgB,SAAS,IAAI,eAAe;AAChD,QAAI,iBAAiB,MAAM;AACzB,yBAAmB,KAAK,gBAAgB,aAAa;AAAA,IACvD;AACA,aAAS,YAAY,SAAS,IAAI,OAAO,GAAG,UAAU,kBAAkB,KAAK;AAC7E,UAAM,OAAO,SAAS,IAAI,MAAM;AAChC,aAAS,WAAW,MAAM,UAAU,WAAW;AAC/C,QAAI,MAAM;AACR,UAAI,SAAS,KAAK,IAAI,aAAa,CAAC,GAAG;AACrC,aAAK,OAAO,MAAM;AAClB,aAAK,aAAa;AAAA,MACpB,WAAW,KAAK,OAAO,MAAM,GAAG;AAC9B,aAAK,UAAU,MAAM;AACrB,aAAK,aAAa;AAAA,MACpB;AAAA,IACF;AACA,aAAS,WAAW,SAAS,IAAI,MAAM,GAAG,UAAU,kBAAkB,KAAK;AAC3E,aAAS,WAAW,SAAS,IAAI,UAAU,GAAG,UAAU,eAAe;AACvE,SAAK,eAAe,QAAQ;AAC5B,aAAS,aAAa,SAAS,IAAI,QAAQ,GAAG,UAAU,WAAW;AACnE,QAAI,CAAC,SAAS,IAAI,SAAS,GAAG;AAC5B,YAAM,WAAW,KAAK,IAAI,UAAU;AACpC,UAAI,UAAU;AACZ,iBAAS,QAAQ;AAAA,MACnB;AAAA,IACF;AAAA,EACF;AAAA,EACA,qBAAqB;AACnB,QAAI,eAAe,KAAK,gBAAgB,KAAK,IAAI,SAAS,CAAC,CAAC;AAC5D,QAAI,eAAe,KAAK,gBAAgB,KAAK,IAAI,OAAO,CAAC,CAAC;AAC1D,UAAM,YAAY,KAAK,IAAI,UAAU,EAAE,UAAU;AACjD,QAAI,aAAa,KAAK,cAAc,cAAc,cAAc,WAAW,IAAI;AAC/E,QAAI,oBAA2B,cAAc,WAAW,IAAI;AAC5D,SAAK,cAAc,qBAAqB,iBAAiB;AACzD,mBAAqB,MAAM,cAAc,iBAAiB;AAC1D,mBAAqB,MAAM,cAAc,iBAAiB;AAC1D,iBAAa,KAAK,cAAc,cAAc,cAAc,WAAW,IAAI;AAC3E,QAAI,OAAO,WAAW;AACtB,mBAAe,WAAW;AAC1B,mBAAe,WAAW;AAC1B,QAAI,KAAK,WAAW,cAAc,MAAM,gBAAgB,KAAK,WAAW,cAAc,MAAM,gBAAgB,KAAK,WAAW,MAAM,MAAM,MAAM;AAE5I,WAAK,cAAc,gBAAgB,YAAY;AAC/C,WAAK,cAAc,gBAAgB,YAAY;AAC/C,WAAK,cAAc,QAAQ,IAAI;AAAA,IACjC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,gBAAgB,UAAU;AACxB,UAAMF,OAAM,KAAK,WAAW,KAAK;AACjC,UAAMC,OAAM,KAAK,WAAW,KAAK;AACjC,QAAI,CAAC,KAAK,IAAI,aAAa,GAAG;AAC5B,aAAO,YAAYA,OAAMD,QAAOA;AAAA,IAClC,OAAO;AACL,aAAO,KAAK,IAAI,KAAK,IAAI,YAAY,KAAK,IAAIC,IAAG,IAAI,KAAK,SAAS,KAAK,IAAID,IAAG,IAAI,KAAK,UAAU,KAAK,IAAIA,IAAG,IAAI,KAAK,UAAU,KAAK,MAAM;AAAA,IAC9I;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gBAAgB,OAAO;AACrB,UAAMA,OAAM,KAAK,WAAW,KAAK;AACjC,UAAMC,OAAM,KAAK,WAAW,KAAK;AACjC,QAAI,CAAC,KAAK,IAAI,aAAa,GAAG;AAC5B,cAAQ,QAAQD,SAAQC,OAAMD;AAAA,IAChC,OAAO;AACL,UAAI,SAAS,GAAG;AACd,YAAI,cAAc,KAAK,IAAI,aAAa;AACxC,YAAU,SAAS,WAAW,GAAG;AAC/B,kBAAQ;AAAA,QACV;AAAA,MACF;AACA,cAAQ,KAAK,IAAI,KAAK,IAAI,KAAK,SAAS,KAAK,IAAIA,IAAG,IAAI,KAAK,WAAW,KAAK,IAAIC,IAAG,IAAI,KAAK,SAAS,KAAK,IAAID,IAAG,IAAI,KAAK;AAAA,IAC7H;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,qBAAqB,OAAO;AAC1B,UAAMA,OAAM,KAAK,WAAW,UAAU;AACtC,UAAMC,OAAM,KAAK,WAAW,UAAU;AACtC,QAAI,CAAC,KAAK,IAAI,aAAa,GAAG;AAC5B,cAAQ,QAAQD,SAAQC,OAAMD;AAAA,IAChC,OAAO;AACL,UAAI,SAAS,GAAG;AACd,YAAI,cAAc,KAAK,IAAI,aAAa;AACxC,YAAU,SAAS,WAAW,GAAG;AAC/B,kBAAQ;AAAA,QACV;AAAA,MACF;AACA,cAAQ,KAAK,IAAI,KAAK,IAAI,KAAK,SAAS,KAAK,IAAIA,IAAG,IAAI,KAAK,WAAW,KAAK,IAAIC,IAAG,IAAI,KAAK,SAAS,KAAK,IAAID,IAAG,IAAI,KAAK;AAAA,IAC7H;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,KAAK,OAAO,UAAU,WAAW;AAC/B,YAAQ,aAAa,QAAQ,aAAa;AAC1C,UAAM,WAAW,KAAK,gBAAgB,KAAK;AAC3C,WAAO,KAAK,UAAU,SAAS,qBAAqB,QAAQ;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,KAAK,OAAO,UAAU,WAAW;AAC/B,YAAQ,aAAa,QAAQ,aAAa;AAC1C,UAAM,WAAW,KAAK,gBAAgB,KAAK;AAC3C,WAAO,KAAK,UAAU,SAAS,qBAAqB,QAAQ;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA,EAIA,uBAAuB,UAAU,OAAO,eAAe,cAAc;AACnE,WAAO,KAAK,UAAU,SAAS,qBAAqB,KAAK,qBAAqB,UAAU,OAAO,eAAe,YAAY,CAAC;AAAA,EAC7H;AAAA;AAAA;AAAA;AAAA,EAIA,qBAAqB,UAAU,OAAO,eAAe,cAAc;AACjE,QAAI,QAAQ,SAAS,IAAI,KAAK;AAC9B,UAAM,cAAc,SAAS,IAAI,cAAc;AAC/C,QAAI,aAAa;AACf,YAAM,SAAS,SAAS;AACxB,cAAQ,QAAQ,eAAe,OAAO,wBAAwB,UAAU,KAAK;AAAA,IAC/E,OAAO;AACL,cAAQ,KAAK,cAAc,QAAQ,KAAK,cAAc;AAAA,IACxD;AACA,WAAO,KAAK,gBAAgB,KAAK;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA,EAIA,uBAAuB,UAAU,OAAO,eAAe,cAAc;AACnE,WAAO,KAAK,UAAU,SAAS,qBAAqB,KAAK,qBAAqB,UAAU,OAAO,eAAe,YAAY,CAAC;AAAA,EAC7H;AAAA;AAAA;AAAA;AAAA,EAIA,qBAAqB,UAAU,OAAO,eAAe,cAAc;AACjE,QAAI,QAAQ,SAAS,IAAI,KAAK;AAC9B,UAAM,cAAc,SAAS,IAAI,cAAc;AAC/C,QAAI,aAAa;AACf,YAAM,SAAS,SAAS;AACxB,cAAQ,QAAQ,eAAe,OAAO,wBAAwB,UAAU,KAAK;AAAA,IAC/E,OAAO;AACL,cAAQ,KAAK,cAAc,QAAQ,KAAK,cAAc;AAAA,IACxD;AACA,WAAO,KAAK,gBAAgB,KAAK;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,eAAe;AACb,WAAO,KAAK,gBAAgB,KAAK,UAAU,CAAC;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY;AACV,UAAMA,OAAM,KAAK,IAAI,KAAK,WAAW,YAAY,SAAS,GAAG,KAAK,WAAW,gBAAgB,SAAS,CAAC;AACvG,UAAMC,OAAM,KAAK,IAAI,KAAK,WAAW,YAAY,QAAQ,GAAG,KAAK,WAAW,gBAAgB,QAAQ,CAAC;AACrG,QAAI,YAAY,KAAK,IAAI,aAAa,CAAC;AACvC,QAAI,YAAYD,MAAK;AACnB,kBAAYA;AAAA,IACd;AACA,QAAI,YAAYC,MAAK;AACnB,kBAAYA;AAAA,IACd;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIA,aAAa,OAAO;AAClB,WAAO;AAAA,EACT;AAAA,EACA,aAAa,MAAM;AAEjB,QAAI,IAAI,SAAS,GAAG;AAClB,cAAQ;AACR,aAAO,KAAK,aAAa,IAAI;AAAA,IAC/B;AACA,WAAO;AAAA,EACT;AAAA,EACA,QAAQD,MAAK;AACX,WAAOA;AAAA,EACT;AAAA,EACA,QAAQC,MAAK;AACX,WAAOA;AAAA,EACT;AAAA,EACA,mBAAmB;AACjB,QAAI,KAAK,IAAI,iBAAiB,GAAG;AAC/B,UAAI,SAAS,KAAK,OAAO,CAAC;AAC1B,UAAI,QAAQ;AACV,YAAI,aAAa,OAAO,WAAW;AACnC,YAAI,OAAO,UAAU,SAAS,GAAG;AAC/B,cAAI,aAAa,GAAG;AAClB;AAAA,UACF;AACA,cAAI,WAAW,OAAO,SAAS;AAC/B,cAAI,WAAW,OAAO,UAAU,QAAQ;AACtC;AAAA,UACF;AACA,cAAI;AACJ,cAAI;AACJ,cAAI,OAAO,IAAI,OAAO,KAAK,MAAM;AAC/B,oBAAQ;AACR,iBAAK;AAAA,UACP,WAAW,OAAO,IAAI,OAAO,KAAK,MAAM;AACtC,oBAAQ;AACR,iBAAK;AAAA,UACP;AACA,cAAI,eAAe,QAAQ;AAC3B,cAAI,OAAO;AACT,qBAAS,IAAI,YAAY,IAAI,UAAU,KAAK;AAC1C,kBAAI,MAAM;AACV,kBAAI,QAAQ;AACZ,cAAO,KAAK,KAAK,QAAQ,CAAAE,YAAU;AACjC,oBAAI,CAACA,QAAO,IAAI,kBAAkB,GAAG;AACnC,sBAAI,WAAWA,QAAO,UAAU,CAAC;AACjC,sBAAI,UAAU;AACZ,wBAAI,QAAQ,SAAS,IAAI,YAAY,IAAIA,QAAO,IAAI,EAAE;AACtD,wBAAI,CAAO,MAAM,KAAK,GAAG;AACvB,6BAAO;AACP,+BAAS,KAAK,IAAI,KAAK;AAAA,oBACzB;AAAA,kBACF;AAAA,gBACF;AAAA,cACF,CAAC;AACD,cAAO,KAAK,KAAK,QAAQ,CAAAA,YAAU;AACjC,oBAAI,CAACA,QAAO,IAAI,kBAAkB,GAAG;AACnC,sBAAI,WAAWA,QAAO,UAAU,CAAC;AACjC,sBAAI,UAAU;AACZ,wBAAI,QAAQ,SAAS,IAAI,YAAY,IAAIA,QAAO,IAAI,EAAE;AACtD,wBAAI,CAAO,MAAM,KAAK,GAAG;AACvB,+BAAS,IAAI,QAAQ,SAAS,KAAK;AACnC,+BAAS,IAAI,QAAQ,OAAO,GAAG;AAC/B,+BAAS,IAAI,QAAQ,gBAAgB,QAAQ,QAAQ,GAAG;AAAA,oBAC1D;AAAA,kBACF;AAAA,gBACF;AAAA,cACF,CAAC;AAAA,YACH;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,sBAAsB;AACpB,UAAMH,OAAM,KAAK,WAAW,UAAU;AACtC,UAAMC,OAAM,KAAK,WAAW,UAAU;AACtC,UAAM,aAAa,KAAK,IAAI,KAAK;AACjC,UAAM,aAAa,KAAK,IAAI,KAAK;AACjC,QAAI,WAAW,KAAK,IAAI,YAAY,CAAC;AACrC,QAAI,WAAW,KAAK,IAAI,YAAY,CAAC;AACrC,QAAI,KAAK,IAAI,aAAa,GAAG;AAC3B,UAAI,KAAK,IAAI,UAAU,KAAK,MAAM;AAChC,mBAAW;AAAA,MACb;AACA,UAAI,KAAK,IAAI,UAAU,KAAK,MAAM;AAChC,mBAAW;AAAA,MACb;AAAA,IACF;AACA,UAAM,YAAY,KAAK,IAAI,UAAU,EAAE,UAAU;AACjD,UAAM,wBAAwB,KAAK,IAAI,uBAAuB;AAC9D,QAAI,eAAe,KAAK,IAAI,cAAc;AAC1C,QAAU,SAASD,IAAG,KAAW,SAASC,IAAG,GAAG;AAC9C,UAAI,eAAeA;AACnB,UAAI,eAAeD;AACnB,MAAO,KAAK,KAAK,QAAQ,YAAU;AACjC,YAAI,CAAC,OAAO,IAAI,cAAc,GAAG;AAC/B,cAAI;AACJ,cAAI;AACJ,gBAAM,iBAAiB,OAAO,WAAW,gBAAgB;AACzD,cAAI,OAAO,IAAI,OAAO,MAAM,MAAM;AAChC,gBAAI,CAAC,gBAAgB;AACnB,kBAAI,OAAO,OAAO,WAAW,MAAM;AACnC,kBAAI,OAAO,OAAO,WAAW,MAAM;AAEnC,kBAAI,OAAO,WAAW,KAAK,KAAK,OAAO,SAAS,KAAK,OAAO,UAAU,QAAQ;AAC5E,uBAAO;AACP,uBAAO;AAAA,cACT;AACA,0BAAY,OAAO,WAAW,iBAAiB,IAAI;AACnD,0BAAY,OAAO,WAAW,iBAAiB,IAAI;AAAA,YACrD;AAAA,UACF,WAAW,OAAO,IAAI,OAAO,MAAM,MAAM;AACvC,gBAAI,CAAC,gBAAgB;AACnB,kBAAI,OAAO,OAAO,WAAW,MAAM;AACnC,kBAAI,OAAO,OAAO,WAAW,MAAM;AAEnC,kBAAI,OAAO,WAAW,KAAK,KAAK,OAAO,SAAS,KAAK,OAAO,UAAU,QAAQ;AAC5E,uBAAO;AACP,uBAAO;AAAA,cACT;AACA,0BAAY,OAAO,WAAW,iBAAiB,IAAI;AACnD,0BAAY,OAAO,WAAW,iBAAiB,IAAI;AAAA,YACrD;AAAA,UACF;AACA,cAAI,CAAC,OAAO,SAAS,KAAK,CAAC,OAAO,UAAU,GAAG;AAC7C,gBAAU,SAAS,SAAS,GAAG;AAC7B,6BAAe,KAAK,IAAI,cAAc,SAAS;AAAA,YACjD;AACA,gBAAU,SAAS,SAAS,GAAG;AAC7B,6BAAe,KAAK,IAAI,cAAc,SAAS;AAAA,YACjD;AAAA,UACF;AAAA,QACF;AAAA,MACF,CAAC;AACD,WAAK,WAAW,KAAK,WAAS;AAC5B,YAAI,MAAM,IAAI,eAAe,GAAG;AAC9B,cAAI,QAAQ,MAAM,IAAI,OAAO;AAC7B,cAAI,SAAS,MAAM;AACjB,2BAAe,KAAK,IAAI,cAAc,KAAK;AAC3C,2BAAe,KAAK,IAAI,cAAc,KAAK;AAAA,UAC7C;AACA,kBAAQ,MAAM,IAAI,UAAU;AAC5B,cAAI,SAAS,MAAM;AACjB,2BAAe,KAAK,IAAI,cAAc,KAAK;AAC3C,2BAAe,KAAK,IAAI,cAAc,KAAK;AAAA,UAC7C;AAAA,QACF;AAAA,MACF,CAAC;AACD,UAAI,eAAe,cAAc;AAC/B,SAAC,cAAc,YAAY,IAAI,CAAC,cAAc,YAAY;AAAA,MAC5D;AACA,UAAU,SAAS,UAAU,GAAG;AAC9B,YAAI,cAAc;AAChB,yBAAe;AAAA,QACjB,OAAO;AACL,yBAAeA;AAAA,QACjB;AAAA,MACF,WAAW,cAAc;AACvB,YAAU,SAAS,KAAK,QAAQ,GAAG;AACjC,yBAAe,KAAK;AAAA,QACtB;AAAA,MACF;AACA,UAAU,SAAS,UAAU,GAAG;AAC9B,YAAI,cAAc;AAChB,yBAAe;AAAA,QACjB,OAAO;AACL,yBAAeC;AAAA,QACjB;AAAA,MACF,WAAW,cAAc;AACvB,YAAU,SAAS,KAAK,QAAQ,GAAG;AACjC,yBAAe,KAAK;AAAA,QACtB;AAAA,MACF;AACA,UAAI,iBAAiB,cAAc;AACjC,YAAI,OAAO;AACX,wBAAgB,KAAK;AACrB,wBAAgB,KAAK;AACrB,YAAI,eAAeD,MAAK;AACtB,cAAI,IAAI,OAAOA;AACf,cAAI,KAAK,GAAG;AACV,gBAAI,KAAK;AAAA,UACX;AACA,yBAAe,OAAO;AACtB,yBAAe,OAAO;AACtB,yBAAe;AAAA,QACjB;AACA,YAAI,cAAc,KAAK,cAAc,cAAc,cAAc,WAAW,YAAY;AACxF,uBAAe,YAAY;AAC3B,uBAAe,YAAY;AAAA,MAC7B;AACA,UAAI,mBAAmB;AACvB,UAAI,mBAAmB;AACvB,UAAI,QAAQ,eAAe;AAC3B,sBAAgB,QAAQ;AACxB,sBAAgB,QAAQ;AACxB,UAAI,aAAa,KAAK,cAAc,cAAc,cAAc,SAAS;AACzE,qBAAe,WAAW;AAC1B,qBAAe,WAAW;AAC1B,qBAAqB,WAAW,cAAcA,MAAKC,IAAG;AACtD,qBAAqB,WAAW,cAAcD,MAAKC,IAAG;AAEtD,mBAAa,KAAK,cAAc,cAAc,cAAc,WAAW,IAAI;AAC3E,UAAI,CAAC,cAAc;AACjB,uBAAe,WAAW;AAC1B,uBAAe,WAAW;AAAA,MAC5B;AACA,YAAM,eAAe,KAAK,IAAI,cAAc;AAC5C,UAAI,cAAc;AAChB,qBAAa,KAAK,UAAU,cAAc,cAAc,WAAW,MAAM,aAAa,WAAW,qBAAqB,aAAa,WAAW,YAAY,CAAC,CAAC,GAAG,aAAa,WAAW,qBAAqB,aAAa,WAAW,YAAY,CAAC,CAAC,GAAG,aAAa,WAAW,sBAAsB,aAAa,WAAW,QAAQ,CAAC,CAAC,CAAC;AACtU,YAAI,WAAW,MAAMD,MAAK;AACxB,qBAAW,MAAMA;AAAA,QACnB;AACA,YAAI,WAAW,MAAMC,MAAK;AACxB,qBAAW,MAAMA;AAAA,QACnB;AACA,uBAAe,WAAW;AAC1B,uBAAe,WAAW;AAAA,MAC5B;AACA,UAAI,cAAc;AAChB,YAAU,SAAS,UAAU,GAAG;AAC9B,yBAAe,KAAK,IAAI,cAAc,UAAU;AAAA,QAClD;AACA,YAAU,SAAS,UAAU,GAAG;AAC9B,yBAAe,KAAK,IAAI,cAAc,UAAU;AAAA,QAClD;AAAA,MACF;AACA,UAAI,uBAAuB;AACzB,uBAAe,oBAAoB,mBAAmB,oBAAoB;AAC1E,uBAAe,oBAAoB,mBAAmB,oBAAoB;AAAA,MAC5E;AACA,UAAI,cAAc;AAChB,YAAU,SAAS,UAAU,GAAG;AAC9B,yBAAe;AAAA,QACjB,OAAO;AACL,yBAAe;AAAA,QACjB;AACA,YAAU,SAAS,UAAU,GAAG;AAC9B,yBAAe;AAAA,QACjB,OAAO;AACL,yBAAe;AAAA,QACjB;AACA,YAAI,eAAe,gBAAgB,MAAY;AAC7C,0BAAgB,KAAK;AACrB,0BAAgB,KAAK;AAAA,QACvB;AACA,YAAIG,SAAQ,eAAe;AAC3B,wBAAgBA,SAAQ;AACxB,wBAAgBA,SAAQ;AAAA,MAC1B;AACA,UAAI,KAAK,IAAI,aAAa,GAAG;AAC3B,YAAI,gBAAgB,GAAG;AACrB,yBAAe,oBAAoB,IAAI,KAAK,IAAI,UAAU,IAAI;AAAA,QAChE;AACA,YAAI,eAAeJ,MAAK;AACtB,yBAAeA;AAAA,QACjB;AACA,YAAI,eAAeC,MAAK;AACtB,yBAAeA;AAAA,QACjB;AAAA,MACF;AACA,UAAI,MAAM,KAAK,IAAI,IAAI,KAAK,KAAK,KAAK,IAAI,KAAK,WAAW,iBAAiB,GAAG,IAAI,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC;AACrG,UAAI,QAAc,MAAM,KAAK,qBAAqB,YAAY,GAAG,GAAG;AACpE,UAAI,MAAY,MAAM,KAAK,qBAAqB,YAAY,GAAG,GAAG;AAClE,WAAK,cAAc,qBAAqB,YAAY;AACpD,WAAK,cAAc,qBAAqB,YAAY;AACpD,WAAK,cAAc,sBAAsB,WAAW,IAAI;AACxD,WAAK,KAAK,OAAO,GAAG;AAAA,IACtB;AAAA,EACF;AAAA,EACA,aAAa;AACX,QAAI,aAAa,KAAK,IAAI,KAAK;AAC/B,QAAI,aAAa,KAAK,IAAI,KAAK;AAC/B,QAAID,OAAM;AACV,QAAIC,OAAM;AACV,QAAI,WAAW,KAAK,IAAI,YAAY,CAAC;AACrC,QAAI,WAAW,KAAK,IAAI,YAAY,CAAC;AACrC,QAAI,KAAK,IAAI,aAAa,GAAG;AAC3B,UAAI,CAAC,KAAK,IAAI,cAAc,GAAG;AAC7B,YAAI,KAAK,IAAI,UAAU,KAAK,MAAM;AAChC,qBAAW;AAAA,QACb;AACA,YAAI,KAAK,IAAI,UAAU,KAAK,MAAM;AAChC,qBAAW;AAAA,QACb;AAAA,MACF;AAAA,IACF;AACA,QAAI,UAAU;AACd,IAAO,KAAK,KAAK,QAAQ,YAAU;AACjC,UAAI,CAAC,OAAO,IAAI,cAAc,GAAG;AAC/B,YAAI;AACJ,YAAI;AACJ,YAAI,OAAO,IAAI,OAAO,MAAM,MAAM;AAChC,sBAAY,OAAO,WAAW,MAAM;AACpC,sBAAY,OAAO,WAAW,MAAM;AAAA,QACtC,WAAW,OAAO,IAAI,OAAO,MAAM,MAAM;AACvC,sBAAY,OAAO,WAAW,MAAM;AACpC,sBAAY,OAAO,WAAW,MAAM;AAAA,QACtC;AACA,YAAU,SAAS,SAAS,KAAW,SAAS,SAAS,GAAG;AAC1D,UAAAD,OAAM,KAAK,IAAIA,MAAK,SAAS;AAC7B,UAAAC,OAAM,KAAK,IAAIA,MAAK,SAAS;AAC7B,cAAI,OAAO,YAAY;AACvB,cAAI,QAAQ,GAAG;AACb,mBAAO,KAAK,IAAI,YAAY,GAAG;AAAA,UACjC;AACA,cAAI,OAAO,SAAS;AAClB,sBAAU;AAAA,UACZ;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AACD,SAAK,WAAW,KAAK,WAAS;AAC5B,UAAI,MAAM,IAAI,eAAe,GAAG;AAC9B,YAAI,QAAQ,MAAM,IAAI,OAAO;AAC7B,YAAI,SAAS,MAAM;AACjB,UAAAD,OAAM,KAAK,IAAIA,MAAK,KAAK;AACzB,UAAAC,OAAM,KAAK,IAAIA,MAAK,KAAK;AAAA,QAC3B;AACA,gBAAQ,MAAM,IAAI,UAAU;AAC5B,YAAI,SAAS,MAAM;AACjB,UAAAD,OAAM,KAAK,IAAIA,MAAK,KAAK;AACzB,UAAAC,OAAM,KAAK,IAAIA,MAAK,KAAK;AAAA,QAC3B;AAAA,MACF;AAAA,IACF,CAAC;AACD,QAAI,KAAK,IAAI,aAAa,GAAG;AAC3B,UAAI,cAAc,KAAK,IAAI,aAAa;AACxC,UAAU,SAAS,WAAW,GAAG;AAC/B,YAAID,QAAO,GAAG;AACZ,UAAAA,OAAM;AAAA,QACR;AAAA,MACF;AACA,UAAIA,QAAO,GAAG;AACZ,YAAI,MAAM,kDAAkD;AAAA,MAC9D;AAAA,IACF;AACA,QAAIA,SAAQ,KAAKC,SAAQ,GAAG;AAC1B,MAAAA,OAAM;AACN,MAAAD,OAAM;AAAA,IACR;AACA,QAAU,SAAS,UAAU,GAAG;AAC9B,MAAAA,OAAM;AAAA,IACR;AACA,QAAU,SAAS,UAAU,GAAG;AAC9B,MAAAC,OAAM;AAAA,IACR;AAEA,QAAID,SAAQ,YAAYC,SAAQ,WAAW;AACzC,WAAK,WAAW,YAAY,MAAS;AACrC,WAAK,WAAW,YAAY,MAAS;AACrC;AAAA,IACF;AACA,QAAID,OAAMC,MAAK;AACb,OAACD,MAAKC,IAAG,IAAI,CAACA,MAAKD,IAAG;AAAA,IACxB;AACA,UAAM,aAAaA;AACnB,UAAM,aAAaC;AAEnB,QAAI,aAAa,KAAK,SAAS,KAAK,OAAOD,IAAG;AAC9C,QAAI,aAAa,KAAK,SAAS,KAAK,OAAOC,IAAG;AAC9C,SAAK,cAAcD;AACnB,QAAU,SAAS,UAAU,GAAG;AAC9B,MAAAA,OAAM;AAAA,IACR;AACA,QAAU,SAAS,UAAU,GAAG;AAC9B,MAAAC,OAAM;AAAA,IACR;AAEA,IAAAD,OAAM,KAAK,QAAQA,IAAG;AACtB,IAAAC,OAAM,KAAK,QAAQA,IAAG;AAEtB,QAAIA,OAAMD,QAAO,IAAI,KAAK,IAAI,IAAI,EAAE,GAAG;AACrC,UAAIC,OAAMD,SAAQ,GAAG;AACnB,aAAK,gBAAgBC,OAAMD,QAAO;AAAA,MACpC,OAAO;AACL,aAAK,UAAUC,IAAG;AAAA,MACpB;AACA,MAAAD,QAAO,KAAK;AACZ,MAAAC,QAAO,KAAK;AAAA,IACd;AAEA,IAAAD,SAAQC,OAAMD,QAAO;AACrB,IAAAC,SAAQA,OAAMD,QAAO;AACrB,QAAI,KAAK,IAAI,aAAa,GAAG;AAE3B,UAAIA,OAAM,KAAK,cAAc,GAAG;AAC9B,QAAAA,OAAM;AAAA,MACR;AAEA,UAAIC,OAAM,KAAK,cAAc,GAAG;AAC9B,QAAAA,OAAM;AAAA,MACR;AAAA,IACF;AACA,SAAK,WAAWD;AAChB,SAAK,WAAWC;AAChB,QAAI,eAAe,KAAK,IAAI,cAAc;AAC1C,QAAI,wBAAwB,KAAK,IAAI,yBAAyB,KAAK;AACnE,QAAI,uBAAuB;AACzB,qBAAe;AAAA,IACjB;AACA,QAAI,SAAS;AACb,QAAU,SAAS,UAAU,GAAG;AAC9B,eAAS;AAAA,IACX;AACA,QAAI,YAAY,KAAK,IAAI,UAAU,EAAE,UAAU;AAC/C,QAAI,aAAa,KAAK,cAAcD,MAAKC,MAAK,WAAW,MAAM;AAC/D,IAAAD,OAAM,WAAW;AACjB,IAAAC,OAAM,WAAW;AAEjB,iBAAa,KAAK,cAAcD,MAAKC,MAAK,WAAW,IAAI;AACzD,IAAAD,OAAM,WAAW;AACjB,IAAAC,OAAM,WAAW;AAEjB,QAAI,cAAc;AAChB,UAAU,SAAS,UAAU,GAAG;AAC9B,QAAAD,OAAM;AAAA,MACR,OAAO;AACL,QAAAA,OAAM,KAAK;AAAA,MACb;AACA,UAAU,SAAS,UAAU,GAAG;AAC9B,QAAAC,OAAM;AAAA,MACR,OAAO;AACL,QAAAA,OAAM,KAAK;AAAA,MACb;AACA,UAAIA,OAAMD,QAAO,MAAY;AAC3B,QAAAA,QAAO,KAAK;AACZ,QAAAC,QAAO,KAAK;AAAA,MACd;AACA,UAAI,QAAQA,OAAMD;AAClB,MAAAA,QAAO,QAAQ;AACf,MAAAC,QAAO,QAAQ;AAAA,IACjB;AACA,iBAAa,KAAK,SAAS,KAAK,OAAOD,IAAG;AAC1C,iBAAa,KAAK,SAAS,KAAK,OAAOC,IAAG;AAC1C,QAAU,SAAS,UAAU,GAAG;AAC9B,MAAAD,OAAM;AAAA,IACR;AACA,QAAU,SAAS,UAAU,GAAG;AAC9B,MAAAC,OAAM;AAAA,IACR;AACA,QAAI,WAAW,UAAU;AACvB,gBAAUA,OAAMD;AAAA,IAClB;AAEA,QAAI,WAAW,KAAK,MAAM,KAAK,IAAI,KAAK,IAAI,KAAK,IAAIC,OAAMD,IAAG,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI;AACnF,IAAAA,OAAY,MAAMA,MAAK,QAAQ;AAC/B,IAAAC,OAAY,MAAMA,MAAK,QAAQ;AAC/B,UAAM,eAAe,KAAK,IAAI,cAAc;AAC5C,QAAI,cAAc;AAChB,mBAAa,KAAK,UAAUD,MAAKC,MAAK,WAAW,MAAM,aAAa,WAAW,YAAY,aAAa,WAAW,OAAO,CAAC,CAAC,GAAG,aAAa,WAAW,YAAY,aAAa,WAAW,OAAO,CAAC,CAAC,GAAG,aAAa,WAAW,QAAQ,CAAC,CAAC;AACzO,MAAAD,OAAM,WAAW;AACjB,MAAAC,OAAM,WAAW;AAAA,IACnB;AACA,SAAK,cAAc,iBAAiB,KAAK,IAAI,GAAG,KAAK,MAAMA,OAAMD,QAAO,UAAU,KAAK,IAAI,iBAAiB,GAAG,CAAC,CAAC,CAAC;AAClH,SAAK,eAAe;AACpB,QAAI,KAAK,IAAI,aAAa,GAAG;AAC3B,WAAK,kBAAkBA;AACvB,MAAAA,OAAM,KAAK;AACX,MAAAC,OAAM,KAAK;AACX,UAAID,QAAO,GAAG;AACZ,QAAAA,OAAM,cAAc,IAAI,KAAK,IAAI,UAAU,IAAI;AAAA,MACjD;AAAA,IACF;AACA,QAAU,SAASA,IAAG,KAAW,SAASC,IAAG,GAAG;AAC9C,UAAI,KAAK,WAAW,UAAU,MAAMD,QAAO,KAAK,WAAW,UAAU,MAAMC,MAAK;AAC9E,aAAK,WAAW,YAAYD,IAAG;AAC/B,aAAK,WAAW,YAAYC,IAAG;AAC/B,aAAK,YAAYD,MAAKC,IAAG;AACzB,cAAM,WAAW,KAAK,IAAI,yBAAyB,CAAC;AACpD,cAAM,SAAS,KAAK,IAAI,qBAAqB;AAC7C,aAAK,eAAe;AAAA,UAClB,KAAK;AAAA,UACL,IAAID;AAAA,UACJ;AAAA,UACA;AAAA,QACF,CAAC;AACD,aAAK,eAAe;AAAA,UAClB,KAAK;AAAA,UACL,IAAIC;AAAA,UACJ;AAAA,UACA;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA,EACA,iBAAiB;AAAA,EAAC;AAAA,EAClB,UAAUA,MAAK;AAEb,QAAI,WAAW,KAAK,IAAI,KAAK,IAAIA,IAAG,CAAC,IAAI,KAAK;AAE9C,QAAI,QAAQ,KAAK,IAAI,IAAI,KAAK,MAAM,QAAQ,CAAC;AAE7C,YAAQ,QAAQ;AAChB,SAAK,eAAe;AAAA,EACtB;AAAA,EACA,YAAY,MAAM,MAAM;AAAA,EAAC;AAAA,EACzB,cAAcD,MAAKC,MAAK,WAAW,YAAY;AAE7C,QAAI,aAAa,GAAG;AAClB,kBAAY;AAAA,IACd;AACA,gBAAY,KAAK,MAAM,SAAS;AAChC,QAAI,aAAaD;AACjB,QAAI,aAAaC;AACjB,QAAI,aAAaA,OAAMD;AAEvB,QAAI,eAAe,GAAG;AACpB,mBAAa,KAAK,IAAIC,IAAG;AAAA,IAC3B;AAEA,QAAI,WAAW,KAAK,IAAI,KAAK,IAAI,UAAU,CAAC,IAAI,KAAK;AAErD,QAAI,QAAQ,KAAK,IAAI,IAAI,KAAK,MAAM,QAAQ,CAAC;AAE7C,YAAQ,QAAQ;AAChB,QAAI,QAAQ;AACZ,QAAI,YAAY;AACd,cAAQ;AAAA,IACV;AAEA,QAAI,YAAY;AACd,MAAAD,OAAM,KAAK,MAAMA,OAAM,KAAK,IAAI;AAEhC,MAAAC,OAAM,KAAK,KAAKA,OAAM,KAAK,IAAI;AAAA,IACjC,OAAO;AACL,MAAAD,OAAM,KAAK,KAAKA,OAAM,KAAK,IAAI,QAAQ;AAEvC,MAAAC,OAAM,KAAK,MAAMA,OAAM,KAAK,IAAI,QAAQ;AAAA,IAC1C;AAEA,QAAID,OAAM,KAAK,cAAc,GAAG;AAC9B,MAAAA,OAAM;AAAA,IACR;AAEA,QAAIC,OAAM,KAAK,cAAc,GAAG;AAC9B,MAAAA,OAAM;AAAA,IACR;AACA,eAAW,KAAK,IAAI,KAAK,IAAI,UAAU,CAAC,IAAI,KAAK;AACjD,YAAQ,KAAK,IAAI,IAAI,KAAK,MAAM,QAAQ,CAAC;AACzC,YAAQ,QAAQ;AAEhB,QAAI,OAAO,KAAK,KAAK,aAAa,YAAY,KAAK,IAAI;AACvD,QAAI,YAAY,KAAK,IAAI,IAAI,KAAK,MAAM,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,IAAI,KAAK,MAAM,CAAC;AAE/E,QAAI,cAAc,KAAK,KAAK,OAAO,SAAS;AAC5C,QAAI,cAAc,GAAG;AACnB,oBAAc;AAAA,IAChB,WAAW,eAAe,KAAK,cAAc,GAAG;AAC9C,oBAAc;AAAA,IAChB;AAEA,WAAO,KAAK,KAAK,QAAQ,YAAY,YAAY,IAAI,YAAY;AACjE,QAAI,eAAe,KAAK,IAAI,cAAc;AAC1C,QAAU,SAAS,YAAY,GAAG;AAChC,UAAI,aAAmB,KAAK,MAAM,YAAY;AAC9C,UAAI,eAAe,OAAO,aAAa,SAAS,YAAY;AAC1D,eAAO;AACP,YAAI,QAAQ,GAAG;AACb,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AACA,QAAI,WAAW;AAEf,QAAI,YAAY,GAAG;AAEjB,iBAAW,KAAK,MAAM,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,SAAS,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI;AAE/E,aAAa,MAAM,MAAM,QAAQ;AAAA,IACnC;AAEA,QAAI,WAAW,KAAK,MAAMD,OAAM,IAAI;AACpC,IAAAA,OAAY,MAAM,OAAO,UAAU,QAAQ;AAC3C,QAAI;AACJ,QAAI,CAAC,YAAY;AACf,iBAAW,KAAK,KAAKC,OAAM,IAAI;AAAA,IACjC,OAAO;AACL,iBAAW,KAAK,MAAMA,OAAM,IAAI;AAAA,IAClC;AACA,QAAI,aAAa,UAAU;AACzB;AAAA,IACF;AACA,IAAAA,OAAY,MAAM,OAAO,UAAU,QAAQ;AAC3C,QAAIA,OAAM,YAAY;AACpB,MAAAA,OAAMA,OAAM;AAAA,IACd;AACA,QAAID,OAAM,YAAY;AACpB,MAAAA,OAAMA,OAAM;AAAA,IACd;AACA,WAAO,KAAK,aAAa,IAAI;AAC7B,WAAO;AAAA,MACL,KAAKA;AAAA,MACL,KAAKC;AAAA,MACL;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,eAAe,UAAU,iBAAiB;AACxC,UAAM,eAAe,KAAK,IAAI,uBAAuB,KAAK,IAAI,cAAc,CAAC;AAC7E,UAAM,YAAY,KAAK,mBAAmB;AAC1C,UAAM,gBAAgB,KAAK,IAAI,yBAAyB,CAAC;AACzD,UAAM,WAAW,KAAK,WAAW,qBAAqB,CAAC,IAAI;AAC3D,UAAM,QAAc,MAAM,KAAK,gBAAgB,QAAQ,GAAG,QAAQ;AAClE,QAAI,cAAc;AAChB,aAAO,UAAU,OAAO,OAAO,YAAY;AAAA,IAC7C,OAAO;AACL,aAAO,UAAU,OAAO,OAAO,QAAW,QAAQ;AAAA,IACpD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,cAAc,QAAQ,UAAU;AAC9B,QAAI,YAAY,KAAK,WAAW,MAAM,IAAI,KAAK,IAAI,UAAU,EAAE,WAAW,QAAQ;AAClF,QAAI,QAAQ,KAAK,gBAAgB,QAAQ;AACzC,QAAI,QAAQ;AACZ,QAAI;AACJ,IAAO,KAAK,OAAO,WAAW,CAAC,UAAU,MAAM;AAC7C,YAAM,OAAO,KAAK,IAAI,SAAS,IAAI,SAAS,IAAI,KAAK;AACrD,UAAI,UAAU,UAAa,OAAO,SAAS;AACzC,gBAAQ;AACR,kBAAU;AAAA,MACZ;AAAA,IACF,CAAC;AACD,QAAI,SAAS,MAAM;AACjB,aAAO,OAAO,UAAU,KAAK;AAAA,IAC/B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,aAAa,OAAO,KAAK,UAAU;AACjC,UAAMD,OAAM,KAAK,WAAW,YAAY,CAAC;AACzC,UAAMC,OAAM,KAAK,WAAW,YAAY,CAAC;AACzC,QAAI,KAAK,WAAW,KAAK,KAAK,QAAQ,KAAK,WAAW,KAAK,KAAK,MAAM;AACpE,WAAK,MAAM,QAAQD,SAAQC,OAAMD,QAAO,MAAMA,SAAQC,OAAMD,OAAM,QAAQ;AAAA,IAC5E;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,UAAUA,MAAKC,MAAK,MAAM,SAAS,SAAS,UAAU;AACpD,QAAI,OAAO,KAAK,IAAI,cAAc;AAClC,QAAI,MAAM;AACR,UAAI,QAAQ,KAAK,MAAM,UAAU,OAAO,IAAI;AAC5C,UAAI,eAAe,KAAK,OAAOA,OAAMD,QAAO,IAAI;AAChD,UAAI,YAAY,KAAK,IAAI,UAAU,EAAE,UAAU;AAC/C,UAAU,SAAS,KAAK,KAAW,SAAS,YAAY,GAAG;AACzD,YAAI,SAAS;AACb,YAAI,IAAI;AACR,YAAI,QAAQC,OAAMD,QAAO;AACzB,YAAI,OAAOA;AACX,YAAI,OAAOC;AACX,YAAI,QAAQ;AACZ,eAAO,UAAU,MAAM;AACrB,mBAAS,KAAK,WAAW,MAAM,MAAM,OAAO,KAAK;AACjD;AACA,cAAI,IAAI,KAAK;AACX,qBAAS;AAAA,UACX;AACA,cAAI,CAAC,QAAQ;AACX,gBAAI,IAAI,KAAK,KAAK,MAAM,IAAI,CAAC,GAAG;AAC9B,qBAAOD,OAAM,OAAO;AACpB,kBAAIA,QAAO,KAAK,OAAO,GAAG;AACxB,uBAAO;AAAA,cACT;AAAA,YACF,OAAO;AACL,qBAAOC,OAAM,OAAO;AACpB,kBAAI,QAAQ,KAAK,OAAO,GAAG;AACzB,uBAAO;AAAA,cACT;AAAA,YACF;AACA,gBAAI,aAAa,KAAK,cAAc,MAAM,MAAM,WAAW,IAAI;AAC/D,mBAAO,WAAW;AAClB,mBAAO,WAAW;AAClB,oBAAQ,WAAW;AAAA,UACrB,OAAO;AACL,YAAAD,OAAM;AACN,YAAAC,OAAM;AACN,mBAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF;AAAA,IACF;AACA,WAAO;AAAA,MACL,KAAKD;AAAA,MACL,KAAKC;AAAA,MACL;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,WAAWD,MAAKC,MAAK,MAAM,OAAO;AAChC,QAAI,gBAAgBA,OAAMD,QAAO;AACjC,aAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC9B,UAAU,MAAM,eAAe,GAAG,CAAC,KAAK,SAAS,eAAe,KAAK,OAAO;AAC1E,eAAO;AAAA,MACT;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,uBAAuB;AACrB,QAAIC,OAAM,KAAK,WAAW,gBAAgB,KAAK,WAAW,KAAK,CAAC;AAChE,QAAID,OAAM,KAAK,WAAW,gBAAgB,KAAK,WAAW,KAAK,CAAC;AAChE,QAAU,SAASC,IAAG,KAAW,SAASD,IAAG,GAAG;AAC9C,aAAO,KAAK,WAAW,QAAQ,CAAC,KAAKC,OAAMD;AAAA,IAC7C;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIA,aAAa,OAAO;AAClB,QAAI,SAAS,MAAM;AACjB,cAAQ;AAAA,IACV;AACA,QAAI,KAAK,IAAI,UAAU,EAAE,WAAW,QAAQ,KAAK,KAAK;AACpD,eAAS;AAAA,IACX;AACA,QAAI,QAAQ,KAAK,gBAAgB,KAAK,WAAW,mBAAmB,CAAC,CAAC;AACtE,aAAS,KAAK,WAAW,QAAQ,CAAC,IAAI;AACtC,YAAc,WAAW,OAAO,KAAK,WAAW,gBAAgB,CAAC,GAAG,KAAK,WAAW,gBAAgB,CAAC,CAAC;AACtG,WAAO,KAAK,iBAAiB,KAAK,gBAAgB,KAAK,CAAC;AAAA,EAC1D;AACF;AACA,OAAO,eAAe,WAAW,aAAa;AAAA,EAC5C,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO;AACT,CAAC;AACD,OAAO,eAAe,WAAW,cAAc;AAAA,EAC7C,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO,KAAK,WAAW,OAAO,CAAC,UAAU,SAAS,CAAC;AACrD,CAAC;;;AChxCM,IAAM,eAAN,MAAM,sBAAqB,KAAK;AAAA,EACrC,cAAc;AACZ,UAAM,GAAG,SAAS;AAClB,WAAO,eAAe,MAAM,cAAc;AAAA,MACxC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,YAAY;AAAA,MACtC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC;AAAA,IACV,CAAC;AAAA,EACH;AAAA,EACA,YAAY;AACV,SAAK,UAAU,YAAmB,UAAU,KAAK,UAAU,WAAW,CAAC,MAAM,CAAC;AAC9E,SAAK,OAAO,KAAK,UAAU;AAC3B,SAAK,cAAc,QAAQ,UAAU;AACrC,SAAK,OAAO,UAAU;AACtB,UAAM,UAAU;AAAA,EAClB;AAAA,EACA,mBAAmB;AACjB,UAAM,iBAAiB;AACvB,UAAM,MAAM,KAAK,UAAU;AAC3B,QAAI,IAAI;AACR,QAAI,KAAK,cAAc;AACrB,WAAK,WAAW,CAAC;AACjB,MAAO,KAAK,KAAK,WAAW,cAAY;AACtC,iBAAS,OAAO,SAAS,CAAC;AAC1B,aAAK,SAAS,SAAS,IAAI,UAAU,CAAC,IAAI;AAC1C;AAAA,MACF,CAAC;AACD,WAAK,cAAc,iBAAiB,GAAG;AAAA,IACzC;AACA,SAAK,cAAc,cAAc,KAAK,IAAI,KAAK,MAAM,KAAK,IAAI,SAAS,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC;AACpF,SAAK,cAAc,YAAY,KAAK,IAAI,KAAK,MAAM,KAAK,IAAI,OAAO,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC;AAClF,QAAI,KAAK,cAAc,KAAK,gBAAgB,KAAK,QAAQ,OAAO,KAAK,KAAK,QAAQ,KAAK,KAAK,KAAK,eAAe,UAAU,KAAK,KAAK,eAAe,YAAY,KAAK,KAAK,eAAe,OAAO,KAAK,KAAK,eAAe,QAAQ,GAAG;AACjO,UAAI,KAAK,UAAU,SAAS,GAAG;AAC7B,aAAK,mBAAmB;AACxB,aAAK,kBAAkB;AACvB,aAAK,kBAAkB;AAAA,MACzB;AAAA,IACF;AAAA,EACF;AAAA,EACA,qBAAqB;AACnB,IAAO,KAAK,KAAK,QAAQ,YAAU;AACjC,UAAI,gBAAgB,KAAK,UAAU,KAAK,WAAW,CAAC,EAAE,IAAI,UAAU;AACpE,UAAI,cAAc,KAAK,UAAU,KAAK,SAAS,IAAI,CAAC,EAAE,IAAI,UAAU;AACpE,UAAI,WAAW,OAAO,IAAI,UAAU;AACpC,UAAI,QAAQ,OAAO,IAAI,OAAO;AAC9B,UAAI,QAAQ,OAAO,IAAI,OAAO;AAC9B,UAAI,iBAAiB,iBAAgB,iBAAiB,eAAc;AAClE,eAAO,eAAe;AAAA,MACxB,WAAW,aAAa,MAAM;AAC5B,YAAI;AACJ,YAAI;AACJ,YAAI,YAAY;AAChB,YAAI,UAAU,UAAU;AACtB,cAAI,OAAO,IAAI,gBAAgB,GAAG;AAChC,kBAAM;AAAA,UACR;AACA,cAAI,OAAO,IAAI,oBAAoB,GAAG;AACpC,sBAAU;AAAA,UACZ;AAAA,QACF,WAAW,UAAU,UAAU;AAC7B,cAAI,OAAO,IAAI,gBAAgB,GAAG;AAChC,kBAAM;AAAA,UACR;AACA,cAAI,OAAO,IAAI,oBAAoB,GAAG;AACpC,sBAAU;AAAA,UACZ;AACA,sBAAY;AAAA,QACd;AACA,YAAI,qBAAqB,WAAW;AAClC,cAAI,OAAO,SAAS;AAClB,gBAAI;AACJ,gBAAI;AACJ,qBAAS,IAAI,GAAG,MAAM,OAAO,UAAU,QAAQ,IAAI,KAAK,KAAK;AAC3D,kBAAI,WAAW,OAAO,UAAU,CAAC;AACjC,kBAAI,KAAK;AACP,oBAAI,SAAS,IAAI,GAAG,MAAM,eAAe;AACvC,kCAAgB;AAChB;AAAA,gBACF;AAAA,cACF;AACA,kBAAI,SAAS;AACX,oBAAI,SAAS,IAAI,OAAO,MAAM,eAAe;AAC3C,kCAAgB;AAChB;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AACA,qBAAS,IAAI,OAAO,UAAU,SAAS,GAAG,KAAK,GAAG,KAAK;AACrD,kBAAI,WAAW,OAAO,UAAU,CAAC;AACjC,kBAAI,KAAK;AACP,oBAAI,SAAS,IAAI,GAAG,MAAM,aAAa;AACrC,gCAAc;AACd;AAAA,gBACF;AAAA,cACF;AACA,kBAAI,SAAS;AACX,oBAAI,SAAS,IAAI,OAAO,MAAM,aAAa;AACzC,gCAAc;AACd;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AACA,gBAAI,aAAa;AACjB,gBAAI,WAAW,OAAO,UAAU;AAChC,gBAAI,eAAe;AACjB,2BAAa,OAAO,UAAU,QAAQ,aAAa;AAAA,YACrD;AACA,gBAAI,aAAa;AACf,yBAAW,OAAO,UAAU,QAAQ,WAAW,IAAI;AAAA,YACrD;AACA,mBAAO,WAAW,cAAc,UAAU;AAC1C,mBAAO,WAAW,YAAY,QAAQ;AACtC,gBAAI,WAAW;AACf,qBAAS,IAAI,YAAY,IAAI,UAAU,KAAK;AAC1C,oBAAM,WAAW,OAAO,UAAU,CAAC;AACnC,cAAO,KAAK,OAAO,oBAAoB,CAAAK,SAAO;AAC5C,oBAAI,QAAQ,SAAS,IAAIA,IAAG;AAC5B,oBAAI,SAAS,MAAM;AACjB,6BAAW;AAAA,gBACb;AAAA,cACF,CAAC;AACD,cAAO,KAAK,OAAO,oBAAoB,CAAAA,SAAO;AAC5C,oBAAI,QAAQ,SAAS,IAAIA,IAAG;AAC5B,oBAAI,SAAS,MAAM;AACjB,6BAAW;AAAA,gBACb;AAAA,cACF,CAAC;AACD,kBAAI,UAAU;AACZ;AAAA,cACF;AAAA,YACF;AACA,mBAAO,WAAW,kBAAkB,CAAC,QAAQ;AAAA,UAC/C;AAAA,QACF;AACA,eAAO,eAAe;AAAA,MACxB;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,oBAAoB;AAClB,QAAI;AACJ,UAAM,WAAW,KAAK,IAAI,UAAU;AACpC,UAAM,MAAM,KAAK,UAAU;AAC3B,QAAI,aAAa,KAAK,WAAW;AACjC,QAAI,aAAa,GAAG;AAClB;AAAA,IACF;AACA,QAAI,WAAW,KAAK,SAAS;AAC7B,QAAI,WAAW,KAAK;AAClB;AAAA,IACF;AACA,UAAM,qBAAqB,SAAS,IAAI,oBAAoB;AAC5D,UAAM,mBAAmB,SAAS,IAAI,oBAAoB,kBAAkB;AAC5E,QAAI,WAAW,SAAS,WAAW,IAAI,KAAK,IAAI,SAAS,IAAI,iBAAiB,GAAG,CAAC;AAClF,QAAI,YAAY,KAAK,IAAI,GAAG,KAAK,IAAI,KAAK,KAAK,MAAM,WAAW,cAAc,QAAQ,CAAC,CAAC;AACxF,iBAAa,KAAK,MAAM,aAAa,SAAS,IAAI;AAClD,SAAK,aAAa;AAClB,aAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,WAAK,gBAAgB,KAAK,UAAU,CAAC,GAAG,KAAK;AAAA,IAC/C;AACA,QAAI,IAAI,KAAK,UAAU,UAAU,EAAE,IAAI,SAAS,CAAC;AACjD,aAAS,IAAI,YAAY,IAAI,UAAU,IAAI,IAAI,WAAW;AACxD,UAAI,WAAW,KAAK,UAAU,CAAC;AAC/B,WAAK,cAAc,UAAU,CAAC,CAAC;AAC/B,WAAK,gBAAgB,UAAU,IAAI;AACnC,UAAI,QAAQ;AACZ,UAAI,kBAAkB;AACpB,gBAAQ;AAAA,MACV;AACA,WAAK,iBAAiB,UAAU,GAAG,KAAK;AACxC;AAAA,IACF;AACA,QAAI,SAAS,IAAI,kBAAkB,GAAG;AACpC,eAAS,IAAI,YAAY,IAAI,UAAU,KAAK;AAC1C,YAAI,WAAW,KAAK,UAAU,CAAC;AAC/B,YAAI,IAAI,aAAa,GAAG;AACtB,eAAK,cAAc,UAAU,CAAC,OAAO,GAAG,IAAI;AAC5C,eAAK,gBAAgB,UAAU,IAAI;AACnC,eAAK,iBAAiB,UAAU,GAAG,CAAC;AACpC,cAAI,CAAC,oBAAoB;AACvB,aAAC,KAAK,SAAS,IAAI,OAAO,OAAO,QAAQ,OAAO,SAAS,SAAS,GAAG,WAAW,WAAW,KAAK;AAAA,UAClG;AAAA,QACF;AAAA,MACF;AAAA,IACF;AACA,SAAK,aAAa;AAAA,EACpB;AAAA,EACA,iBAAiB,UAAU,WAAW,OAAO;AAC3C,QAAI,WAAW,KAAK,IAAI,UAAU;AAClC,QAAI,mBAAmB,SAAS,IAAI,oBAAoB,CAAC;AACzD,QAAI,sBAAsB,SAAS,IAAI,uBAAuB,CAAC;AAC/D,QAAI,QAAQ,SAAS,IAAI,OAAO;AAChC,QAAI,CAAO,SAAS,KAAK,GAAG;AAC1B,cAAQ,KAAK,gBAAgB,SAAS,IAAI,UAAU,CAAC;AAAA,IACvD;AACA,QAAI,WAAW,KAAK,gBAAgB,OAAO,gBAAgB;AAC3D,QAAI,cAAc,SAAS,IAAI,aAAa;AAC5C,QAAI;AACJ,QAAI,aAAa;AACf,iBAAW,KAAK,gBAAgB,WAAW;AAC3C,UAAI,CAAO,SAAS,QAAQ,GAAG;AAC7B,mBAAW;AAAA,MACb;AAAA,IACF,OAAO;AACL,iBAAW;AAAA,IACb;AACA,QAAI,cAAc,KAAK,gBAAgB,UAAU,mBAAmB;AACpE,QAAI;AACJ,QAAI;AACJ,QAAI,SAAS,IAAI,SAAS,GAAG;AAC3B,qBAAe;AAAA,IACjB,OAAO;AACL,qBAAe,QAAQ,KAAK,aAAa;AAAA,IAC3C;AACA,sBAAkB,KAAK,gBAAgB,cAAc,mBAAmB;AACxE,aAAS,YAAY,SAAS,IAAI,OAAO,GAAG,UAAU,aAAa,KAAK;AACxE,aAAS,WAAW,SAAS,IAAI,MAAM,GAAG,UAAU,WAAW;AAC/D,aAAS,WAAW,SAAS,IAAI,MAAM,GAAG,UAAU,aAAa,KAAK;AACtE,aAAS,WAAW,SAAS,IAAI,UAAU,GAAG,UAAU,eAAe;AACvE,SAAK,eAAe,QAAQ;AAC5B,aAAS,aAAa,SAAS,IAAI,QAAQ,GAAG,UAAU,WAAW;AACnE,UAAM,WAAW,KAAK,IAAI,UAAU;AACpC,QAAI,UAAU;AACZ,eAAS,UAAU,SAAS;AAAA,IAC9B;AAAA,EACF;AAAA,EACA,aAAa;AACX,QAAI,MAAM,KAAK,UAAU;AACzB,WAAO,KAAK,IAAI,KAAK,IAAI,KAAK,WAAW,cAAc,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;AAAA,EACxE;AAAA,EACA,WAAW;AACT,QAAI,MAAM,KAAK,UAAU;AACzB,WAAO,KAAK,IAAI,GAAG,KAAK,IAAI,KAAK,WAAW,YAAY,GAAG,GAAG,GAAG,CAAC;AAAA,EACpE;AAAA;AAAA;AAAA;AAAA,EAIA,YAAY;AAAA,EAAC;AAAA;AAAA;AAAA;AAAA,EAIb,eAAe;AACb,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,KAAK,OAAO;AACV,QAAI,eAAe,KAAK,SAAS,KAAK;AACtC,QAAI,cAAc;AAChB,aAAO,KAAK,UAAU,SAAS,qBAAqB,KAAK,gBAAgB,aAAa,IAAI,SAAS,CAAC,CAAC,CAAC;AAAA,IACxG;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,KAAK,OAAO;AACV,QAAI,eAAe,KAAK,SAAS,KAAK;AACtC,QAAI,cAAc;AAChB,aAAO,KAAK,UAAU,SAAS,qBAAqB,KAAK,gBAAgB,aAAa,IAAI,SAAS,CAAC,CAAC,CAAC;AAAA,IACxG;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIA,qBAAqB,UAAU,OAAO,cAAc,eAAe;AACjE,UAAM,WAAW,SAAS,IAAI,KAAK;AACnC,UAAM,eAAe,KAAK,SAAS,QAAQ;AAC3C,QAAI,cAAc;AAChB,aAAO,KAAK,gBAAgB,aAAa,IAAI,SAAS,CAAC,GAAG,YAAY;AAAA,IACxE;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIA,uBAAuB,UAAU,OAAO,cAAc,eAAe;AACnE,WAAO,KAAK,UAAU,SAAS,qBAAqB,KAAK,qBAAqB,UAAU,OAAO,cAAc,aAAa,CAAC;AAAA,EAC7H;AAAA;AAAA;AAAA;AAAA,EAIA,qBAAqB,UAAU,OAAO,cAAc,eAAe;AACjE,UAAM,WAAW,SAAS,IAAI,KAAK;AACnC,UAAM,eAAe,KAAK,SAAS,QAAQ;AAC3C,QAAI,cAAc;AAChB,aAAO,KAAK,gBAAgB,aAAa,IAAI,SAAS,CAAC,GAAG,YAAY;AAAA,IACxE;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIA,uBAAuB,UAAU,OAAO,cAAc,eAAe;AACnE,WAAO,KAAK,UAAU,SAAS,qBAAqB,KAAK,qBAAqB,UAAU,OAAO,cAAc,aAAa,CAAC;AAAA,EAC7H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,gBAAgB,OAAO,UAAU;AAC/B,QAAI,CAAO,SAAS,QAAQ,GAAG;AAC7B,iBAAW;AAAA,IACb;AACA,QAAI,MAAM,KAAK,UAAU;AACzB,QAAI,gBAAgB,KAAK,IAAI,iBAAiB,CAAC;AAC/C,QAAI,cAAc,KAAK,IAAI,eAAe,CAAC;AAC3C,WAAO;AACP,WAAO,IAAI;AACX,QAAI,YAAY,QAAQ,WAAW,iBAAiB;AACpD,QAAI,WAAW,KAAK,UAAU,KAAK;AACnC,QAAI,UAAU;AACZ,kBAAY,SAAS,IAAI,iBAAiB,CAAC;AAAA,IAC7C;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,mBAAmB,UAAU;AAC3B,QAAI,WAAW,KAAK,SAAS,QAAQ;AACrC,QAAI,UAAU;AACZ,aAAO,KAAK,gBAAgB,SAAS,IAAI,OAAO,CAAC;AAAA,IACnD;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gBAAgB,UAAU;AACxB,QAAI,WAAW,KAAK,SAAS,QAAQ;AACrC,QAAI,UAAU;AACZ,aAAO,SAAS,IAAI,OAAO;AAAA,IAC7B;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIA,mBAAmB,UAAU;AAC3B,WAAO,KAAK,gBAAgB,SAAS,IAAI,OAAO,CAAC;AAAA,EACnD;AAAA;AAAA;AAAA;AAAA,EAIA,kBAAkB,UAAU,UAAU;AACpC,iBAAa,MAAM,YAAY,KAAK,UAAU;AAC9C,WAAO,KAAK,gBAAgB,KAAK,oBAAoB,QAAQ,GAAG,QAAQ;AAAA,EAC1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,oBAAoB,UAAU;AAC5B,QAAI,MAAM,KAAK,UAAU;AACzB,WAAa,WAAW,KAAK,MAAM,WAAW,GAAG,GAAG,GAAG,MAAM,CAAC;AAAA,EAChE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,eAAe,UAAU,iBAAiB;AAExC,UAAM,WAAW,KAAK,UAAU,KAAK,oBAAoB,QAAQ,CAAC;AAClE,QAAI,UAAU;AACZ,YAAM,QAAQ,SAAS,IAAI,OAAO;AAClC,UAAI,OAAO;AACT,eAAO,eAAe,OAAO,KAAK,IAAI,eAAe,EAAE,CAAC;AAAA,MAC1D;AAAA,IACF;AAAA,EACF;AAAA,EACA,mBAAmB,SAAS,UAAU;AACpC,YAAQ,aAAa,KAAK,UAAU,KAAK,oBAAoB,QAAQ,CAAC,CAAC;AACvE,YAAQ,MAAM,KAAK,cAAc;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,cAAc,QAAQ,UAAU;AAC9B,QAAI,KAAK,UAAU,SAAS,GAAG;AAC7B,UAAI,YAAY,KAAK,WAAW,MAAM,IAAI,KAAK,IAAI,UAAU,EAAE,WAAW,QAAQ;AAClF,UAAI,QAAQ,KAAK,oBAAoB,QAAQ;AAE7C,UAAI,iBAAiB,OAAO,UAAU,KAAK;AAC3C,UAAI,eAAe,KAAK,UAAU,KAAK;AACvC,UAAI,WAAW,aAAa,IAAI,UAAU;AAC1C,UAAI,kBAAkB,cAAc;AAClC,YAAI,eAAe,IAAI,SAAS,MAAM,UAAU;AAC9C,iBAAO;AAAA,QACT;AAAA,MACF;AAEA,eAAS,IAAI,GAAG,MAAM,OAAO,UAAU,QAAQ,IAAI,KAAK,KAAK;AAC3D,YAAI,WAAW,OAAO,UAAU,CAAC;AACjC,YAAI,SAAS,IAAI,SAAS,MAAM,UAAU;AACxC,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,cAAc,OAAO,KAAK,UAAU;AAClC,QAAI,MAAM,KAAK,UAAU;AACzB,SAAK,KAAK,QAAQ,KAAK,MAAM,KAAK,QAAQ;AAAA,EAC5C;AAAA,EACA,iBAAiB,eAAe,aAAa,UAAU;AACrD,SAAK,cAAc,KAAK,gBAAgB,aAAa,GAAG,KAAK,gBAAgB,WAAW,IAAI,GAAG,QAAQ;AAAA,EACzG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,uBAAuB;AACrB,WAAO,KAAK,aAAa,KAAK,UAAU,UAAU,KAAK,IAAI,OAAO,CAAC,IAAI,KAAK,IAAI,SAAS,CAAC;AAAA,EAC5F;AAAA;AAAA;AAAA;AAAA,EAIA,aAAa,OAAO;AAClB,QAAI,SAAS,MAAM;AACjB,cAAQ;AAAA,IACV;AACA,QAAI,KAAK,IAAI,UAAU,EAAE,WAAW,QAAQ,KAAK,KAAK;AACpD,eAAS;AAAA,IACX;AACA,UAAM,WAAW,KAAK,WAAW,mBAAmB,CAAC;AACrD,UAAM,QAAc,WAAW,KAAK,oBAAoB,QAAQ,IAAI,OAAO,GAAG,KAAK,UAAU,SAAS,CAAC;AACvG,WAAO,KAAK,iBAAiB,KAAK,gBAAgB,KAAK,CAAC;AAAA,EAC1D;AACF;AACA,OAAO,eAAe,cAAc,aAAa;AAAA,EAC/C,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO;AACT,CAAC;AACD,OAAO,eAAe,cAAc,cAAc;AAAA,EAChD,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO,KAAK,WAAW,OAAO,CAAC,aAAa,SAAS,CAAC;AACxD,CAAC;;;ACzeM,IAAM,mBAAN,cAA+B,aAAa;AAAA,EACjD,cAAc;AACZ,UAAM,GAAG,SAAS;AAClB,WAAO,eAAe,MAAM,cAAc;AAAA,MACxC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,YAAY;AAAA,MACtC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC;AAAA,IACV,CAAC;AAAA,EACH;AAAA,EACA,YAAY;AACV,SAAK,UAAU,YAAmB,UAAU,KAAK,UAAU,WAAW,CAAC,MAAM,CAAC;AAC9E,SAAK,OAAO,KAAK,UAAU;AAC3B,UAAM,UAAU;AAAA,EAClB;AAAA,EACA,oBAAoB;AAElB,SAAK,cAAc,gBAAgB,KAAK,IAAI,cAAc,CAAC;AAC3D,UAAM,WAAW,KAAK,IAAI,UAAU;AACpC,UAAM,MAAM,KAAK,UAAU;AAC3B,QAAI,aAAa,KAAK,WAAW;AACjC,QAAI,aAAa,GAAG;AAClB;AAAA,IACF;AACA,QAAI,WAAW,KAAK,SAAS;AAC7B,QAAI,WAAW,KAAK;AAClB;AAAA,IACF;AACA,QAAI,WAAW,SAAS,WAAW,IAAI,KAAK,IAAI,SAAS,IAAI,iBAAiB,GAAG,IAAI,OAAO,gBAAgB;AAC5G,QAAI,YAAY,KAAK,IAAI,KAAK,KAAK,MAAM,WAAW,cAAc,QAAQ,CAAC;AAC3E,iBAAa,KAAK,MAAM,aAAa,SAAS,IAAI;AAClD,SAAK,aAAa;AAClB,aAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,WAAK,gBAAgB,KAAK,UAAU,CAAC,GAAG,KAAK;AAAA,IAC/C;AACA,QAAI,YAAY,OAAO,KAAK,UAAU,UAAU,EAAE,IAAI,UAAU,CAAC;AACjE,QAAI,UAAU,OAAO,KAAK,UAAU,WAAW,CAAC,EAAE,IAAI,UAAU,CAAC;AACjE,QAAI,eAAe,UAAU;AAC7B,QAAI,WAAW,aAAa,UAAU;AACpC,qBAAe,UAAU,cAAc,UAAU,aAAa,KAAK,aAAa,KAAK,WAAW,eAAe,KAAK,aAAa;AAAA,IACnI;AAEA,QAAI,eAAqB,eAAe,GAAG,cAAc,UAAU,KAAK,IAAI,eAAe,CAAC;AAC5F,UAAM,eAAqB,YAAY,aAAa,QAAQ;AAC5D,UAAM,eAAe,KAAK,WAAW,cAAc;AACnD,QAAU,oBAAoB,YAAY,IAAI,KAAK,aAAa,GAAG;AACjE,qBAAe,OAAO,OAAO,CAAC,GAAG,YAAY;AAAA,IAC/C;AACA,UAAM,UAAU,KAAK,IAAI,aAAa;AACtC,QAAI,gBAAgB;AACpB,QAAI,gBAAgB;AACpB,QAAI,oBAAoB;AACxB,QAAI;AACJ,QAAI,gBAAgB,CAAC;AACrB,QAAI,UAAU;AACd,aAAS,IAAI,YAAY,IAAI,UAAU,KAAK;AAC1C,UAAI,WAAW,KAAK,UAAU,CAAC;AAC/B,UAAI,QAAQ,SAAS,IAAI,OAAO;AAChC,UAAI,OAAO;AACX,UAAI,QAAQ,OAAO,SAAS,IAAI,UAAU,CAAC;AAC3C,UAAI,OAAO,IAAI,KAAK,KAAK;AACzB,UAAI,YAAkB,aAAa,MAAM,aAAa,QAAQ;AAC9D,eAAS,QAAQ,aAAa,QAAQ;AACtC,UAAI,QAAQ;AACZ,UAAI,aAAa,YAAY,UAAU,aAAa,YAAY,QAAQ;AACtE,YAAI,gBAAgB,KAAK,IAAI,gBAAgB,KAAW,SAAS,aAAa,GAAG;AAC/E,cAAU,YAAY,OAAO,eAAe,cAAc,KAAK,MAAM,GAAG,GAAG;AACzE,qBAAS,KAAK,IAAI,yBAAyB,EAAE,aAAa,QAAQ;AAClE,gBAAI,QAAQ,YAAY,MAAM,eAAe;AAC3C,4BAAc,IAAI;AAAA,YACpB;AACA,0BAAc,KAAK;AAAA,cACjB;AAAA,cACA;AAAA,YACF,CAAC;AACD,sBAAU;AACV,oBAAQ;AACR,4BAAgB;AAChB,gCAAoB;AAAA,UACtB;AAAA,QACF;AAAA,MACF;AACA,UAAI,YAAY;AAChB,UAAI,aAAa,aAAa,SAAS,aAAa,aAAa,QAAQ;AACvE,YAAI,QAAQ,iBAAiB,WAAW;AACtC,sBAAY;AAAA,QACd;AAAA,MACF,OAAO;AACL,YAAI,YAAY,aAAa,UAAU,GAAG;AACxC,cAAI,aAAa,mBAAmB;AAClC,wBAAY;AAAA,UACd;AAAA,QACF;AAAA,MACF;AACA,UAAI,CAAC,SAAS,WAAW;AACvB,YAAI,QAAQ,YAAY,MAAM,eAAe;AAC3C,cAAI,SAAS;AACX,mBAAO;AAAA,UACT;AAAA,QACF;AACA,YAAI,CAAC,MAAM;AACT,wBAAc,KAAK;AAAA,YACjB;AAAA,YACA;AAAA,UACF,CAAC;AACD,0BAAgB;AAChB,8BAAoB;AAAA,QACtB;AACA,kBAAU;AAAA,MACZ;AACA,sBAAgB;AAAA,IAClB;AACA,QAAI,cAAc,SAAS,GAAG;AAC5B,UAAI,IAAI,cAAc,CAAC,EAAE,SAAS,IAAI,SAAS,CAAC;AAChD,MAAO,KAAK,eAAe,UAAQ;AACjC,cAAM,WAAW,KAAK;AACtB,cAAMC,UAAS,KAAK;AACpB,aAAK,cAAc,UAAU,CAAC,CAAC;AAC/B,aAAK,gBAAgB,UAAU,IAAI;AACnC,YAAI,QAAQ,OAAO,SAAS,IAAI,UAAU,CAAC;AAC3C,YAAI,OAAO,IAAI,KAAK,KAAK;AACzB,cAAM,QAAQ,SAAS,IAAI,OAAO;AAClC,YAAI,OAAO;AACT,gBAAM,IAAI,QAAQ,KAAK,MAAM,cAAc,OAAO,MAAMA,OAAM,CAAC;AAAA,QACjE;AACA;AACA,aAAK,iBAAiB,UAAU,GAAG,SAAS;AAAA,MAC9C,CAAC;AAAA,IACH;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,eAAe;AACb,WAAa,oBAAoB,KAAK,WAAW,cAAc,CAAC;AAAA,EAClE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,eAAe,UAAU,iBAAiB;AAExC,QAAI,WAAW,KAAK,UAAU,KAAK,oBAAoB,QAAQ,CAAC;AAChE,QAAI,UAAU;AACZ,UAAI,SAAS,KAAK,IAAI,aAAa,EAAE,KAAK,WAAW,cAAc,EAAE,QAAQ;AAC7E,aAAO,KAAK,MAAM,cAAc,OAAO,IAAI,KAAK,SAAS,IAAI,YAAY,CAAC,CAAC,GAAG,KAAK,IAAI,qBAAqB,MAAM,CAAC;AAAA,IACrH;AAAA,EACF;AAAA,EACA,mBAAmB,SAAS,UAAU;AACpC,YAAQ,MAAM,IAAI,QAAQ,KAAK,eAAe,QAAQ,CAAC;AAAA,EACzD;AACF;AACA,OAAO,eAAe,kBAAkB,aAAa;AAAA,EACnD,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO;AACT,CAAC;AACD,OAAO,eAAe,kBAAkB,cAAc;AAAA,EACpD,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO,aAAa,WAAW,OAAO,CAAC,iBAAiB,SAAS,CAAC;AACpE,CAAC;;;ACzKM,IAAM,WAAN,cAAuB,UAAU;AAAA,EACtC,cAAc;AACZ,UAAM,GAAG,SAAS;AAClB,WAAO,eAAe,MAAM,gBAAgB;AAAA,MAC1C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,sBAAsB;AAAA,MAChD,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,uBAAuB;AAAA,MACjD,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,qBAAqB;AAAA,MAC/C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,iBAAiB;AAAA,MAC3C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,gBAAgB;AAAA,MAC1C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC;AAAA,IACV,CAAC;AACD,WAAO,eAAe,MAAM,gBAAgB;AAAA,MAC1C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC;AAAA,IACV,CAAC;AAAA,EACH;AAAA,EACA,YAAY;AACV,SAAK,UAAU,YAAmB,UAAU,KAAK,UAAU,WAAW,CAAC,MAAM,CAAC;AAC9E,UAAM,UAAU;AAChB,SAAK,iBAAiB,KAAK,IAAI,cAAc,CAAC;AAC9C,SAAK,GAAG,gBAAgB,MAAM;AAC5B,WAAK,iBAAiB,KAAK,IAAI,cAAc,CAAC;AAAA,IAChD,CAAC;AAAA,EACH;AAAA,EACA,iBAAiB,UAAU;AACzB,SAAK,cAAc,gBAAgB,QAAQ;AAC3C,SAAK,gBAAsB,oBAAoB,QAAQ;AAAA,EACzD;AAAA,EACA,iBAAiB;AACf,UAAM,gBAAgB,KAAK,IAAI,eAAe;AAC9C,QAAI,iBAAiB,QAAQ,iBAAiB,UAAU;AACtD,WAAK,cAAc,iBAAiB,aAAa;AAAA,IACnD,OAAO;AACL,WAAK,cAAc,iBAAiB,KAAK,OAAO,KAAK,WAAW,OAAO,CAAC,IAAI,KAAK,WAAW,OAAO,CAAC,KAAK,KAAK,iBAAiB,CAAC,CAAC;AAAA,IACnI;AAAA,EACF;AAAA,EACA,aAAa;AACX,UAAMC,OAAM,KAAK,WAAW,KAAK;AACjC,UAAMC,OAAM,KAAK,WAAW,KAAK;AACjC,QAAU,SAASD,IAAG,KAAW,SAASC,IAAG,GAAG;AAC9C,WAAK,eAAe;AACpB,YAAM,gBAAgB,KAAK,WAAW,eAAe;AACrD,UAAI,eAAe;AACjB,aAAK,iBAAiB,aAAa;AAAA,MACrC,OAAO;AACL,aAAK,iBAAiB,KAAK,IAAI,cAAc,CAAC;AAAA,MAChD;AACA,UAAI,KAAK,QAAQ,eAAe,GAAG;AACjC,YAAIC,iBAAgB,KAAK,IAAI,eAAe;AAC5C,YAAIA,gBAAe;AACjB,eAAK,OAAO,kBAAkB,CAACA,cAAa,CAAC;AAC7C,eAAK,mBAAmB;AAAA,QAC1B;AAAA,MACF;AACA,UAAI,KAAK,QAAQ,WAAW,GAAG;AAC7B,YAAI,CAAC,KAAK,cAAc;AACtB,cAAI,KAAK,IAAI,WAAW,GAAG;AACzB,YAAO,KAAK,KAAK,QAAQ,YAAU;AACjC,mBAAK,iBAAiB,MAAM;AAAA,YAC9B,CAAC;AACD,iBAAK,mBAAmB;AAAA,UAC1B,OAAO;AACL,gBAAI,eAAe,KAAK,IAAI,cAAc;AAC1C,gBAAI,gBAAgB,aAAa,WAAW,aAAa;AACzD,YAAO,KAAK,KAAK,QAAQ,YAAU;AACjC,qBAAO,WAAW,aAAa;AAC/B,qBAAO,cAAc;AAAA,YACvB,CAAC;AACD,iBAAK,iBAAiB,YAAY;AAClC,iBAAK,cAAc,iBAAiB,MAAS;AAC7C,iBAAK,kBAAkB;AAAA,UACzB;AACA,eAAK,eAAe;AAAA,QACtB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,iBAAiB,QAAQ;AACvB,QAAI,KAAK,IAAI,WAAW,KAAK,CAAC,OAAO,IAAI,mBAAmB,GAAG;AAC7D,WAAK,eAAe;AACpB,WAAK,qBAAqB;AAE1B,UAAI,YAAY,CAAC;AACjB,UAAI,eAAe,KAAK,iBAAiB;AACzC,UAAI,iBAAiB,KAAK,IAAI,gBAAgB;AAC9C,UAAI,gBAAgB;AAAA,MAAC;AACrB,MAAO,KAAK,gBAAgB,cAAY;AACtC,YAAI,mBAAyB,oBAAoB,QAAQ;AACzD,YAAI,mBAAmB,cAAc;AACnC,oBAAU,KAAK,QAAQ;AAAA,QACzB;AAAA,MACF,CAAC;AACD,aAAO,YAAY,CAAC;AACpB,YAAM,MAAM,KAAK,WAAW,MAAM,IAAI,KAAK,IAAI,UAAU,EAAE,WAAW,QAAQ;AAC9E,UAAI;AACJ,YAAM,WAAW,OAAO,IAAI,UAAU;AACtC,UAAI,OAAO,IAAI,OAAO,MAAM,UAAU;AACpC,iBAAS,OAAO;AAAA,MAClB,WAAW,OAAO,IAAI,OAAO,MAAM,UAAU;AAC3C,iBAAS,OAAO;AAAA,MAClB;AACA,UAAI,YAAY,OAAO;AACvB,UAAI,eAAe,KAAK,IAAI,cAAc;AAC1C,UAAI,gBAAgB,aAAa,WAAW,aAAa;AACzD,aAAO,UAAU,aAAa,IAAI;AAClC,YAAM,gBAAgB,OAAO,IAAI,mBAAmB;AACpD,UAAI,iBAAiB,OAAO,IAAI,0BAA0B,KAAK;AAC/D,UAAI,eAAe;AACjB,yBAAiB;AAAA,MACnB;AACA,MAAO,KAAK,WAAW,cAAY;AACjC,YAAI,eAAe;AACnB,YAAI,YAAY,SAAS,WAAW,SAAS;AAC7C,eAAO,UAAU,SAAS,IAAI,CAAC;AAC/B,YAAI;AACJ,YAAI,MAAM,CAAC;AACX,YAAI,QAAQ,CAAC;AACb,YAAI,mBAAmB,CAAC;AACxB,YAAI,gBAAgB,CAAC;AACrB,QAAO,KAAK,QAAQ,WAAS;AAC3B,cAAI,KAAK,IAAI;AACb,gBAAM,KAAK,IAAI;AACf,2BAAiB,KAAK,IAAI,OAAO,IAAI,QAAQ,SAAS;AACtD,wBAAc,KAAK,IAAI,QAAQ;AAAA,QACjC,CAAC;AACD,YAAI,mBAAyB,YAAY,SAAS,QAAQ;AAC1D,YAAI,YAAY,UAAU,CAAC;AAC3B,YAAI;AACJ,YAAI,WAAW;AACb,sBAAY,UAAU,CAAC,EAAE,IAAI,GAAG;AAAA,QAClC;AACA,YAAI;AACJ,QAAO,KAAK,WAAW,cAAY;AACjC,cAAI,OAAO,SAAS,IAAI,GAAG;AAE3B,cAAI,cAAoB,KAAK,MAAM,SAAS,UAAU,SAAS,OAAO,KAAK,OAAO,SAAS;AAC3F,cAAI;AACJ,cAAI,eAAe,cAAc,mBAAmB,IAAI;AACtD,0BAAsBC,MAAK,SAAS,WAAW;AAC/C,0BAAc,IAAI,SAAS,QAAQ,aAAa,OAAO,cAAc,WAAW,CAAC;AACjF,wBAAY,OAAO,KAAK,WAAW;AACnC,mBAAO,UAAU,SAAS,EAAE,KAAK,WAAW;AAC5C,YAAO,KAAK,QAAQ,WAAS;AAC3B,kBAAI,QAAQ,SAAS,IAAI,KAAK;AAC9B,kBAAU,SAAS,KAAK,GAAG;AACzB,4BAAY,OAAO,OAAO,KAAK;AAC/B,4BAAY,OAAO,cAAc,KAAK,GAAG,KAAK;AAC9C,sBAAM,KAAK,IAAI;AACf,oBAAI,KAAK,IAAI;AAAA,cACf,OAAO;AACL,oBAAI,KAAK,IAAI;AACb,sBAAM,KAAK,IAAI;AAAA,cACjB;AAAA,YACF,CAAC;AACD,gBAAI,gBAAgB;AAClB,0BAAY,IAAI,aAAa,CAAC,QAAQ,CAAC;AAAA,YACzC;AACA,gBAAI,iBAAiB,iBAAiB;AACpC,4BAAc,iBAAiB,QAAQ;AAAA,YACzC;AACA,8BAAkB;AAAA,UACpB,OAAO;AACL,YAAO,KAAK,QAAQ,WAAS;AAC3B,kBAAI,WAAW,iBAAiB,KAAK;AACrC,kBAAI,QAAQ,SAAS,IAAI,KAAK;AAC9B,kBAAI,SAAS,MAAM;AACjB,oBAAI,eAAe,YAAY,IAAI,KAAK;AACxC,wBAAQ,UAAU;AAAA,kBAChB,KAAK;AACH,gCAAY,OAAO,OAAO,KAAK;AAC/B;AAAA,kBACF,KAAK;AACH,gCAAY,OAAO,OAAO,eAAe,KAAK;AAC9C;AAAA,kBACF,KAAK;AACH;AAAA,kBACF,KAAK;AACH,wBAAI,QAAQ,cAAc;AACxB,kCAAY,OAAO,OAAO,KAAK;AAAA,oBACjC;AACA;AAAA,kBACF,KAAK;AACH,wBAAI,QAAQ,cAAc;AACxB,kCAAY,OAAO,OAAO,KAAK;AAAA,oBACjC;AACA;AAAA,kBACF,KAAK;AACH,0BAAM,KAAK;AACX,wBAAI,KAAK,KAAK;AACd,wBAAI,UAAU,IAAI,KAAK,IAAI,MAAM,KAAK;AACtC,gCAAY,OAAO,OAAO,OAAO;AACjC;AAAA,kBACF,KAAK;AACH,wBAAI,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,YAAY,GAAG;AAC5C,kCAAY,OAAO,OAAO,KAAK;AAAA,oBACjC;AACA;AAAA,gBACJ;AACA,4BAAY,OAAO,cAAc,KAAK,GAAG,YAAY,IAAI,KAAK,CAAC;AAC/D,oBAAIC,eAAsBD,MAAK,SAAS,WAAW;AACnD,gBAAAC,aAAY,GAAG,IAAI;AACnB,4BAAY,cAAcA;AAAA,cAC5B;AAAA,YACF,CAAC;AACD,gBAAI,gBAAgB;AAClB,0BAAY,IAAI,WAAW,EAAE,KAAK,QAAQ;AAAA,YAC5C;AAAA,UACF;AACA,yBAAe;AAAA,QACjB,CAAC;AACD,YAAI,iBAAiB,iBAAiB;AACpC,wBAAc,iBAAiB,QAAQ;AAAA,QACzC;AAAA,MACF,CAAC;AACD,UAAI,OAAO,YAAY;AACrB,eAAO,WAAW,OAAO,UAAU;AAAA,MACrC;AACA,WAAK,cAAc;AAEnB,UAAI,KAAK,cAAc;AACrB,aAAK,MAAM,OAAO,KAAK,cAAc,MAAM;AACzC,eAAK,cAAc;AAAA,QACrB,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA,EACA,cAAc;AACZ,UAAM,YAAY;AAClB,SAAK,sBAAsB;AAC3B,SAAK,eAAe;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,iBAAiB,UAAU;AACzB,QAAI,eAAe,KAAK,IAAI,cAAc;AAC1C,QAAI,gBAAsB,eAAe,GAAG,UAAU,KAAK,IAAI,cAAc,QAAQ,GAAG,KAAK,IAAI,gBAAgB,CAAC;AAClH,QAAU,oBAAoB,aAAa,IAAU,oBAAoB,YAAY,GAAG;AACtF,sBAAgB,OAAO,OAAO,CAAC,GAAG,YAAY;AAAA,IAChD;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,eAAe,UAAU;AACvB,WAAO,KAAK,aAAa,SAAS,WAAW,SAAS,KAAK;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,eAAe,UAAU;AACvB,WAAO,KAAK,aAAa,SAAS,WAAW,SAAS,KAAK;AAAA,EAC7D;AAAA,EACA,qBAAqB;AACnB,UAAM,mBAAmB;AACzB,QAAI,eAAe,KAAK,MAAM,KAAK,WAAW,cAAc,CAAC;AAC7D,QAAI,eAAe,KAAK,MAAM,KAAK,WAAW,cAAc,CAAC;AAC7D,QAAU,SAAS,YAAY,KAAW,SAAS,YAAY,GAAG;AAChE,UAAI,KAAK,IAAI,aAAa,KAAK,GAAG;AAChC,wBAAgB;AAAA,MAClB;AACA,UAAI,KAAK,IAAI,WAAW,KAAK,CAAC,KAAK,qBAAqB;AACtD,aAAK,sBAAsB;AAC3B,YAAI,gBAAgB,KAAK,IAAI,eAAe;AAC5C,YAAI,UAAU,KAAK,WAAW,eAAe;AAC7C,YAAI,qBAAqB,eAAe,gBAAgB,KAAK,IAAI,iBAAiB,CAAC,KAAK,IAAI,KAAK,IAAI,eAAe,CAAC,KAAK,KAAK,aAAa;AAC5I,YAAI,SAAS;AACX,cAAI,WAAiB,oBAAoB,OAAO;AAChD,+BAAqB,KAAK,KAAK,qBAAqB,QAAQ,IAAI;AAAA,QAClE;AACA,YAAI,CAAC,eAAe;AAClB,0BAAgB,KAAK,iBAAiB,kBAAkB;AAAA,QAC1D;AACA,YAAI,kBAAkB,CAAC,WAAW,QAAQ,aAAa,cAAc,YAAY,QAAQ,UAAU,cAAc,SAAS,KAAK,qBAAqB;AAClJ,eAAK,qBAAqB;AAC1B,eAAK,cAAc,iBAAiB,aAAa;AACjD,eAAK,iBAAiB,aAAa;AACnC,cAAI,QAAQ,cAAc,WAAW,cAAc;AACnD,UAAO,KAAK,KAAK,QAAQ,YAAU;AACjC,gBAAI,OAAO,IAAI,UAAU,MAAM,MAAM;AACnC,qBAAO,WAAW,KAAK;AAAA,YACzB;AAAA,UACF,CAAC;AACD,eAAK,kBAAkB;AACvB,eAAK,MAAM,OAAO,KAAK,cAAc,MAAM;AACzC,iBAAK,MAAM,OAAO,KAAK,cAAc,MAAM;AACzC,oBAAM,OAAO;AACb,kBAAI,KAAK,OAAO,UAAU,IAAI,GAAG;AAC/B,qBAAK,OAAO,SAAS,MAAM;AAAA,kBACzB;AAAA,kBACA,QAAQ;AAAA,gBACV,CAAC;AAAA,cACH;AAAA,YACF,CAAC;AAAA,UACH,CAAC;AAAA,QACH;AAAA,MACF;AACA,MAAO,KAAK,KAAK,QAAQ,YAAU;AACjC,YAAI,OAAO,IAAI,UAAU,MAAM,MAAM;AACnC,cAAI,YAAY,KAAK,WAAW,MAAM,IAAI,KAAK,IAAI,UAAU,EAAE,WAAW,QAAQ;AAClF,gBAAM,QAAe,oBAAoB,OAAO,WAAW,cAAY;AACrE,mBAAc,QAAQ,SAAS,IAAI,SAAS,GAAG,YAAY;AAAA,UAC7D,CAAC;AACD,cAAI,aAAa,MAAM;AACvB,cAAI,aAAa,GAAG;AAClB,0BAAc;AAAA,UAChB;AACA,0BAAgB,KAAK,aAAa,KAAK,IAAI,KAAK,IAAI,eAAe,CAAC;AACpE,gBAAM,MAAa,eAAe,OAAO,WAAW,cAAY;AAC9D,mBAAc,QAAQ,SAAS,IAAI,SAAS,GAAG,YAAY;AAAA,UAC7D,CAAC;AACD,cAAI,WAAW,IAAI;AACnB,cAAI,YAAY;AAChB,cAAI,YAAY,GAAG;AACjB;AAAA,UACF;AACA,gBAAM,gBAAgB,OAAO,UAAU,UAAU;AACjD,gBAAM,eAAe,OAAO,UAAU,SAAS;AAC/C,cAAI;AACJ,cAAI;AACJ,cAAI,eAAe;AACjB,wBAAY,cAAc,IAAI,SAAS;AAAA,UACzC;AACA,cAAI,cAAc;AAChB,uBAAW,aAAa,IAAI,SAAS;AAAA,UACvC;AACA,cAAI,iBAAiB;AACrB,cAAI,YAAY,QAAQ,aAAa,MAAM;AACzC,gBAAI,WAAW,gBAAgB,YAAY,cAAc;AACvD,+BAAiB;AAAA,YACnB;AAAA,UACF;AACA,iBAAO,WAAW,kBAAkB,cAAc;AAClD,iBAAO,WAAW,cAAc,UAAU;AAC1C,iBAAO,WAAW,sBAAsB,OAAO,kBAAkB,UAAU,CAAC;AAC5E,iBAAO,WAAW,YAAY,QAAQ;AACtC,eAAK,KAAK,OAAO,KAAK,cAAc,MAAM;AACxC,mBAAO,qBAAqB,oBAAoB;AAAA,UAClD,CAAC;AAAA,QACH;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EACA,cAAcJ,MAAKC,MAAK,WAAW,aAAa;AAC9C,WAAO;AAAA,MACL,KAAKD;AAAA,MACL,KAAKC;AAAA,MACL,OAAOA,OAAMD,QAAO;AAAA,IACtB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,mBAAmB;AACjB,WAAO,KAAK;AAAA,EACd;AAAA,EACA,YAAYA,MAAKC,MAAK;AACpB,QAAI,gBAAgB,KAAK,WAAW,eAAe;AACnD,QAAI,CAAC,eAAe;AAClB,sBAAgB,KAAK,IAAI,cAAc;AAAA,IACzC;AACA,QAAI,KAAK,cAAc,WAAW,cAAc;AAChD,SAAK,aAAa,EAAE,IAAID;AACxB,SAAK,aAAa,EAAE,IAAIC;AAAA,EAC1B;AAAA,EACA,MAAM,UAAU;AACd,QAAI,YAAY,WAAW,YAAY,UAAU,YAAY,OAAO;AAClE,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAAA,EACA,kBAAkB,UAAU;AAC1B,QAAI;AACJ,QAAI;AACJ,QAAI,QAAQ,SAAS;AACrB,QAAI,WAAW,SAAS;AACxB,QAAI,QAAQ,GAAG;AACb,UAAI,SAAS,IAAI;AACf,gBAAQ;AAAA,MACV,WAAW,SAAS,IAAI;AACtB,gBAAQ;AAAA,MACV,WAAW,SAAS,IAAI;AACtB,gBAAQ;AAAA,MACV,WAAW,SAAS,GAAG;AACrB,gBAAQ;AAAA,MACV,WAAW,SAAS,IAAI;AACtB,gBAAQ;AAAA,MACV,WAAW,QAAQ,IAAI;AACrB,gBAAQ;AAAA,MACV;AACA,0BAAoB;AAAA,QAClB;AAAA,QACA;AAAA,MACF;AAAA,IACF;AACA,QAAI,YAAY,QAAQ;AACtB,YAAM,KAAK,KAAK,WAAW,cAAc,OAAO,QAAQ,OAAO,SAAS,SAAS,GAAG,aAAa,QAAQ;AACvG,4BAAoB;AAAA,UAClB,UAAU;AAAA,UACV,OAAO;AAAA,QACT;AAAA,MACF,OAAO;AACL,4BAAoB;AAAA,UAClB,UAAU;AAAA,UACV,OAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,oBAAoB;AAClB,UAAMD,OAAM,KAAK,WAAW,KAAK;AACjC,UAAMC,OAAM,KAAK,WAAW,KAAK;AACjC,QAAU,SAASD,IAAG,KAAW,SAASC,IAAG,GAAG;AAC9C,YAAM,OAAO,KAAK;AAClB,YAAM,eAAe,KAAK,MAAM,KAAK,WAAW,cAAc,CAAC;AAC/D,YAAM,eAAe,KAAK,MAAM,KAAK,WAAW,cAAc,CAAC;AAC/D,YAAM,WAAW,KAAK,IAAI,UAAU;AACpC,YAAM,eAAe,KAAK,WAAW,cAAc;AACnD,UAAI,QAAQ;AACZ,UAAI,IAAI;AACR,YAAM,YAAY,KAAK,IAAI,eAAe;AAC1C,UAAI,eAAqB,eAAe,GAAG,eAAe,cAAc,SAAS,UAAU,GAAG,SAAS;AACvG,UAAU,oBAAoB,YAAY,IAAI,KAAK,aAAa,GAAG;AACjE,uBAAe,OAAO,OAAO,CAAC,GAAG,YAAY;AAAA,MAC/C;AACA,YAAM,mBAAyB,oBAAoB,YAAY;AAC/D,WAAK,oBAAoB;AACzB,YAAM,eAAqB,YAAY,aAAa,QAAQ;AAC5D,YAAM,MAAM,KAAK;AACjB,YAAM,WAAW,KAAK;AAEtB,cAAc,KAAK,eAAe,kBAAkB,aAAa,UAAU,aAAa,OAAO,MAAMD,IAAG;AACxG,UAAI,gBAAgB,QAAQ;AAC5B,UAAI;AACJ,YAAM,UAAU,KAAK,IAAI,aAAa;AACtC,WAAK,cAAc,gBAAgB,YAAY;AAC/C,YAAM,qBAAqB,SAAS,IAAI,oBAAoB;AAC5D,YAAM,mBAAmB,SAAS,IAAI,oBAAoB,kBAAkB;AAC5E,UAAI;AACJ,UAAI,gBAAgB;AACpB,UAAI,kBAAkB;AACpB,4BAAoB,KAAK,kBAAkB,YAAY;AACvD,wBAAsB,oBAAoB,iBAAiB;AAAA,MAC7D;AACA,UAAI,IAAI;AACR,aAAO,QAAQ,eAAe,kBAAkB;AAC9C,YAAI;AACJ,YAAI,KAAK,UAAU,SAAS,IAAI,GAAG;AACjC,qBAAW,IAAI,SAAS,MAAM,QAAW,CAAC,CAAC;AAC3C,eAAK,WAAW,KAAK,QAAQ;AAC7B,eAAK,gBAAgB,QAAQ;AAAA,QAC/B,OAAO;AACL,qBAAW,KAAK,UAAU,CAAC;AAAA,QAC7B;AACA,aAAK,cAAc,UAAU,CAAC,CAAC;AAC/B,aAAK,gBAAgB,UAAU,IAAI;AACnC,iBAAS,OAAO,SAAS,KAAK;AAC9B,iBAAS,OAAO,iBAAiB,MAAS;AAC1C,YAAI,WAAW,QAAc,YAAY,aAAa,UAAU,aAAa,QAAQ,KAAK,MAAM,aAAa,QAAQ,CAAC;AAEtH,mBAAiB,KAAK,UAAU,aAAa,UAAU,GAAG,IAAI;AAC9D,iBAAS,OAAO,YAAY,QAAQ;AACpC,YAAI,OAAO,IAAI,KAAK,KAAK;AACzB,iBAAS,QAAQ,aAAa,QAAQ;AACtC,YAAI,gBAAgB,KAAK,IAAI,gBAAgB,KAAW,SAAS,aAAa,GAAG;AAC/E,cAAI,aAAa,YAAY,QAAQ;AACnC,gBAAU,YAAY,OAAO,eAAe,cAAc,KAAK,QAAQ,GAAG;AACxE,uBAAS,KAAK,IAAI,yBAAyB,EAAE,aAAa,QAAQ;AAAA,YACpE;AAAA,UACF;AAAA,QACF;AACA,cAAM,QAAQ,SAAS,IAAI,OAAO;AAClC,YAAI,OAAO;AACT,gBAAM,IAAI,QAAQ,KAAK,cAAc,OAAO,MAAM,MAAM,CAAC;AAAA,QAC3D;AACA,YAAI,QAAQ,aAAa;AAEzB,YAAI,aAAa,YAAY,QAAQ;AACnC,mBAAS,OAAO,iBAAiB,KAAK;AAAA,QACxC;AACA,YAAI,kBAAkB;AACpB,kBAAQ;AACR,cAAI,WAAW,aAAa;AAC5B,cAAI,YAAY,QAAQ;AACtB,uBAAW;AAAA,UACb;AACA,cAAI,gBAAgB,QAAc,YAAY,UAAU,KAAK,MAAM,QAAQ,CAAC;AAE5E,0BAAsB,KAAK,eAAe,UAAU,GAAG,IAAI;AAC3D,mBAAS,OAAO,iBAAiB,aAAa;AAAA,QAChD;AACA,aAAK,iBAAiB,UAAU,KAAK;AACrC,wBAAgB;AAChB,gBAAQ;AAER,YAAI,mBAAmB;AACrB,gBAAM,gBAAgB,kBAAkB;AACxC,gBAAM,aAAa,kBAAkB;AACrC,gBAAM,MAAM,KAAK,MAAM,aAAa;AAEpC,cAAI,aAAmB,KAAK,gBAAgB,gBAAgB,KAAK,eAAe,YAAY,MAAM,aAAa;AAC/G,cAAI;AACJ,cAAI,eAAe,KAAK,IAAI,oBAAoB,KAAK,IAAI,aAAa,CAAC;AACvE,iBAAO,aAAa,QAAQ,OAAO,eAAe;AAChD,gBAAI;AACJ,gBAAI,KAAK,eAAe,SAAS,IAAI,GAAG;AACtC,8BAAgB,IAAI,SAAS,MAAM,QAAW,CAAC,CAAC;AAChD,mBAAK,eAAe,KAAK,aAAa;AACtC,mBAAK,gBAAgB,aAAa;AAAA,YACpC,OAAO;AACL,8BAAgB,KAAK,eAAe,CAAC;AAAA,YACvC;AACA,iBAAK,cAAc,eAAe,CAAC,OAAO,GAAG,IAAI;AACjD,iBAAK,gBAAgB,eAAe,IAAI;AACxC,0BAAc,OAAO,SAAS,UAAU;AACxC,gBAAI,gBAAgB,aAAmB,YAAY,eAAe,aAAa,GAAG;AAElF,4BAAsB,KAAK,eAAe,eAAe,GAAG,IAAI;AAChE,0BAAc,OAAO,YAAY,aAAa;AAC9C,gBAAIK,QAAO,IAAI,KAAK,UAAU;AAC9B,qBAAS,aAAa,aAAa;AACnC,kBAAM,aAAa,cAAc,IAAI,OAAO;AAC5C,gBAAI,YAAY;AACd,kBAAI,oBAAoB;AACtB,2BAAW,IAAI,QAAQ,KAAK,cAAc,OAAOA,OAAM,MAAM,CAAC;AAAA,cAChE,OAAO;AACL,2BAAW,WAAW,WAAW,KAAK;AAAA,cACxC;AAAA,YACF;AACA,iBAAK,iBAAiB,eAAe,CAAC;AACtC,gBAAI,cAAc,oBAAoB;AACpC;AAAA,YACF;AACA,iCAAqB;AACrB,yBAAa;AACb;AAAA,UACF;AAAA,QACF;AACA,YAAI,SAAS,eAAe;AAC1B;AAAA,QACF;AACA;AAAA,MACF;AACA,eAAS,IAAI,GAAG,IAAI,KAAK,UAAU,QAAQ,KAAK;AAC9C,aAAK,gBAAgB,KAAK,UAAU,CAAC,GAAG,KAAK;AAAA,MAC/C;AACA,eAAS,IAAI,GAAG,IAAI,KAAK,eAAe,QAAQ,KAAK;AACnD,aAAK,gBAAgB,KAAK,eAAe,CAAC,GAAG,KAAK;AAAA,MACpD;AACA,MAAO,KAAK,KAAK,QAAQ,YAAU;AACjC,YAAI,OAAO,QAAQ;AACjB,iBAAO,eAAe;AAAA,QACxB;AAAA,MACF,CAAC;AAAA,IACH;AACA,SAAK,aAAa;AAAA,EACpB;AAAA,EACA,cAAc,OAAO,KAAK;AACxB,SAAK,cAAc,qBAAqB,KAAK,gBAAgB,KAAK,CAAC;AACnE,SAAK,cAAc,qBAAqB,KAAK,gBAAgB,GAAG,CAAC;AAAA,EACnE;AAAA,EACA,YAAY;AACV,SAAK,eAAe,KAAK,aAAa,IAAI;AAAA,EAC5C;AAAA,EACA,QAAQL,MAAK;AACX,UAAM,eAAe,KAAK,WAAW,cAAc;AACnD,UAAM,WAAW,aAAa;AAE9B,QAAI,YAAkB,KAAKA,MAAK,UAAU,aAAa,OAAO,KAAK,KAAK;AACxE,QAAI,UAAU,YAAkB,YAAY,UAAU,aAAa,QAAQ,KAAK,MAAM,QAAQ,CAAC;AAE/F,cAAgB,KAAK,SAAS,UAAU,GAAG,KAAK,KAAK;AACrD,WAAO,aAAa,UAAU,aAAa,KAAK,IAAI,iBAAiB,CAAC;AAAA,EACxE;AAAA,EACA,QAAQC,MAAK;AACX,UAAM,eAAe,KAAK,WAAW,cAAc;AACnD,UAAM,WAAW,aAAa;AAE9B,QAAI,YAAkB,KAAKA,MAAK,UAAU,aAAa,OAAO,KAAK,KAAK;AACxE,QAAI,UAAU,YAAkB,YAAY,UAAU,aAAa,QAAQ,KAAK,MAAM,QAAQ,CAAC;AAE/F,cAAgB,KAAK,SAAS,UAAU,GAAG,KAAK,KAAK;AACrD,WAAO,aAAa,UAAU,aAAa,KAAK,IAAI,eAAe,CAAC;AAAA,EACtE;AAAA,EACA,aAAa,OAAO,SAAS;AAAA,EAAC;AAAA,EAC9B,uBAAuB;AACrB,SAAK,WAAW,gBAAgB,KAAK,IAAI,cAAc,CAAC;AACxD,SAAK,WAAW,OAAO,MAAS;AAChC,SAAK,WAAW,YAAY,MAAS;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,eAAe;AACb,WAAO,KAAK;AAAA,EAEd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,mBAAmB;AACjB,WAAa,oBAAoB,KAAK,IAAI,cAAc,CAAC;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA,EAIA,sBAAsB,UAAU,QAAQ;AACtC,UAAM,eAAe,KAAK,WAAW,cAAc;AACnD,QAAI,CAAC,SAAS,MAAM;AAClB,eAAS,OAAO,CAAC;AAAA,IACnB;AACA,QAAI,CAAC,SAAS,OAAO;AACnB,eAAS,QAAQ,CAAC;AAAA,IACpB;AACA,IAAO,KAAK,QAAQ,WAAS;AAC3B,UAAI,QAAQ,SAAS,IAAI,KAAK;AAC9B,UAAU,SAAS,KAAK,GAAG;AACzB,YAAI,YAAY,SAAS,KAAK,KAAK;AACnC,YAAI,UAAU,SAAS,MAAM,KAAK;AAGlC,YAAI,SAAS,aAAa,SAAS,SAAS;AAAA,QAAC,OAAO;AAClD,gBAAM,WAAW,aAAa;AAC9B,gBAAM,QAAQ,aAAa;AAE3B,sBAAkB,KAAK,OAAO,UAAU,OAAO,KAAK,KAAK;AACzD,oBAAU,YAAkB,YAAY,UAAU,QAAQ,KAAK,MAAM,QAAQ,CAAC;AAE9E,oBAAgB,KAAK,SAAS,UAAU,GAAG,KAAK,KAAK;AACrD,mBAAS,KAAK,KAAK,IAAI;AACvB,mBAAS,MAAM,KAAK,IAAI;AAAA,QAC1B;AACA,aAAK,aAAa,WAAW,SAAS,SAAS;AAAA,MACjD;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,mBAAmB;AAAA,EAEnB;AAAA;AAAA;AAAA;AAAA,EAIA,qBAAqB,UAAU,OAAO,cAAc,cAAc,eAAe;AAC/E,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI,eAAe;AACjB,cAAQ,SAAS,IAAI,KAAK;AAAA,IAC5B,OAAO;AACL,UAAI,SAAS,QAAQ,SAAS,OAAO;AACnC,oBAAY,SAAS,KAAK,KAAK;AAC/B,qBAAa,SAAS,MAAM,KAAK;AAAA,MACnC,OAAO;AACL,oBAAY,SAAS,IAAI,KAAK;AAC9B,qBAAa;AAAA,MACf;AACA,cAAQ,aAAa,aAAa,aAAa;AAC/C,cAAQ,KAAK,cAAc,QAAQ,KAAK,cAAc;AAAA,IACxD;AACA,WAAO,KAAK,gBAAgB,KAAK;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA,EAIA,uBAAuB,UAAU,OAAO,cAAc,cAAc;AAClE,WAAO,KAAK,UAAU,SAAS,qBAAqB,KAAK,qBAAqB,UAAU,OAAO,cAAc,YAAY,CAAC;AAAA,EAC5H;AAAA;AAAA;AAAA;AAAA,EAIA,qBAAqB,UAAU,OAAO,cAAc,cAAc,eAAe;AAC/E,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI,eAAe;AACjB,cAAQ,SAAS,IAAI,KAAK;AAAA,IAC5B,OAAO;AACL,UAAI,SAAS,QAAQ,SAAS,OAAO;AACnC,oBAAY,SAAS,KAAK,KAAK;AAC/B,qBAAa,SAAS,MAAM,KAAK;AAAA,MACnC,OAAO;AACL,oBAAY,SAAS,IAAI,KAAK;AAC9B,qBAAa;AAAA,MACf;AACA,cAAQ,aAAa,aAAa,aAAa;AAC/C,cAAQ,KAAK,cAAc,QAAQ,KAAK,cAAc;AAAA,IACxD;AACA,WAAO,KAAK,gBAAgB,KAAK;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA,EAIA,uBAAuB,UAAU,OAAO,cAAc,cAAc;AAClE,WAAO,KAAK,UAAU,SAAS,qBAAqB,KAAK,qBAAqB,UAAU,OAAO,cAAc,YAAY,CAAC;AAAA,EAC5H;AAAA;AAAA;AAAA;AAAA,EAIA,kBAAkB,UAAU,UAAU;AACpC,QAAI,QAAQ,KAAK,gBAAgB,QAAQ;AACzC,YAAQ,SAAS,WAAW,OAAO,KAAK,aAAa;AACrD,QAAI,eAAe,KAAK,WAAW,cAAc;AACjD,QAAI,CAAO,MAAM,KAAK,GAAG;AACvB,YAAM,WAAW,KAAK,MAAM,OAAO;AACnC,YAAM,WAAW,aAAa;AAC9B,YAAM,MAAM,KAAK,MAAM;AACvB,YAAM,WAAW,KAAK,MAAM;AAC5B,YAAM,QAAQ,aAAa;AAE3B,cAAc,KAAK,OAAO,UAAU,OAAO,KAAK,OAAO,KAAK,WAAW,OAAO,CAAC,CAAC;AAChF,UAAI,WAAiB,wBAAwB,cAAc,IAAI,KAAK,KAAK,GAAG,UAAU,KAAK,QAAQ;AACnG,UAAI,UAAU;AAEZ,gBAAc,KAAK,QAAQ,KAAK,aAAa,IAAI,MAAM,UAAU,OAAO,KAAK,OAAO,KAAK,WAAW,OAAO,CAAC,CAAC;AAC7G,mBAAiB,wBAAwB,cAAc,IAAI,KAAK,QAAQ,WAAW,QAAQ,GAAG,UAAU,KAAK,QAAQ;AAAA,MACvH;AACA,aAAO,KAAK,gBAAgB,QAAQ,WAAW,QAAQ;AAAA,IACzD;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,eAAe,UAAU,gBAAgB;AAEvC,QAAI,KAAK,WAAW,KAAK,KAAK,MAAM;AAClC,UAAI,SAAS,KAAK,IAAI,oBAAoB,EAAE,KAAK,WAAW,cAAc,EAAE,QAAQ;AACpF,UAAI,QAAQ,KAAK,gBAAgB,QAAQ;AACzC,UAAU,SAAS,KAAK,GAAG;AACzB,YAAI,OAAO,IAAI,KAAK,KAAK;AACzB,YAAI,eAAe,KAAK,WAAW,cAAc;AACjD,YAAI,WAAiB,wBAAwB,cAAc,MAAM,KAAK,MAAM,OAAO,gBAAgB,KAAK,MAAM,KAAK,KAAK,MAAM,QAAQ;AACtI,YAAI,mBAAmB,OAAO;AAC5B,iBAAO,IAAI,KAAK,QAAQ,KAAK,IAAI,yBAAyB,CAAC,KAAK,IAAI,mBAAmB,GAAG,CAAC,IAAI,QAAQ;AAAA,QACzG;AACA,eAAO,KAAK,MAAM,cAAc,OAAO,MAAM,KAAK,IAAI,qBAAqB,MAAM,CAAC;AAAA,MACpF;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,cAAc,QAAQ,UAAU,UAAU,MAAM;AAC9C,QAAI,YAAY,KAAK,WAAW,MAAM,IAAI,KAAK,IAAI,UAAU,EAAE,WAAW,QAAQ;AAClF,QAAI,QAAQ,KAAK,gBAAgB,QAAQ;AACzC,QAAI,YAAY,MAAM;AACpB,iBAAW;AAAA,IACb;AACA,YAAQ,SAAS,WAAW,OAAO,KAAK,aAAa;AACrD,UAAM,SAAgB,eAAe,OAAO,WAAW,cAAY;AACjE,UAAI,UAAU;AACd,UAAI,SAAS,MAAM;AACjB,kBAAU,SAAS,KAAK,SAAS;AAAA,MACnC;AACA,aAAc,QAAQ,SAAS,KAAK;AAAA,IACtC,CAAC;AACD,QAAI,QAAQ,OAAO,IAAI,aAAa,GAAG;AACrC,UAAI,QAAQ,OAAO,UAAU,OAAO,QAAQ,CAAC;AAC7C,UAAI,SAAS,OAAO,UAAU,OAAO,KAAK;AAC1C,UAAI,SAAS,QAAQ;AACnB,YAAI,MAAM,QAAQ,OAAO,OAAO;AAC9B,cAAI,OAAO,MAAM,KAAK,SAAS;AAC/B,cAAI,QAAQ,OAAO,MAAM,SAAS;AAClC,cAAI,KAAK,IAAI,QAAQ,IAAI,IAAI,KAAK,IAAI,QAAQ,KAAK,GAAG;AACpD,mBAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF;AACA,UAAI,OAAO;AACT,eAAO;AAAA,MACT;AACA,UAAI,QAAQ;AACV,eAAO;AAAA,MACT;AAAA,IACF,OAAO;AACL,YAAM,WAAW,OAAO,UAAU,OAAO,QAAQ,CAAC;AAClD,UAAI,UAAU;AACZ,YAAI,SAAS,QAAQ,SAAS,OAAO;AACnC,cAAI,OAAO,SAAS,KAAK,SAAS;AAClC,cAAI,QAAQ,SAAS,MAAM,SAAS;AACpC,cAAI,SAAS,QAAQ,SAAS,OAAO;AACnC,mBAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,UAAU,UAAU,UAAU,cAAc,WAAW;AACrD,UAAM,SAAS,SAAS,IAAI,SAAS;AACrC,UAAM,SAAS,SAAS,IAAI,SAAS;AACrC,QAAI,SAAS,SAAS,KAAK,aAAa,IAAI,cAAc;AACxD,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,YAAY,OAAO,KAAK,UAAU;AAChC,SAAK,aAAa,MAAM,QAAQ,GAAG,IAAI,QAAQ,GAAG,QAAQ;AAAA,EAC5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,aAAa,OAAO,KAAK,UAAU;AACjC,UAAMD,OAAM,KAAK,WAAW,YAAY,CAAC;AACzC,UAAMC,OAAM,KAAK,WAAW,YAAY,CAAC;AACzC,QAAI,KAAK,WAAW,KAAK,KAAK,QAAQ,KAAK,WAAW,KAAK,KAAK,MAAM;AACpE,UAAI,KAAK,IAAI,WAAW,GAAG;AACzB,cAAM,sBAAsB,KAAK,iBAAiB,MAAM,KAAK;AAC7D,cAAM,eAAe,KAAK,IAAI,cAAc;AAC5C,YAAI,UAAU,KAAK,eAAe,YAAY;AAC9C,YAAI,UAAU,KAAK,eAAe,YAAY,IAAI;AAClD,kBAAgB,KAAK,SAAS,oBAAoB,UAAU,oBAAoB,OAAO,KAAK,IAAI;AAChG,mBAAW,KAAK,MAAM,oBAAoB,QAAQ,IAAU,oBAAoB,mBAAmB;AACnG,kBAAgB,KAAK,SAAS,oBAAoB,UAAU,oBAAoB,OAAO,KAAK,IAAI;AAChG,YAAI,YAAkB,KAAK,SAAS,oBAAoB,UAAU,oBAAoB,OAAO,KAAK,IAAI;AACtG,YAAI,YAAkB,KAAK,SAAS,oBAAoB,UAAU,oBAAoB,OAAO,KAAK,IAAI;AACtG,YAAI,KAAK,QAAQ,cAAc,YAAY;AAC3C,YAAI,KAAK,MAAM,cAAc,YAAY;AACzC,aAAK,KAAK,GAAG,GAAG,QAAQ;AAAA,MAC1B,OAAO;AACL,aAAK,MAAM,QAAQD,SAAQC,OAAMD,QAAO,MAAMA,SAAQC,OAAMD,OAAM,QAAQ;AAAA,MAC5E;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,eAAe,UAAU;AACvB,WAAO,IAAI,KAAK,KAAK,gBAAgB,QAAQ,CAAC;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,eAAe,MAAM;AACnB,WAAO,KAAK,gBAAgB,KAAK,QAAQ,CAAC;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,uBAAuB;AACrB,QAAIC,OAAM,KAAK,WAAW,gBAAgB,KAAK,WAAW,KAAK,CAAC;AAChE,QAAID,OAAM,KAAK,WAAW,gBAAgB,KAAK,WAAW,KAAK,CAAC;AAChE,QAAU,SAASC,IAAG,KAAW,SAASD,IAAG,GAAG;AAC9C,aAAO,KAAK,qBAAqBC,OAAMD;AAAA,IACzC;AACA,WAAO;AAAA,EACT;AAAA,EACA,aAAa,OAAO;AAClB,QAAI,SAAS,MAAM;AACjB,cAAQ;AAAA,IACV;AACA,QAAI,QAAQ,KAAK,IAAI,mBAAmB,GAAG,IAAI,KAAK,aAAa;AACjE,QAAI,KAAK,IAAI,UAAU,EAAE,WAAW,QAAQ,KAAK,KAAK;AACpD,eAAS;AAAA,IACX;AACA,QAAI,eAAe,KAAK,gBAAgB,KAAK,WAAW,mBAAmB,CAAC,CAAC;AAC7E,UAAM,eAAe,KAAK,WAAW,cAAc;AACnD,QAAI,OAAO,KAAK,UAAU,cAAc,OAAO,YAAY;AAC3D,QAAI,eAAe,KAAK,WAAW,gBAAgB,CAAC;AACpD,QAAI,eAAe,KAAK,WAAW,gBAAgB,CAAC;AACpD,QAAIA,OAAY,KAAK,cAAc,aAAa,UAAU,aAAa,OAAO,KAAK,KAAK;AACxF,QAAIC,OAAY,KAAK,cAAc,aAAa,UAAU,aAAa,OAAO,KAAK,KAAK;AACxF,YAAQ;AACR,WAAa,WAAW,MAAMD,OAAM,OAAOC,OAAM,KAAK;AACtD,WAAO,KAAK,iBAAiB,KAAK,gBAAgB,IAAI,CAAC;AAAA,EACzD;AAAA,EACA,UAAU,MAAM,OAAO,cAAc;AACnC,WAAa,KAAK,OAAO,QAAQ,KAAK,aAAa,GAAG,aAAa,UAAU,aAAa,OAAO,KAAK,KAAK;AAAA,EAC7G;AACF;AACA,OAAO,eAAe,UAAU,aAAa;AAAA,EAC3C,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO;AACT,CAAC;AACD,OAAO,eAAe,UAAU,cAAc;AAAA,EAC5C,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO,UAAU,WAAW,OAAO,CAAC,SAAS,SAAS,CAAC;AACzD,CAAC;;;AC58BM,IAAM,kBAAN,cAA8B,SAAS;AAAA,EAC5C,cAAc;AACZ,UAAM,GAAG,SAAS;AAClB,WAAO,eAAe,MAAM,cAAc;AAAA,MACxC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,MAAM;AAAA,MAChC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,UAAU;AAAA,MACpC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC;AAAA,IACV,CAAC;AACD,WAAO,eAAe,MAAM,gBAAgB;AAAA,MAC1C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EACA,YAAY;AACV,SAAK,YAAY,KAAK,MAAM;AAC5B,UAAM,UAAU;AAAA,EAClB;AAAA,EACA,YAAY;AACV,QAAI,KAAK,cAAc;AACrB,aAAO,KAAK;AAAA,IACd;AACA,WAAO,KAAK;AAAA,EACd;AAAA,EACA,aAAa,MAAM,QAAQ;AACzB,QAAI,CAAC,OAAO,IAAI,cAAc,GAAG;AAC/B,YAAM,QAAQ,KAAK,UAAU;AAC7B,YAAM,SAAgB,eAAe,OAAO,OAAY,QAAQ,GAAG,IAAI,CAAC;AACxE,UAAI,CAAC,OAAO,OAAO;AACjB,QAAO,YAAY,OAAO,OAAO,OAAO,IAAI;AAAA,MAC9C;AAAA,IACF;AAAA,EACF;AAAA,EACA,kBAAkB;AAChB,QAAI,CAAC,KAAK,cAAc;AACtB,YAAM,QAAQ,KAAK;AACnB,YAAM,SAAS;AACf,MAAO,KAAK,KAAK,QAAQ,YAAU;AACjC,YAAI,QAAQ;AACZ,YAAI,OAAO,IAAI,OAAO,KAAK,MAAM;AAC/B,kBAAQ;AAAA,QACV;AACA,QAAO,KAAK,OAAO,WAAW,cAAY;AACxC,cAAI,QAAQ,SAAS,IAAI,KAAK;AAC9B,cAAU,SAAS,KAAK,GAAG;AACzB,gBAAI,SAAS,MAAM;AACjB,mBAAK,aAAa,SAAS,KAAK,KAAK,GAAG,MAAM;AAAA,YAChD;AAAA,UACF;AAAA,QACF,CAAC;AAAA,MACH,CAAC;AACD,YAAM,WAAW,KAAK,IAAI,YAAY,CAAC;AACvC,YAAM,WAAW,KAAK,IAAI,YAAY,CAAC;AACvC,UAAI,MAAM,MAAM;AAChB,YAAM,eAAe,KAAK,WAAW,cAAc;AACnD,YAAM,YAAY,aAAa;AAC/B,YAAM,WAAW,aAAa;AAC9B,UAAI,WAAW,GAAG;AAChB,cAAM,QAAQ,MAAM;AACpB,YAAI,OAAO,MAAM,MAAM,CAAC;AACxB,YAAU,SAAS,IAAI,GAAG;AACxB,mBAAS,IAAI,MAAM,GAAG,IAAI,MAAM,OAAO,KAAK;AAC1C,oBAAc,YAAY,UAAU,YAAY,KAAK,MAAM,QAAQ,CAAC;AAEpE,mBAAa,KAAK,MAAM,UAAU,WAAW,KAAK,KAAK;AACvD,kBAAM,KAAK,IAAI;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AACA,UAAI,WAAW,GAAG;AAChB,cAAM,QAAQ,MAAM;AACpB,YAAI,OAAO,MAAM,CAAC;AAClB,YAAU,SAAS,IAAI,GAAG;AACxB,mBAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC9B,oBAAc,YAAY,UAAU,SAAS;AAE7C,mBAAa,KAAK,MAAM,UAAU,WAAW,KAAK,KAAK;AACvD,kBAAM,QAAQ,IAAI;AAAA,UACpB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gBAAgB,OAAO;AACrB,UAAM,QAAQ,KAAK,UAAU;AAC7B,UAAM,gBAAgB,KAAK,IAAI,iBAAiB,CAAC;AACjD,UAAM,cAAc,KAAK,IAAI,eAAe,CAAC;AAC7C,UAAM,MAAM,MAAM,SAAS,iBAAiB,IAAI;AAChD,UAAM,SAAgB,eAAe,OAAO,OAAY,QAAQ,GAAG,KAAK,CAAC;AACzE,QAAI,QAAQ,OAAO;AACnB,QAAI,OAAO,OAAO;AAChB,cAAQ,QAAQ,iBAAiB;AAAA,IACnC,OAAO;AACL,UAAI,QAAQ,GAAG;AACb,iBAAS;AAAA,MACX;AACA,UAAI,YAAY,MAAM,KAAK;AAC3B,YAAM,WAAW,MAAM,QAAQ,CAAC;AAChC,UAAI,UAAU;AACZ,YAAI,gBAAgB;AAEpB,YAAI,KAAK,IAAI,gBAAgB,KAAK,IAAI,KAAK,IAAI,YAAY,KAAK,GAAG;AACjE,sBAAY;AACZ;AAAA,QACF;AAAA,MACF;AAUA,UAAI,IAAI,QAAQ;AAChB,cAAQ,QAAQ,iBAAiB,MAAM,IAAI,KAAK,aAAa,IAAI;AAAA,IACnE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,aAAa,OAAO;AAClB,UAAM,QAAQ,KAAK,UAAU;AAC7B,UAAM,SAAgB,eAAe,OAAO,OAAY,QAAQ,GAAG,KAAK,CAAC;AACzE,QAAI,QAAQ,OAAO;AACnB,QAAI,OAAO,OAAO;AAChB,aAAO;AAAA,IACT,OAAO;AACL,UAAI,QAAQ,GAAG;AACb,iBAAS;AAAA,MACX;AACA,aAAO;AAAA,IACT;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,gBAAgB,UAAU;AACxB,UAAM,gBAAgB,KAAK,IAAI,iBAAiB,CAAC;AACjD,UAAM,cAAc,KAAK,IAAI,eAAe,CAAC;AAC7C,UAAM,QAAQ,KAAK,UAAU;AAC7B,QAAI,MAAM,KAAK,MAAM,MAAM,SAAS,iBAAiB,IAAI,YAAY;AACrE,QAAI,QAAQ,WAAW;AACvB,QAAI,SAAS,KAAK,MAAM,KAAK;AAC7B,QAAI,SAAS,GAAG;AACd,eAAS;AAAA,IACX;AACA,QAAI,SAAS,MAAM,GAAG;AACpB,eAAS,MAAM;AAAA,IACjB;AACA,WAAO,MAAM,MAAM,KAAK,QAAQ,SAAS,iBAAiB,KAAK,aAAa;AAAA,EAC9E;AAAA,EACA,iBAAiB;AACf,SAAK,cAAc,iBAAiB,KAAK,UAAU,EAAE,SAAS,KAAK,IAAI,iBAAiB,CAAC,KAAK,IAAI,KAAK,IAAI,eAAe,CAAC,EAAE;AAAA,EAC/H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,YAAY,OAAO,KAAK,UAAU;AAChC,UAAM,QAAQ,KAAK,UAAU;AAC7B,UAAM,MAAM,MAAM;AAClB,QAAI,SAAgB,eAAe,OAAO,OAAY,QAAQ,GAAG,MAAM,QAAQ,CAAC,CAAC;AACjF,QAAI,aAAa,MAAM,KAAK,IAAI,OAAO,OAAO,MAAM,CAAC,CAAC;AACtD,aAAgB,eAAe,OAAO,OAAY,QAAQ,GAAG,IAAI,QAAQ,CAAC,CAAC;AAC3E,QAAI,WAAW,MAAM,OAAO,KAAK;AACjC,QAAI,OAAO,SAAS,KAAK;AACvB,iBAAW,MAAM,MAAM,CAAC,IAAI,KAAK,aAAa;AAAA,IAChD;AACA,SAAK,aAAa,YAAY,UAAU,QAAQ;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,aAAa,OAAO,KAAK,UAAU;AACjC,UAAMK,OAAM,KAAK,WAAW,OAAO,CAAC;AACpC,UAAMC,OAAM,KAAK,WAAW,OAAO,CAAC;AACpC,YAAc,WAAW,OAAOD,MAAKC,IAAG;AACxC,UAAY,WAAW,KAAKD,MAAKC,IAAG;AACpC,SAAK,KAAK,KAAK,gBAAgB,KAAK,GAAG,KAAK,gBAAgB,GAAG,GAAG,QAAQ;AAAA,EAC5E;AAAA,EACA,oBAAoB;AAClB,QAAI,YAAY,KAAK,WAAW,gBAAgB,CAAC;AACjD,QAAI,UAAU,KAAK,WAAW,gBAAgB,CAAC;AAC/C,QAAU,SAAS,SAAS,KAAW,SAAS,OAAO,GAAG;AACxD,UAAI,KAAK,oBAAoB;AAC3B,aAAK,qBAAqB;AAC1B,aAAK,gBAAgB;AAAA,MACvB;AACA,YAAM,OAAO,KAAK;AAClB,YAAM,MAAM,KAAK;AACjB,YAAM,WAAW,KAAK;AACtB,YAAM,QAAQ,KAAK,UAAU;AAC7B,YAAM,WAAW,KAAK,IAAI,UAAU;AACpC,YAAM,MAAM,MAAM;AAClB,YAAM,eAAe,KAAK,aAAa;AACvC,UAAI,aAAa,KAAK,aAAa,SAAS;AAC5C,UAAI,aAAa,GAAG;AAClB;AAAA,MACF;AACA,UAAI,WAAW,KAAK,aAAa,OAAO;AACxC,UAAI,WAAW,MAAM,GAAG;AACtB;AAAA,MACF;AACA,UAAI,WAAW,SAAS,WAAW,IAAI,KAAK,IAAI,SAAS,IAAI,iBAAiB,GAAG,IAAI,OAAO,gBAAgB;AAC5G,UAAI,YAAY,KAAK,IAAI,KAAK,KAAK,MAAM,WAAW,cAAc,QAAQ,CAAC;AAC3E,kBAAY,KAAK,IAAI,GAAG,SAAS;AACjC,mBAAa,KAAK,MAAM,aAAa,SAAS,IAAI;AAClD,WAAK,aAAa;AAClB,MAAO,KAAK,KAAK,WAAW,cAAY;AACtC,aAAK,gBAAgB,UAAU,KAAK;AAAA,MACtC,CAAC;AACD,MAAO,KAAK,KAAK,gBAAgB,cAAY;AAC3C,aAAK,gBAAgB,UAAU,KAAK;AAAA,MACtC,CAAC;AACD,UAAI,eAAe,UAAU,cAAc,UAAU,aAAa,gBAAgB,WAAW,eAAe;AAE5G,UAAI,eAAqB,eAAe,GAAG,cAAc,UAAU,KAAK,IAAI,eAAe,CAAC;AAC5F,YAAM,eAAe,KAAK,WAAW,cAAc;AACnD,UAAI,mBAAyB,oBAAoB,YAAY;AAC7D,UAAI,mBAAmB,cAAc;AACnC,uBAAe,OAAO,OAAO,CAAC,GAAG,YAAY;AAC7C,2BAAyB,oBAAoB,YAAY;AAAA,MAC3D;AACA,WAAK,oBAAoB;AACzB,YAAM,WAAW,aAAa;AAC9B,YAAM,UAAU,KAAK,IAAI,aAAa;AACtC,UAAI,YAAY,KAAK,IAAI;AACzB,UAAI,MAAM,CAAC,GAAG;AACZ,oBAAY,MAAM,CAAC;AAAA,MACrB;AAEA,UAAI,QAAc,KAAK,KAAK,WAAW,gBAAgB,CAAC,GAAG,UAAU,aAAa,OAAO,MAAM,SAAS;AACxG,YAAM,qBAAqB,SAAS,IAAI,oBAAoB;AAC5D,YAAM,mBAAmB,SAAS,IAAI,oBAAoB,kBAAkB;AAC5E,UAAI;AACJ,UAAI,gBAAgB;AACpB,UAAI;AACJ,UAAI,kBAAkB;AACpB,4BAAoB,KAAK,kBAAkB,YAAY;AACvD,wBAAsB,oBAAoB,iBAAiB;AAAA,MAC7D;AACA,UAAI,gBAAgB,KAAK,YAAY,OAAO,KAAK,WAAW,gBAAgB,KAAK,IAAI,kBAAkB,cAAc,KAAK,WAAW,OAAO,KAAK,CAAC;AAClJ,UAAI,cAAc,SAAS,GAAG;AAC5B,YAAI,IAAI;AACR,aAAK,KAAK;AACV,YAAI,gBAAgB,QAAQ,mBAAmB;AAC/C,cAAM,eAAqB,YAAY,QAAQ;AAE/C,YAAI,mBAAmB;AACrB,cAAI,QAAQ,MAAM,cAAc,CAAC,CAAC;AAClC,eAAK,cAAc,QAAQ,kBAAkB,OAAO,eAAe,iBAAiB;AAAA,QACtF;AACA,YAAI,cAAc,SAAS,WAAW,IAAI,SAAS,UAAU,IAAI;AACjE,QAAO,KAAK,eAAe,WAAS;AAClC,cAAI;AACJ,cAAI;AACJ,cAAI,KAAK,UAAU,SAAS,IAAI,GAAG;AACjC,uBAAW,IAAI,SAAS,MAAM,QAAW,CAAC,CAAC;AAC3C,iBAAK,WAAW,KAAK,QAAQ;AAC7B,iBAAK,gBAAgB,QAAQ;AAAA,UAC/B,OAAO;AACL,uBAAW,KAAK,UAAU,CAAC;AAAA,UAC7B;AACA,cAAIC,SAAQ,MAAM,KAAK;AACvB,cAAI,OAAO,IAAI,KAAKA,MAAK;AACzB,cAAI,WAAWA;AACf,cAAI,IAAI,cAAc,SAAS,GAAG;AAChC,uBAAW,MAAM,cAAc,IAAI,CAAC,CAAC;AAAA,UACvC,OAAO;AACL,wBAAY;AAAA,UACd;AACA,mBAAS,OAAO,SAASA,MAAK;AAC9B,mBAAS,OAAO,YAAY,QAAQ;AACpC,mBAAS,OAAO,SAAS,CAAC;AAC1B,mBAAS,OAAO,iBAAiB,MAAS;AAC1C,cAAI,SAAS,QAAQ,QAAQ;AAC7B,cAAI,gBAAgB,KAAK,IAAI,gBAAgB,KAAW,SAAS,aAAa,GAAG;AAC/E,gBAAI,YAAY,QAAQ;AACtB,kBAAU,YAAYA,QAAO,eAAe,cAAc,KAAK,QAAQ,GAAG;AACxE,yBAAS,KAAK,IAAI,yBAAyB,EAAE,QAAQ;AAAA,cACvD;AAAA,YACF;AAAA,UACF;AACA,eAAK,cAAc,UAAU,CAAC,CAAC;AAC/B,gBAAM,QAAQ,SAAS,IAAI,OAAO;AAClC,cAAI,OAAO;AACT,kBAAM,IAAI,QAAQ,KAAK,cAAc,OAAO,MAAM,MAAM,CAAC;AAAA,UAC3D;AACA,eAAK,gBAAgB,UAAU,IAAI;AACnC,cAAI,QAAQ,aAAa;AAEzB,cAAI,YAAY,QAAQ;AACtB,qBAAS,OAAO,iBAAiBA,MAAK;AAAA,UACxC;AACA,cAAI,kBAAkB;AACpB,gBAAI,YAAY,aAAa;AAC7B,gBAAI,aAAa,QAAQ;AACvB,0BAAY;AAAA,YACd;AACA,gBAAI,QAAQ,KAAK,aAAa,YAAY,QAAQ;AAEhD,kBAAI,gBAAsB,KAAKA,QAAO,WAAW,GAAG,IAAI,IAAU,YAAY,WAAW,KAAK,MAAM,SAAS,CAAC;AAC9G,kBAAIC,SAAQ,KAAK,aAAa,aAAa;AAC3C,8BAAgB,MAAMA,MAAK;AAC3B,kBAAI,iBAAiBD,QAAO;AAC1B,oBAAI,OAAO,MAAMC,SAAQ,CAAC;AAC1B,oBAAI,MAAM;AACR,kCAAgB;AAAA,gBAClB,OAAO;AACL,mCAAiB;AAAA,gBACnB;AAAA,cACF;AACA,uBAAS,OAAO,iBAAiB,aAAa;AAAA,YAChD;AACA,oBAAQ;AAAA,UACV;AACA,eAAK,iBAAiB,UAAU,KAAK;AACrC,cAAI,SAAS,kBAAkB;AAC7B,gBAAI,SAAS,WAAW,QAAQ,KAAK,KAAK;AACxC,kBAAI,gBAAgB,iBAAiB,IAAI,OAAO;AAChD,kBAAI,eAAe;AACjB,oBAAI,IAAI,MAAM,EAAE;AAChB,oBAAI,YAAY,cAAc,EAAE;AAChC,oBAAI,IAAI,YAAY,aAAa;AAC/B,sBAAI,QAAQ,KAAK,WAAW,kBAAkB,UAAU,YAAY;AACpE,sBAAI,OAAO;AACT,qBAAC,KAAK,MAAM,IAAI,OAAO,OAAO,QAAQ,OAAO,SAAS,SAAS,GAAG,WAAW,WAAW,KAAK;AAAA,kBAC/F;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAAA,UAEF;AAEA,cAAI,mBAAmB;AACrB,iBAAK,cAAcD,QAAO,UAAU,eAAe,iBAAiB;AAAA,UACtE;AACA;AACA,cAAI,SAAS,MAAM,WAAW,SAAS,GAAG;AACxC,+BAAmB;AAAA,UACrB;AACA,0BAAgBA;AAAA,QAClB,CAAC;AAAA,MACH;AACA,MAAO,KAAK,KAAK,QAAQ,YAAU;AACjC,YAAI,OAAO,QAAQ;AACjB,iBAAO,eAAe;AAAA,QACxB;AAAA,MACF,CAAC;AAAA,IACH;AACA,SAAK,aAAa;AAAA,EACpB;AAAA,EACA,WAAW,WAAW,WAAW,UAAU;AACzC,UAAM,WAAW,SAAS;AAC1B,UAAM,SAAS,UAAU,IAAI,SAAS,CAAC;AACvC,UAAM,SAAS,UAAU,IAAI,SAAS,CAAC;AACvC,QAAI,YAAY,QAAQ;AACtB,UAAI,IAAI,KAAK,MAAM,EAAE,QAAQ,KAAK,IAAI,KAAK,MAAM,EAAE,QAAQ,GAAG;AAC5D,eAAO;AAAA,MACT;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,cAAc,YAAY,UAAU,eAAe,cAAc;AAC/D,UAAM,eAAe,KAAK,IAAI,oBAAoB,KAAK,IAAI,aAAa,CAAC;AACzE,UAAM,YAAY,aAAa;AAC/B,QAAI,QAAQ,aAAmB,YAAY,WAAW,KAAK,MAAM,SAAS,CAAC;AAE3E,YAAc,KAAK,OAAO,WAAW,GAAG,KAAK,KAAK;AAClD,QAAI,WAAW,WAAW,gBAAgB;AAC1C,QAAI,qBAAqB,KAAK,YAAY,OAAO,UAAU,cAAc,KAAK;AAC9E,UAAM,QAAQ,KAAK,UAAU;AAC7B,IAAO,KAAK,oBAAoB,WAAS;AACvC,UAAI;AACJ,UAAI,KAAK,eAAe,SAAS,KAAK,KAAK,GAAG;AAC5C,wBAAgB,IAAI,SAAS,MAAM,QAAW,CAAC,CAAC;AAChD,aAAK,eAAe,KAAK,aAAa;AACtC,aAAK,gBAAgB,aAAa;AAAA,MACpC,OAAO;AACL,wBAAgB,KAAK,eAAe,KAAK,EAAE;AAAA,MAC7C;AACA,cAAQ,MAAM,KAAK;AACnB,oBAAc,OAAO,SAAS,KAAK;AACnC,oBAAc,OAAO,YAAY,QAAQ,aAAa;AACtD,oBAAc,OAAO,SAAS,KAAK;AACnC,WAAK,cAAc,eAAe,CAAC,OAAO,GAAG,IAAI;AACjD,YAAM,QAAQ,cAAc,IAAI,OAAO;AACvC,UAAI,OAAO;AACT,YAAI,KAAK,IAAI,UAAU,EAAE,IAAI,oBAAoB,GAAG;AAClD,cAAI,OAAO,IAAI,KAAK,KAAK;AACzB,cAAI,SAAS,aAAa,SAAS;AACnC,gBAAM,IAAI,QAAQ,KAAK,MAAM,cAAc,OAAO,MAAM,MAAM,CAAC;AAAA,QACjE,OAAO;AACL,gBAAM,WAAW,WAAW,KAAK;AAAA,QACnC;AAAA,MACF;AACA,WAAK,gBAAgB,eAAe,IAAI;AACxC,WAAK,iBAAiB,eAAe,CAAC;AACtC,WAAK;AAAA,IACP,CAAC;AAAA,EACH;AAAA,EACA,YAAY,OAAO,UAAU,UAAU,YAAY;AACjD,UAAM,QAAQ,CAAC;AACf,UAAM,WAAW,SAAS;AAC1B,UAAM,QAAQ,SAAS;AACvB,UAAM,MAAM,KAAK,MAAM,QAAQ;AAC/B,UAAM,eAAe,KAAK,WAAW,cAAc;AACnD,UAAM,OAAO,KAAK;AAClB,UAAM,QAAQ,KAAK,UAAU;AAC7B,QAAI,IAAI,QAAQ;AAChB,QAAI,gBAAgB;AACpB,QAAI,WAAiB,YAAY,UAAU,GAAG;AAC9C,QAAI,eAAqB,YAAY,UAAU,QAAQ,GAAG;AAC1D,QAAI,gBAAgB;AACpB,QAAI,YAAY,OAAO;AACrB,cAAQ;AAAA,IACV;AACA,WAAO,SAAS,UAAU;AAExB,cAAc,KAAK,OAAO,UAAU,OAAO,IAAI;AAC/C,UAAI,QAAQ,KAAK,aAAa,KAAK;AACnC,UAAI,YAAY,MAAM,KAAK;AAC3B,UAAI,YAAY,SAAS,aAAa,YAAY,OAAO;AACvD,YAAI,KAAK,SAAS,KAAK,GAAG;AACxB;AAAA,QACF;AACA,YAAI,KAAK,OAAO;AACd,cAAI,SAAS,gBAAgB,eAAe,GAAG;AAC7C,YAAO,KAAK,OAAO,KAAK;AAAA,UAC1B;AACA,cAAI;AAAA,QACN;AACA,iBAAS;AAET,gBAAc,KAAK,OAAO,UAAU,GAAG,IAAI;AAAA,MAC7C,OAAO;AACL,YAAI,YAAY,OAAO;AACrB,mBAAS,IAAI,OAAO,MAAM,MAAM,QAAQ,IAAI,KAAK,KAAK;AACpD,wBAAY,MAAM,CAAC;AACnB,gBAAI,aAAa,OAAO;AACtB,sBAAQ;AACR;AAAA,YACF;AAAA,UACF;AAAA,QACF;AACA,QAAO,KAAK,OAAO,KAAK;AACxB,iBAAS;AAET,gBAAc,KAAK,OAAO,UAAU,OAAO,IAAI;AAAA,MACjD;AACA,UAAI,SAAS,eAAe;AAC1B,iBAAS,eAAe;AAExB,gBAAc,KAAK,OAAO,UAAU,OAAO,IAAI;AAAA,MACjD;AACA,UAAI,SAAS,eAAe;AAC1B;AAAA,MACF;AACA,sBAAgB;AAAA,IAClB;AACA,WAAO;AAAA,EACT;AAAA,EACA,SAAS,MAAM;AACb,UAAM,SAAgB,eAAe,KAAK,UAAU,GAAG,UAAQ;AAC7D,aAAc,cAAc,MAAM,IAAI;AAAA,IACxC,CAAC;AACD,WAAO,OAAO;AAAA,EAChB;AAAA,EACA,UAAU,MAAM,OAAO,eAAe;AACpC,QAAI,QAAc,WAAW,KAAK,aAAa,IAAI,IAAI,OAAO,GAAG,KAAK,OAAO,SAAS,CAAC;AACvF,WAAO,KAAK,OAAO,KAAK;AAAA,EAC1B;AACF;AACA,OAAO,eAAe,iBAAiB,aAAa;AAAA,EAClD,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO;AACT,CAAC;AACD,OAAO,eAAe,iBAAiB,cAAc;AAAA,EACnD,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO,SAAS,WAAW,OAAO,CAAC,gBAAgB,SAAS,CAAC;AAC/D,CAAC;;;ACjhBM,IAAM,eAAN,cAA2B,UAAU;AAAA,EAC1C,cAAc;AACZ,UAAM,GAAG,SAAS;AAClB,WAAO,eAAe,MAAM,gBAAgB;AAAA,MAC1C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,uBAAuB;AAAA,MACjD,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,qBAAqB;AAAA,MAC/C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EACA,YAAY;AACV,SAAK,UAAU,YAAmB,UAAU,KAAK,UAAU,WAAW,CAAC,MAAM,CAAC;AAC9E,UAAM,UAAU;AAAA,EAClB;AAAA,EACA,cAAcE,MAAKC,MAAK,WAAW,YAAY;AAC7C,QAAI;AACJ,UAAM,oBAAoB,KAAK,qBAAqB;AACpD,UAAM,WAAW,KAAK,IAAI,UAAU;AAEpC,SAAK,OAAO,gBAAgB,CAAC;AAC7B,QAAI,YAAY,iBAAiB,YAAY,YAAY,YAAY,YAAY,YAAY,QAAQ;AAEnG,UAAI,aAAa,GAAG;AAClB,oBAAY;AAAA,MACd;AACA,kBAAY,KAAK,MAAM,SAAS;AAGhC,UAAI,aAAaA,OAAMD;AAEvB,UAAI,eAAe,GAAG;AACpB,qBAAa,KAAK,IAAIC,IAAG;AAAA,MAC3B;AACA,UAAI,OAAO,aAAa;AACxB,UAAI,WAAW,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,CAAC;AACxC,UAAI,cAAc;AAClB,UAAI,YAAY,QAAQ;AACtB,mBAAW,CAAC,IAAI,IAAI,GAAG,GAAG,GAAG,CAAC;AAAA,MAChC;AACA,eAAS,WAAW,UAAU;AAC5B,YAAI,aAAa,UAAU,WAAW;AACpC,wBAAc;AACd;AAAA,QACF;AAAA,MACF;AACA,UAAI,QAAQ,KAAK,MAAMA,OAAMD,QAAO,cAAc,SAAS;AAC3D,UAAI,WAAW,KAAK,IAAI,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK;AAChD,UAAI,QAAQ,KAAK,IAAI,IAAI,KAAK,MAAM,QAAQ,CAAC,IAAI;AACjD,UAAI,eAAe,QAAQ;AAE3B,UAAIE,WAAgB,QAAQ,UAAU,YAAY;AAClD,cAAQA,WAAU;AAClB,aAAO,cAAc;AACrB,MAAAF,OAAM,KAAK,MAAMA,OAAM,IAAI,IAAI;AAC/B,MAAAC,OAAM,KAAK,KAAKA,OAAM,IAAI,IAAI;AAa9B,mBAAa;AAAA,QACX,KAAKD;AAAA,QACL,KAAKC;AAAA,QACL;AAAA,MACF;AAAA,IACF,OAAO;AACL,mBAAa,MAAM,cAAcD,MAAKC,MAAK,WAAW,UAAU;AAAA,IAClE;AAEA,SAAK,cAAc,kBAAkB,kBAAkB,UAAU,WAAW,MAAM,WAAW,KAAK,QAAQ,CAAC;AAC3G,WAAO;AAAA,EACT;AAAA,EACA,YAAY,OAAO;AACjB,UAAM,YAAY,KAAK,qBAAqB;AAC5C,WAAO,UAAU,OAAO,OAAO,KAAK,WAAW,gBAAgB,GAAG,KAAK,IAAI,UAAU,CAAC;AAAA,EACxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,eAAe,UAAU,iBAAiB;AACxC,UAAM,YAAY,KAAK,qBAAqB;AAC5C,UAAM,gBAAgB,KAAK,IAAI,yBAAyB,CAAC;AACzD,UAAM,WAAW,KAAK,WAAW,qBAAqB,CAAC,IAAI;AAC3D,UAAM,QAAc,MAAM,KAAK,gBAAgB,QAAQ,GAAG,QAAQ;AAClE,WAAO,UAAU,OAAO,OAAO,KAAK,WAAW,gBAAgB,GAAG,KAAK,IAAI,UAAU,CAAC;AAAA,EACxF;AACF;AACA,OAAO,eAAe,cAAc,aAAa;AAAA,EAC/C,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO;AACT,CAAC;AACD,OAAO,eAAe,cAAc,cAAc;AAAA,EAChD,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO,UAAU,WAAW,OAAO,CAAC,aAAa,SAAS,CAAC;AAC7D,CAAC;;;AC1HM,IAAM,aAAN,cAAyB,OAAO;AAAA,EACrC,cAAc;AACZ,UAAM,GAAG,SAAS;AAIlB,WAAO,eAAe,MAAM,QAAQ;AAAA,MAClC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EACA,iBAAiB;AACf,UAAM,eAAe;AACrB,UAAM,SAAS,KAAK,IAAI,QAAQ;AAChC,QAAI,KAAK,QAAQ,QAAQ,GAAG;AAC1B,UAAI,QAAQ;AACV,eAAO,OAAO;AAAA,UACZ,UAAU;AAAA,UACV,MAAM;AAAA,QACR,CAAC;AACD,aAAK,WAAW,KAAK,MAAM;AAAA,MAC7B;AAAA,IACF;AACA,QAAI,KAAK,QAAQ,UAAU,GAAG;AAC5B,YAAM,WAAW,OAAO;AACxB,UAAI,KAAK,QAAQ,UAAU,UAAU;AACnC,aAAK,KAAK,iBAAiB,QAAQ;AAAA,MACrC;AAAA,IACF;AAAA,EACF;AAAA,EACA,WAAW;AACT,UAAM,OAAO,KAAK;AAClB,QAAI,MAAM;AACR,MAAQE,MAAK,KAAK,UAAU,CAAC,KAAK,WAAW;AAC3C,YAAI,OAAO,OAAO,KAAK,KAAK;AAC1B,iBAAO,KAAK,SAAS,GAAG;AAAA,QAC1B;AAAA,MACF,CAAC;AAAA,IACH;AACA,UAAM,SAAS;AAAA,EACjB;AACF;AACA,OAAO,eAAe,YAAY,aAAa;AAAA,EAC7C,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO;AACT,CAAC;AACD,OAAO,eAAe,YAAY,cAAc;AAAA,EAC9C,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO,OAAO,WAAW,OAAO,CAAC,WAAW,SAAS,CAAC;AACxD,CAAC;;;ACvDM,IAAM,YAAN,cAAwB,MAAM;AAAA,EACnC,cAAc;AACZ,UAAM,GAAG,SAAS;AAClB,WAAO,eAAe,MAAM,eAAe;AAAA,MACzC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC;AAAA,IACV,CAAC;AAAA,EACH;AACF;AACA,OAAO,eAAe,WAAW,aAAa;AAAA,EAC5C,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO;AACT,CAAC;AACD,OAAO,eAAe,WAAW,cAAc;AAAA,EAC7C,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO,MAAM,WAAW,OAAO,CAAC,UAAU,SAAS,CAAC;AACtD,CAAC;;;ACvBM,IAAM,kBAAN,cAA8B,YAAY;AAAA,EAC/C,cAAc;AACZ,UAAM,GAAG,SAAS;AAClB,WAAO,eAAe,MAAM,eAAe;AAAA,MACzC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC;AAAA,IACV,CAAC;AAAA,EACH;AACF;AACA,OAAO,eAAe,iBAAiB,aAAa;AAAA,EAClD,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO;AACT,CAAC;AACD,OAAO,eAAe,iBAAiB,cAAc;AAAA,EACnD,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO,YAAY,WAAW,OAAO,CAAC,gBAAgB,SAAS,CAAC;AAClE,CAAC;;;ACrBM,IAAM,WAAN,cAAuB,KAAK;AAAA,EACjC,cAAc;AACZ,UAAM,GAAG,SAAS;AAClB,WAAO,eAAe,MAAM,eAAe;AAAA,MACzC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC;AAAA,IACV,CAAC;AAAA,EACH;AACF;AACA,OAAO,eAAe,UAAU,aAAa;AAAA,EAC3C,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO;AACT,CAAC;AACD,OAAO,eAAe,UAAU,cAAc;AAAA,EAC5C,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO,KAAK,WAAW,OAAO,CAAC,SAAS,SAAS,CAAC;AACpD,CAAC;;;ACfM,IAAM,eAAN,cAA2B,SAAS;AAAA,EACzC,cAAc;AACZ,UAAM,GAAG,SAAS;AAElB,WAAO,eAAe,MAAM,eAAe;AAAA,MACzC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,UAAU;AAAA,MACpC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,QAAQ;AAAA,MAClC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,aAAa;AAAA,MACvC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,YAAY;AAAA,MACtC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AAID,WAAO,eAAe,MAAM,SAAS;AAAA,MACnC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,OAAO;AAAA,MACjC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,OAAO;AAAA,MACjC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,mBAAmB;AAAA,MAC7C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,cAAc;AAAA,MACxC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,YAAY;AAAA,MACtC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AAQD,WAAO,eAAe,MAAM,SAAS;AAAA,MACnC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,KAAK,YAAY,IAAI,aAAa,SAAS,IAAI,CAAC,CAAC,GAAG,MAAM,SAAS,KAAK,KAAK,OAAO;AAAA,QACzF,WAAkB,UAAU,KAAK,MAAM,SAAS,IAAI,aAAa,CAAC,CAAC,GAAG,KAAK,IAAI,aAAa,CAAC,CAAC,CAAC;AAAA,MACjG,GAAG,CAAC,KAAK,MAAM,QAAQ,CAAC,CAAC,CAAC;AAAA,IAC5B,CAAC;AAQD,WAAO,eAAe,MAAM,QAAQ;AAAA,MAClC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,KAAK,YAAY,IAAI,aAAa,SAAS,IAAI,CAAC,CAAC,GAAG,MAAM,KAAK,KAAK,KAAK,OAAO;AAAA,QACrF,WAAkB,UAAU,KAAK,KAAK,SAAS,IAAI,aAAa,CAAC,CAAC,GAAG,KAAK,IAAI,aAAa,CAAC,CAAC,CAAC;AAAA,MAChG,GAAG,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;AAAA,IAC3B,CAAC;AAQD,WAAO,eAAe,MAAM,aAAa;AAAA,MACvC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,KAAK,YAAY,IAAI,aAAa,SAAS,IAAI,CAAC,CAAC,GAAG,MAAM,SAAS,KAAK,KAAK,OAAO;AAAA,QACzF,WAAkB,UAAU,KAAK,UAAU,SAAS,IAAI,aAAa,CAAC,QAAQ,MAAM,CAAC,GAAG,KAAK,IAAI,aAAa,CAAC,CAAC,CAAC;AAAA,MACnH,GAAG,CAAC,KAAK,UAAU,QAAQ,CAAC,CAAC,CAAC;AAAA,IAChC,CAAC;AAQD,WAAO,eAAe,MAAM,UAAU;AAAA,MACpC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,KAAK,YAAY,IAAI,aAAa,SAAS,IAAI,CAAC,CAAC,GAAG,MAAM,UAAU,KAAK,KAAK,OAAO;AAAA,QAC1F,WAAkB,UAAU,KAAK,OAAO,SAAS,IAAI,aAAa,CAAC,CAAC,GAAG,KAAK,IAAI,aAAa,CAAC,CAAC,CAAC;AAAA,MAClG,GAAG,CAAC,KAAK,OAAO,QAAQ,CAAC,CAAC,CAAC;AAAA,IAC7B,CAAC;AAID,WAAO,eAAe,MAAM,QAAQ;AAAA,MAClC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AAID,WAAO,eAAe,MAAM,SAAS;AAAA,MACnC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAIA,SAAS,UAAU,WAAW;AAC5B,UAAM,OAAO,KAAK,MAAM,KAAK;AAC7B,SAAK,aAAa,QAAQ;AAC1B,aAAS,OAAO,QAAQ,IAAI;AAC5B,SAAK,IAAI,aAAoB,UAAU,KAAK,IAAI,WAAW,GAAG,SAAS,CAAC;AACxE,SAAK,KAAK,gBAAgB,SAAS,KAAK,IAAI;AAC5C,SAAK,MAAM,KAAK,IAAI;AACpB,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIA,SAAS,UAAU,WAAW;AAC5B,UAAM,OAAO,KAAK,KAAK,KAAK;AAC5B,SAAK,aAAa,QAAQ;AAC1B,aAAS,OAAO,QAAQ,IAAI;AAC5B,SAAK,IAAI,aAAoB,UAAU,KAAK,IAAI,WAAW,GAAG,SAAS,CAAC;AACxE,SAAK,KAAK,cAAc,SAAS,KAAK,IAAI;AAC1C,SAAK,KAAK,KAAK,IAAI;AACnB,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIA,aAAa,UAAU,WAAW;AAChC,UAAM,WAAW,KAAK,UAAU,KAAK;AACrC,aAAS,aAAa,QAAQ;AAC9B,aAAS,IAAI,aAAoB,UAAU,SAAS,IAAI,WAAW,GAAG,SAAS,CAAC;AAChF,SAAK,KAAK,cAAc,SAAS,KAAK,QAAQ;AAC9C,aAAS,OAAO,YAAY,QAAQ;AACpC,SAAK,UAAU,KAAK,QAAQ;AAC5B,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIA,UAAU,UAAU,WAAW;AAC7B,UAAM,QAAQ,KAAK,OAAO,KAAK;AAC/B,UAAM,IAAI,aAAoB,UAAU,MAAM,IAAI,WAAW,GAAG,SAAS,CAAC;AAC1E,SAAK,KAAK,gBAAgB,SAAS,UAAU,OAAO,CAAC;AACrD,UAAM,aAAa,QAAQ;AAC3B,aAAS,OAAO,SAAS,KAAK;AAC9B,SAAK,OAAO,KAAK,KAAK;AACtB,WAAO;AAAA,EACT;AAAA,EACA,aAAa;AACX,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIA,YAAY;AACV,WAAO,KAAK,WAAW,IAAI,KAAK,IAAI,mBAAmB,EAAE;AAAA,EAC3D;AAAA,EACA,mBAAmB;AAAA,EAAC;AAAA,EACpB,YAAY;AACV,UAAM,UAAU;AAChB,SAAK,IAAI,cAAc,KAAK;AAC5B,UAAM,QAAQ,KAAK;AACnB,QAAI,OAAO;AACT,WAAK,WAAW,KAAK,MAAM,OAAO,GAAG,eAAe,WAAS;AAC3D,aAAK,iBAAiB,KAAK;AAAA,MAC7B,CAAC,CAAC;AACF,WAAK,WAAW,KAAK,MAAM,OAAO,GAAG,mBAAmB,WAAS;AAC/D,aAAK,eAAe,KAAK;AAAA,MAC3B,CAAC,CAAC;AACF,WAAK,WAAW,KAAK,MAAM,OAAO,GAAG,qBAAqB,WAAS;AACjE,aAAK,iBAAiB,KAAK;AAAA,MAC7B,CAAC,CAAC;AAAA,IACJ;AAAA,EACF;AAAA,EACA,iBAAiB;AACf,UAAM,eAAe;AACrB,QAAI,KAAK,QAAQ,iBAAiB,GAAG;AACnC,WAAK,KAAK,OAAO,KAAK,cAAc,MAAM;AACxC,aAAK,KAAK,cAAc;AAAA,MAC1B,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EACA,WAAW;AACT,UAAM,SAAS;AACf,QAAI,KAAK,QAAQ,KAAK,GAAG;AACvB,YAAM,QAAQ,KAAK;AACnB,UAAI,OAAO;AACT,cAAM,kBAAkB,KAAK,KAAK;AAClC,cAAM,MAAM,KAAK,IAAI,KAAK;AAC1B,YAAI,OAAO,QAAQ;AACjB,0BAAgB,SAAS,KAAK,KAAK;AAAA,QACrC,WAAW,OAAO,QAAQ;AACxB,0BAAgB,SAAS,YAAY,KAAK;AAAA,QAC5C;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,iBAAiB,OAAO;AACtB,SAAK,kBAAkB,KAAK,QAAQ,MAAM,KAAK;AAC/C,UAAM,OAAO,KAAK;AAClB,SAAK,aAAa,KAAK,IAAI,OAAO;AAClC,SAAK,WAAW,KAAK,IAAI,KAAK;AAAA,EAChC;AAAA,EACA,eAAe,QAAQ;AACrB,SAAK,kBAAkB;AAAA,EACzB;AAAA,EACA,iBAAiB,OAAO;AACtB,UAAM,YAAY,KAAK;AACvB,QAAI,WAAW;AACb,YAAMC,SAAQ,KAAK,QAAQ,MAAM,KAAK;AACtC,YAAM,YAAY,KAAK;AACvB,YAAM,UAAU,KAAK;AACrB,YAAM,QAAQ,KAAK,QAAQA,QAAO,SAAS,IAAI,KAAK,IAAI,GAAG,UAAU,SAAS,IAAI,IAAI,KAAK,IAAI,kBAAkB,CAAC;AAClH,WAAK,KAAK,KAAK,YAAY,OAAO,UAAU,OAAO,CAAC;AAAA,IACtD;AAAA,EACF;AAAA,EACA,QAAQ,SAAS,SAAS;AACxB,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,qBAAqB,UAAU;AAC7B,QAAI,KAAK,WAAW;AAClB,cAAQ,KAAK,OAAO,YAAY,KAAK;AAAA,IACvC,OAAO;AACL,cAAQ,WAAW,KAAK,UAAU,KAAK;AAAA,IACzC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,oBAAoB,UAAU;AAAA,EAAC;AAAA,EAC/B,cAAc;AACZ,SAAK,UAAU;AACf,SAAK,SAAS;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAIA,eAAe,UAAU;AACvB,UAAM,QAAQ,KAAK,UAAU;AAC7B,UAAM,MAAM,KAAK,QAAQ;AACzB,eAAW,YAAY,MAAM;AAC7B,QAAI,CAAC,KAAK,IAAI,UAAU,GAAG;AACzB,iBAAW,QAAQ;AAAA,IACrB,OAAO;AACL,iBAAW,MAAM;AAAA,IACnB;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIA,iBAAiB,UAAU;AACzB,UAAM,QAAQ,KAAK,UAAU;AAC7B,UAAM,MAAM,KAAK,QAAQ;AACzB,QAAI,CAAC,KAAK,IAAI,UAAU,GAAG;AACzB,iBAAW,WAAW;AAAA,IACxB,OAAO;AACL,iBAAW,MAAM;AAAA,IACnB;AACA,eAAW,YAAY,MAAM;AAC7B,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIA,YAAY,UAAU;AACpB,QAAI,KAAK,IAAI,UAAU,GAAG;AACxB,aAAO,IAAI;AAAA,IACb;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIA,YAAY;AAAA,EAAC;AAAA,EACb,iBAAiB,QAAQ,UAAU,aAAa,aAAa;AAC3D,QAAI,OAAO,KAAK;AAChB,UAAM,QAAQ,KAAK,IAAI,SAAS,CAAC;AACjC,UAAM,MAAM,KAAK,IAAI,OAAO,CAAC;AAC7B,QAAI,eAAe,SAAS,MAAM,UAAU,cAAc;AAC1D,QAAI,aAAa,SAAS,MAAM,UAAU,cAAc;AACxD,QAAI,WAAW,gBAAgB,WAAW,YAAY;AACpD,aAAO,WAAW,WAAW,KAAK;AAAA,IACpC,OAAO;AACL,aAAO,WAAW,WAAW,IAAI;AAAA,IACnC;AAAA,EACF;AAAA,EACA,iBAAiB,SAASA,QAAO;AAC/B,UAAM,QAAQ,KAAK;AACnB,QAAI,OAAO;AACT,cAAQ,IAAI,WAAW,KAAK,SAAS,SAASA,MAAK,CAAC;AACpD,UAAI,CAAC,MAAM,OAAOA,MAAK,GAAG;AACxB,gBAAQ,KAAK;AAAA,MACf;AAAA,IACF;AAAA,EACF;AAAA,EACA,cAAc;AAAA,EAAC;AACjB;AACA,OAAO,eAAe,cAAc,aAAa;AAAA,EAC/C,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO;AACT,CAAC;AACD,OAAO,eAAe,cAAc,cAAc;AAAA,EAChD,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO,SAAS,WAAW,OAAO,CAAC,aAAa,SAAS,CAAC;AAC5D,CAAC;;;AClXM,IAAM,gBAAN,cAA4B,aAAa;AAAA,EAC9C,cAAc;AACZ,UAAM,GAAG,SAAS;AAClB,WAAO,eAAe,MAAM,SAAS;AAAA,MACnC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,UAAU,IAAI,KAAK,OAAO;AAAA,QAC/B,OAAO;AAAA,QACP,YAAY;AAAA,QACZ,WAAW,CAAC,QAAQ,KAAK,OAAO;AAAA,MAClC,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EACA,YAAY;AACV,SAAK,UAAU,YAAmB,UAAU,KAAK,UAAU,WAAW,CAAC,YAAY,GAAG,CAAC;AACvF,UAAM,UAAU;AAChB,SAAK,cAAc,UAAU,GAAG;AAChC,UAAM,eAAe,KAAK,KAAK;AAC/B,iBAAa,IAAI,UAAU,IAAI;AAC/B,iBAAa,IAAI,SAAS,CAAC;AAC3B,iBAAa,IAAI,QAAQ,CAAC,SAAS,aAAa;AAC9C,cAAQ,OAAO,GAAG,CAAC;AACnB,cAAQ,OAAO,GAAG,SAAS,OAAO,CAAC;AAAA,IACrC,CAAC;AACD,SAAK,IAAI,QAAQ,CAAC,SAAS,aAAa;AACtC,cAAQ,OAAO,GAAG,CAAC;AACnB,cAAQ,OAAO,SAAS,MAAM,GAAG,CAAC;AAAA,IACpC,CAAC;AAAA,EACH;AAAA,EACA,WAAW;AACT,UAAM,SAAS;AACf,UAAM,OAAO,KAAK;AAClB,SAAK,WAAW,WAAW,WAAW,CAAC,KAAK,IAAI,QAAQ,CAAC;AACzD,SAAK,WAAW,IAAI,KAAK,IAAK;AAC9B,UAAM,WAAW;AACjB,UAAM,SAAS;AACf,QAAI,KAAK,QAAQ,QAAQ,KAAK,KAAK,QAAQ,MAAM,GAAG;AAClD,YAAM,QAAQ,KAAK;AACnB,YAAM,eAAe,KAAK;AAC1B,UAAI,KAAK,IAAI,MAAM,GAAG;AACpB,aAAK,OAAO,MAAM;AAAA,MACpB,OAAO;AACL,aAAK,UAAU,MAAM;AAAA,MACvB;AACA,UAAI,OAAO;AACT,YAAI,KAAK,IAAI,QAAQ,GAAG;AACtB,gBAAM,WAAW,MAAM,iBAAiB;AACxC,cAAI,SAAS,QAAQ,IAAI,KAAK,IAAI;AAChC,qBAAS,YAAY,GAAG,IAAI;AAAA,UAC9B;AACA,eAAK,OAAO,QAAQ;AACpB,uBAAa,UAAU,IAAI;AAAA,QAC7B,OAAO;AACL,gBAAM,WAAW,MAAM,oBAAoB;AAC3C,cAAI,SAAS,QAAQ,IAAI,KAAK,IAAI;AAChC,qBAAS,UAAU,IAAI;AAAA,UACzB;AACA,eAAK,UAAU,QAAQ;AACvB,uBAAa,UAAU,MAAM,CAAC;AAAA,QAChC;AACA,aAAK,WAAW,aAAa;AAC7B,aAAK,OAAO,KAAK,WAAS;AACxB,gBAAM,aAAa;AAAA,QACrB,CAAC;AACD,aAAK,KAAK,iBAAiB;AAAA,MAC7B;AACA,WAAK,cAAc;AAAA,IACrB;AACA,SAAK,MAAM,WAAW,UAAU,KAAK,gBAAgB,OAAO,CAAC;AAAA,EAC/D;AAAA,EACA,QAAQ,QAAQC,SAAQ;AACtB,YAAQA,QAAO,IAAI,OAAO,KAAK,KAAK,MAAM;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA,EAIA,eAAe,UAAU;AACvB,UAAM,QAAQ,KAAK,UAAU;AAC7B,UAAM,MAAM,KAAK,QAAQ;AACzB,gBAAY,KAAK;AACjB,eAAW,YAAY,MAAM,SAAS,KAAK;AAC3C,QAAI,CAAC,KAAK,IAAI,UAAU,GAAG;AACzB,iBAAW,QAAQ;AAAA,IACrB,OAAO;AACL,iBAAW,MAAM;AAAA,IACnB;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIA,iBAAiB,UAAU;AACzB,UAAM,QAAQ,KAAK,UAAU;AAC7B,UAAM,MAAM,KAAK,QAAQ;AACzB,QAAI,CAAC,KAAK,IAAI,UAAU,GAAG;AACzB,iBAAW,WAAW;AAAA,IACxB,OAAO;AACL,iBAAW,MAAM;AAAA,IACnB;AACA,eAAW,YAAY,MAAM,SAAS,KAAK;AAC3C,gBAAY,KAAK;AACjB,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIA,YAAY;AACV,UAAM,OAAO,KAAK;AAClB,UAAM,SAAS,KAAK;AACpB,QAAI,QAAQ;AACV,YAAM,IAAI,OAAO,WAAW;AAC5B,WAAK,MAAM,KAAK,WAAW,IAAI;AAC/B,WAAK,OAAO,KAAK,EAAE,IAAI,OAAO,IAAI,eAAe,CAAC,KAAK;AAAA,IACzD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,mBAAmB;AACjB,UAAM,OAAO,KAAK;AAClB,UAAM,IAAI,KAAK,EAAE,IAAW,gBAAgB,KAAK,IAAI,WAAW,CAAC,GAAG,KAAK,MAAM,CAAC,IAAI,KAAK,OAAO,IAAI,eAAe,CAAC;AACpH,SAAK,cAAc,IAAI,KAAK,CAAC;AAC7B,SAAK,iBAAiB,IAAI,KAAK,CAAC;AAChC,SAAK,iBAAiB,IAAI,KAAK,KAAK,EAAE,CAAC;AACvC,UAAM,QAAQ,KAAK;AACnB,QAAI,OAAO;AACT,YAAM,gBAAgB,MAAM;AAC5B,YAAM,aAAa,KAAK;AACxB,UAAI,QAAQ,KAAK,IAAI,cAAc,CAAC;AACpC,UAAIC,KAAI,KAAK,EAAE,IAAI;AACnB,YAAM,SAAS,KAAK;AACpB,UAAI,QAAQ;AACV,QAAAA,MAAK,OAAO,IAAI,eAAe,CAAC;AAAA,MAClC;AACA,UAAI,WAAW,SAAS,SAAS,GAAG;AAClC,gBAAQ,KAAK,WAAW,MAAM;AAC9B,aAAK,IAAI,cAAc,QAAQ,CAAC;AAAA,MAClC,OAAO;AACL,mBAAW,IAAI,SAAS,KAAK;AAAA,MAC/B;AACA,iBAAW,OAAO;AAAA,QAChB,GAAGA;AAAA,QACH,GAAG;AAAA,QACH,QAAQ,cAAc,OAAO,IAAI;AAAA,MACnC,CAAC;AAAA,IACH;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,cAAc;AACZ,UAAM,YAAY;AAClB,UAAM,OAAO,KAAK;AAClB,QAAI,KAAK,IAAI,OAAO,KAAK,MAAM;AAC7B,WAAK,IAAI,SAAS,IAAI;AAAA,IACxB;AACA;AACA,UAAM,iBAAiB,KAAK,MAAM;AAClC,SAAK,IAAI,UAAU,cAAc;AACjC,SAAK,gBAAgB,IAAI,SAAS,IAAI;AACtC,SAAK,WAAW,OAAO;AAAA,MACrB,QAAQ;AAAA,IACV,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAIA,aAAa;AACX,WAAO,KAAK,KAAK,MAAM;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gBAAgB,UAAU;AACxB,WAAO;AAAA,MACL,GAAG,KAAK,qBAAqB,QAAQ;AAAA,MACrC,GAAG;AAAA,IACL;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,WAAW,MAAM,UAAU,aAAa,OAAO;AAC7C,QAAI,MAAM;AACR,UAAI,CAAO,SAAS,QAAQ,GAAG;AAC7B,mBAAW;AAAA,MACb;AACA,UAAI,WAAW;AACf,UAAU,SAAS,KAAK,KAAK,QAAQ,GAAG;AACtC,mBAAW,KAAK,IAAI,iBAAiB,QAAQ;AAAA,MAC/C,OAAO;AACL,mBAAW,KAAK,IAAI,YAAY,QAAQ;AAAA,MAC1C;AACA,UAAU,SAAS,WAAW,KAAK,eAAe,UAAU;AAC1D,mBAAW,YAAY,cAAc,YAAY;AAAA,MACnD;AACA,WAAK,IAAI,KAAK,KAAK,qBAAqB,QAAQ,CAAC;AACjD,UAAI,SAAS,KAAK,IAAI,UAAU,CAAC;AACjC,YAAM,SAAS,KAAK,IAAI,UAAU,KAAK,IAAI,UAAU,KAAK,CAAC;AAC3D,UAAI,KAAK,IAAI,UAAU,GAAG;AACxB,aAAK,IAAI,KAAK,IAAI;AAClB,YAAI,CAAC,QAAQ;AACX,oBAAU;AAAA,QACZ;AAAA,MACF,OAAO;AACL,aAAK,IAAI,KAAK,CAAC;AACf,YAAI,QAAQ;AACV,oBAAU;AAAA,QACZ;AAAA,MACF;AACA,WAAK,IAAI,QAAQ,aAAW;AAC1B,gBAAQ,OAAO,GAAG,CAAC;AACnB,gBAAQ,OAAO,GAAG,MAAM;AAAA,MAC1B,CAAC;AACD,WAAK,iBAAiB,MAAM,UAAU,KAAK,IAAI,eAAe,CAAC,GAAG,KAAK,IAAI,eAAe,CAAC,CAAC;AAAA,IAC9F;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,YAAY,OAAO,UAAU,aAAa,OAAO;AAC/C,QAAI,OAAO;AACT,UAAI,WAAW;AACf,UAAU,SAAS,KAAK,KAAK,QAAQ,GAAG;AACtC,mBAAW,MAAM,IAAI,iBAAiB,QAAQ;AAAA,MAChD,OAAO;AACL,mBAAW,MAAM,IAAI,YAAY,QAAQ;AAAA,MAC3C;AACA,UAAI,CAAO,SAAS,QAAQ,GAAG;AAC7B,mBAAW;AAAA,MACb;AACA,YAAM,SAAS,MAAM,IAAI,UAAU,KAAK,IAAI,UAAU,KAAK,CAAC;AAC5D,YAAM,WAAW,KAAK,IAAI,UAAU;AACpC,UAAI,UAAU;AACZ,YAAI,CAAC,QAAQ;AACX,gBAAM,IAAI,YAAY,UAAU;AAChC,gBAAM,IAAI,KAAK,IAAI;AAAA,QACrB,OAAO;AACL,gBAAM,IAAI,YAAY,UAAU;AAChC,gBAAM,IAAI,KAAK,CAAC;AAAA,QAClB;AAAA,MACF,OAAO;AACL,YAAI,CAAC,QAAQ;AACX,gBAAM,IAAI,KAAK,MAAS;AACxB,gBAAM,IAAI,YAAY,UAAU;AAAA,QAClC,OAAO;AACL,gBAAM,IAAI,KAAK,CAAC;AAChB,gBAAM,IAAI,YAAY,UAAU;AAAA,QAClC;AAAA,MACF;AACA,UAAU,SAAS,WAAW,KAAK,eAAe,UAAU;AAC1D,mBAAW,YAAY,cAAc,YAAY;AAAA,MACnD;AACA,YAAM,IAAI,KAAK,KAAK,qBAAqB,QAAQ,CAAC;AAClD,WAAK,iBAAiB,OAAO,UAAU,MAAM,IAAI,eAAe,CAAC,GAAG,MAAM,IAAI,eAAe,CAAC,CAAC;AAAA,IACjG;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,WAAW,MAAM,UAAU,aAAa;AACtC,QAAI,MAAM;AACR,UAAI,CAAO,SAAS,QAAQ,GAAG;AAC7B,mBAAW;AAAA,MACb;AACA,UAAI,WAAW,KAAK,IAAI,YAAY,GAAG;AACvC,UAAU,SAAS,WAAW,KAAK,eAAe,UAAU;AAC1D,mBAAW,YAAY,cAAc,YAAY;AAAA,MACnD;AACA,WAAK,IAAI,KAAK,KAAK,qBAAqB,QAAQ,CAAC;AACjD,WAAK,iBAAiB,MAAM,UAAU,GAAG,CAAC;AAAA,IAC5C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,aAAa,QAAQ,UAAU,aAAa;AAC1C,QAAI,QAAQ;AACV,YAAM,SAAS,OAAO,IAAI,QAAQ;AAClC,UAAI,QAAQ;AACV,YAAI,CAAO,SAAS,QAAQ,GAAG;AAC7B,qBAAW;AAAA,QACb;AACA,YAAI,WAAW,OAAO,IAAI,YAAY,GAAG;AACzC,YAAU,SAAS,WAAW,KAAK,eAAe,UAAU;AAC1D,qBAAW,YAAY,cAAc,YAAY;AAAA,QACnD;AACA,YAAI,iBAAiB,KAAK,KAAK,kBAAkB,UAAU,QAAQ;AACnE,YAAI,iBAAiB,KAAK,KAAK,SAAS,cAAc;AACtD,YAAI,IAAI;AACR,YAAI,KAAK,IAAI,UAAU,GAAG;AACxB,cAAI;AAAA,QACN;AACA,YAAI,OAAO,IAAI,SAAS,GAAG;AACzB,cAAI,gBAAgB;AAClB,gBAAI,iBAAiB,eAAe,IAAI,QAAQ;AAChD,gBAAI,gBAAgB;AAClB,qBAAO,IAAI,KAAK,eAAe,EAAE,IAAI,eAAe,OAAO,IAAI,CAAC;AAAA,YAClE;AAAA,UACF,OAAO;AACL,mBAAO,IAAI,KAAK,CAAC;AAAA,UACnB;AAAA,QACF;AACA,aAAK,KAAK,SAAS,cAAc,IAAI;AACrC,eAAO,IAAI,KAAK,KAAK,qBAAqB,QAAQ,CAAC;AACnD,aAAK,iBAAiB,QAAQ,UAAU,GAAG,CAAC;AAAA,MAC9C;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,WAAW,MAAM,UAAU,aAAa;AACtC,QAAI,MAAM;AACR,UAAI,CAAO,SAAS,QAAQ,GAAG;AAC7B,mBAAW;AAAA,MACb;AACA,UAAI,CAAO,SAAS,WAAW,GAAG;AAChC,sBAAc;AAAA,MAChB;AACA,UAAI,KAAK,KAAK,qBAAqB,QAAQ;AAC3C,UAAI,KAAK,KAAK,qBAAqB,WAAW;AAC9C,WAAK,eAAe,MAAM,IAAI,EAAE;AAAA,IAClC;AAAA,EACF;AAAA,EACA,eAAe,MAAM,IAAI,IAAI;AAC3B,SAAK,IAAI,QAAQ,aAAW;AAG1B,YAAM,IAAI,KAAK,KAAK,cAAc,OAAO;AACzC,YAAM,IAAI,KAAK,MAAM;AACrB,UAAI,KAAK,IAAI;AACX,SAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;AAAA,MACpB;AACA,UAAI,KAAK,KAAK,KAAK,GAAG;AACpB;AAAA,MACF;AAMA,cAAQ,OAAO,IAAI,CAAC;AACpB,cAAQ,OAAO,IAAI,CAAC;AACpB,cAAQ,OAAO,IAAI,CAAC;AACpB,cAAQ,OAAO,IAAI,CAAC;AACpB,cAAQ,OAAO,IAAI,CAAC;AAAA,IACtB,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAIA,gBAAgB,SAAS,UAAU;AACjC,SAAK,iBAAiB,SAAS;AAAA,MAC7B,GAAG,KAAK,qBAAqB,QAAQ;AAAA,MACrC,GAAG;AAAA,IACL,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAIA,oBAAoB,SAAS;AAC3B,UAAM,SAAS,KAAK,IAAI,QAAQ;AAChC,UAAM,MAAM;AACZ,QAAI,SAAS,KAAK,SAAS,SAAS;AAAA,MAClC,GAAG;AAAA,MACH,GAAG;AAAA,IACL,CAAC;AACD,QAAI,IAAI,OAAO;AACf,QAAI,IAAI;AACR,QAAI,IAAI,KAAK,WAAW;AACxB,QAAI,IAAI;AACR,QAAI,qBAAqB;AACzB,QAAI,KAAK,IAAI,UAAU,GAAG;AACxB,UAAI,QAAQ;AACV,6BAAqB;AACrB,YAAI,OAAO;AACX,YAAI;AAAA,MACN,OAAO;AACL,6BAAqB;AACrB,YAAI,OAAO,IAAI;AACf,YAAI;AAAA,MACN;AAAA,IACF,OAAO;AACL,UAAI,QAAQ;AACV,6BAAqB;AACrB,YAAI,OAAO,IAAI;AACf,YAAI;AAAA,MACN,OAAO;AACL,6BAAqB;AACrB,YAAI,OAAO;AACX,YAAI;AAAA,MACN;AAAA,IACF;AACA,UAAM,SAAS;AAAA,MACb,MAAM;AAAA,MACN,OAAO,IAAI;AAAA,MACX,KAAK;AAAA,MACL,QAAQ,IAAI;AAAA,IACd;AACA,UAAM,YAAY,QAAQ,IAAI,QAAQ;AACtC,QAAI,CAAQ,WAAW,QAAQ,SAAS,GAAG;AACzC,cAAQ,IAAI,UAAU,MAAM;AAC5B,cAAQ,IAAI,sBAAsB,kBAAkB;AAAA,IACtD;AAAA,EACF;AACF;AACA,OAAO,eAAe,eAAe,aAAa;AAAA,EAChD,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO;AACT,CAAC;AACD,OAAO,eAAe,eAAe,cAAc;AAAA,EACjD,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO,aAAa,WAAW,OAAO,CAAC,cAAc,SAAS,CAAC;AACjE,CAAC;;;ACtaM,IAAM,gBAAN,cAA4B,aAAa;AAAA,EAC9C,cAAc;AACZ,UAAM,GAAG,SAAS;AAClB,WAAO,eAAe,MAAM,UAAU;AAAA,MACpC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,SAAS;AAAA,MACnC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,UAAU,IAAI,KAAK,OAAO;AAAA,QAC/B,QAAQ;AAAA,QACR,YAAY;AAAA,QACZ,WAAW,CAAC,QAAQ,KAAK,OAAO;AAAA,MAClC,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EACA,YAAY;AACV,SAAK,UAAU,YAAmB,UAAU,KAAK,UAAU,WAAW,CAAC,YAAY,GAAG,CAAC;AACvF,QAAI,KAAK,UAAU,UAAU;AAC3B,WAAK,UAAU,UAAU,KAAK,UAAU;AAAA,IAC1C;AACA,UAAM,UAAU;AAChB,SAAK,cAAc,UAAU,GAAG;AAChC,UAAM,eAAe,KAAK,KAAK;AAC/B,iBAAa,IAAI,SAAS,IAAI;AAC9B,iBAAa,IAAI,UAAU,CAAC;AAC5B,iBAAa,IAAI,QAAQ,CAAC,SAAS,aAAa;AAC9C,cAAQ,OAAO,GAAG,CAAC;AACnB,cAAQ,OAAO,SAAS,MAAM,GAAG,CAAC;AAAA,IACpC,CAAC;AACD,SAAK,IAAI,QAAQ,CAAC,SAAS,aAAa;AACtC,cAAQ,OAAO,GAAG,CAAC;AACnB,cAAQ,OAAO,GAAG,SAAS,OAAO,CAAC;AAAA,IACrC,CAAC;AAAA,EACH;AAAA,EACA,QAAQ,QAAQC,SAAQ;AACtB,YAAQ,OAAO,IAAIA,QAAO,KAAK,KAAK,OAAO;AAAA,EAC7C;AAAA,EACA,WAAW;AACT,UAAM,SAAS;AACf,UAAM,OAAO,KAAK;AAClB,SAAK,WAAW,WAAW,WAAW,CAAC,KAAK,IAAI,QAAQ,CAAC;AACzD,SAAK,WAAW,IAAI,KAAK,IAAK;AAC9B,UAAM,QAAQ,KAAK;AACnB,UAAM,WAAW;AACjB,UAAM,SAAS;AACf,UAAM,QAAQ,KAAK;AACnB,QAAI,KAAK,QAAQ,QAAQ,KAAK,KAAK,QAAQ,MAAM,GAAG;AAClD,YAAM,eAAe,KAAK;AAC1B,UAAI,KAAK,IAAI,MAAM,GAAG;AACpB,aAAK,OAAO,MAAM;AAAA,MACpB,OAAO;AACL,aAAK,UAAU,MAAM;AAAA,MACvB;AACA,UAAI,OAAO;AACT,YAAI,KAAK,IAAI,QAAQ,GAAG;AACtB,gBAAM,WAAW,MAAM,mBAAmB;AAC1C,cAAI,SAAS,QAAQ,IAAI,KAAK,IAAI;AAChC,qBAAS,UAAU,MAAM,CAAC;AAAA,UAC5B;AACA,eAAK,OAAO,QAAQ;AACpB,uBAAa,UAAU,MAAM,CAAC;AAAA,QAChC,OAAO;AACL,gBAAM,WAAW,MAAM,kBAAkB;AACzC,cAAI,SAAS,QAAQ,IAAI,KAAK,IAAI;AAChC,qBAAS,UAAU,IAAI;AAAA,UACzB;AACA,eAAK,UAAU,QAAQ;AACvB,uBAAa,UAAU,IAAI;AAAA,QAC7B;AACA,aAAK,WAAW,aAAa;AAC7B,aAAK,OAAO,KAAK,WAAS;AACxB,gBAAM,aAAa;AAAA,QACrB,CAAC;AACD,aAAK,KAAK,iBAAiB;AAAA,MAC7B;AACA,WAAK,cAAc;AAAA,IACrB;AACA,UAAM,IAAI,KAAK,gBAAgB,MAAM;AACrC,QAAI,OAAO;AACT,UAAI,KAAK,IAAI,QAAQ,GAAG;AACtB,cAAM,IAAI,WAAW,CAAC;AAAA,MACxB,OAAO;AACL,cAAM,IAAI,WAAW,CAAC;AAAA,MACxB;AAAA,IACF;AACA,UAAM,WAAW,SAAS,CAAC;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA,EAIA,cAAc;AACZ,UAAM,YAAY;AAClB,UAAM,OAAO,KAAK;AAClB,QAAI,KAAK,IAAI,QAAQ,KAAK,MAAM;AAC9B,WAAK,IAAI,UAAU,IAAI;AAAA,IACzB;AACA,UAAM,mBAAmB,KAAK,MAAM;AACpC,SAAK,IAAI,UAAU,gBAAgB;AACnC,SAAK,gBAAgB,IAAI,UAAU,IAAI;AACvC,SAAK,WAAW,IAAI,UAAU,gBAAgB;AAAA,EAChD;AAAA,EACA,mBAAmB;AACjB,UAAM,OAAO,KAAK;AAClB,UAAM,IAAI,KAAK,EAAE,IAAW,gBAAgB,KAAK,IAAI,WAAW,CAAC,GAAG,KAAK,OAAO,CAAC;AACjF,SAAK,cAAc,IAAI,KAAK,CAAC;AAC7B,SAAK,iBAAiB,IAAI,KAAK,CAAC;AAChC,SAAK,iBAAiB,IAAI,KAAK,KAAK,EAAE,CAAC;AACvC,UAAM,QAAQ,KAAK;AACnB,QAAI,OAAO;AACT,YAAM,gBAAgB,MAAM;AAC5B,YAAM,aAAa,KAAK;AACxB,UAAI,SAAS,KAAK,IAAI,aAAa,CAAC;AACpC,UAAI,WAAW,SAAS,SAAS,GAAG;AAClC,iBAAS,KAAK,WAAW,OAAO;AAChC,aAAK,IAAI,aAAa,SAAS,CAAC;AAAA,MAClC,OAAO;AACL,mBAAW,IAAI,UAAU,MAAM;AAAA,MACjC;AACA,iBAAW,OAAO;AAAA,QAChB,GAAG,KAAK,EAAE,IAAI;AAAA,QACd,GAAG;AAAA,QACH,OAAO,cAAc,MAAM,IAAI;AAAA,MACjC,CAAC;AAAA,IACH;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,aAAa;AACX,WAAO,KAAK,KAAK,YAAY;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gBAAgB,UAAU;AACxB,WAAO;AAAA,MACL,GAAG;AAAA,MACH,GAAG,KAAK,qBAAqB,QAAQ;AAAA,IACvC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,YAAY,OAAO,UAAU,aAAa,OAAO;AAC/C,QAAI,OAAO;AACT,UAAI,CAAO,SAAS,QAAQ,GAAG;AAC7B,mBAAW;AAAA,MACb;AACA,UAAI,WAAW;AACf,UAAU,SAAS,KAAK,KAAK,QAAQ,GAAG;AACtC,mBAAW,MAAM,IAAI,iBAAiB,QAAQ;AAAA,MAChD,OAAO;AACL,mBAAW,MAAM,IAAI,YAAY,QAAQ;AAAA,MAC3C;AACA,YAAM,WAAW,KAAK,IAAI,UAAU;AACpC,YAAM,SAAS,MAAM,IAAI,UAAU,KAAK,IAAI,UAAU,KAAK,CAAC;AAC5D,UAAI,UAAU;AACZ,cAAM,IAAI,KAAK,CAAC;AAChB,YAAI,QAAQ;AACV,gBAAM,IAAI,YAAY,UAAU;AAAA,QAClC,OAAO;AACL,gBAAM,IAAI,YAAY,UAAU;AAAA,QAClC;AAAA,MACF,OAAO;AACL,YAAI,QAAQ;AACV,gBAAM,IAAI,KAAK,CAAC;AAChB,gBAAM,IAAI,YAAY,UAAU;AAAA,QAClC,OAAO;AACL,gBAAM,IAAI,KAAK,MAAS;AACxB,gBAAM,IAAI,YAAY,UAAU;AAAA,QAClC;AAAA,MACF;AACA,UAAU,SAAS,WAAW,KAAK,eAAe,UAAU;AAC1D,mBAAW,YAAY,cAAc,YAAY;AAAA,MACnD;AACA,YAAM,IAAI,KAAK,KAAK,qBAAqB,QAAQ,CAAC;AAClD,WAAK,iBAAiB,OAAO,UAAU,MAAM,IAAI,eAAe,CAAC,GAAG,MAAM,IAAI,eAAe,CAAC,CAAC;AAAA,IACjG;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,WAAW,MAAM,UAAU,aAAa;AACtC,QAAI,MAAM;AACR,UAAI,CAAO,SAAS,QAAQ,GAAG;AAC7B,mBAAW;AAAA,MACb;AACA,UAAI,WAAW,KAAK,IAAI,YAAY,GAAG;AACvC,UAAU,SAAS,WAAW,KAAK,eAAe,UAAU;AAC1D,mBAAW,YAAY,cAAc,YAAY;AAAA,MACnD;AACA,WAAK,IAAI,KAAK,KAAK,qBAAqB,QAAQ,CAAC;AACjD,WAAK,iBAAiB,MAAM,UAAU,GAAG,CAAC;AAAA,IAC5C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,WAAW,MAAM,UAAU,aAAa,OAAO;AAC7C,QAAI,MAAM;AACR,UAAI,CAAO,SAAS,QAAQ,GAAG;AAC7B,mBAAW;AAAA,MACb;AACA,UAAI,WAAW;AACf,UAAU,SAAS,KAAK,KAAK,QAAQ,GAAG;AACtC,mBAAW,KAAK,IAAI,iBAAiB,QAAQ;AAAA,MAC/C,OAAO;AACL,mBAAW,KAAK,IAAI,YAAY,QAAQ;AAAA,MAC1C;AACA,UAAU,SAAS,WAAW,KAAK,eAAe,UAAU;AAC1D,mBAAW,YAAY,cAAc,YAAY;AAAA,MACnD;AACA,WAAK,IAAI,KAAK,KAAK,qBAAqB,QAAQ,CAAC;AACjD,UAAI,SAAS,KAAK,IAAI,UAAU,CAAC;AACjC,YAAM,SAAS,KAAK,IAAI,UAAU,KAAK,IAAI,UAAU,KAAK,CAAC;AAC3D,UAAI,KAAK,IAAI,UAAU,GAAG;AACxB,aAAK,IAAI,KAAK,CAAC;AACf,YAAI,QAAQ;AACV,oBAAU;AAAA,QACZ;AAAA,MACF,OAAO;AACL,YAAI,CAAC,QAAQ;AACX,oBAAU;AAAA,QACZ;AAAA,MACF;AACA,WAAK,IAAI,QAAQ,aAAW;AAC1B,gBAAQ,OAAO,GAAG,CAAC;AACnB,gBAAQ,OAAO,QAAQ,CAAC;AAAA,MAC1B,CAAC;AACD,WAAK,iBAAiB,MAAM,UAAU,KAAK,IAAI,eAAe,CAAC,GAAG,KAAK,IAAI,eAAe,CAAC,CAAC;AAAA,IAC9F;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,aAAa,QAAQ,UAAU,aAAa;AAC1C,QAAI,QAAQ;AACV,YAAM,SAAS,OAAO,IAAI,QAAQ;AAClC,UAAI,QAAQ;AACV,YAAI,CAAO,SAAS,QAAQ,GAAG;AAC7B,qBAAW;AAAA,QACb;AACA,YAAI,WAAW,OAAO,IAAI,YAAY,GAAG;AACzC,YAAU,SAAS,WAAW,KAAK,eAAe,UAAU;AAC1D,qBAAW,YAAY,cAAc,YAAY;AAAA,QACnD;AACA,YAAI,iBAAiB,KAAK,KAAK,kBAAkB,UAAU,QAAQ;AACnE,YAAI,iBAAiB,KAAK,KAAK,SAAS,cAAc;AACtD,YAAI,IAAI;AACR,YAAI,KAAK,IAAI,UAAU,GAAG;AACxB,cAAI;AAAA,QACN;AACA,YAAI,OAAO,IAAI,SAAS,GAAG;AACzB,cAAI,gBAAgB;AAClB,gBAAI,iBAAiB,eAAe,IAAI,QAAQ;AAChD,gBAAI,gBAAgB;AAClB,qBAAO,IAAI,KAAK,eAAe,EAAE,IAAI,eAAe,MAAM,IAAI,CAAC;AAAA,YACjE;AAAA,UACF,OAAO;AACL,mBAAO,IAAI,KAAK,CAAC;AAAA,UACnB;AAAA,QACF;AACA,aAAK,KAAK,SAAS,cAAc,IAAI;AACrC,eAAO,IAAI,KAAK,KAAK,qBAAqB,QAAQ,CAAC;AACnD,aAAK,iBAAiB,QAAQ,UAAU,GAAG,CAAC;AAAA,MAC9C;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,WAAW,MAAM,UAAU,aAAa;AACtC,QAAI,MAAM;AACR,UAAI,CAAO,SAAS,QAAQ,GAAG;AAC7B,mBAAW;AAAA,MACb;AACA,UAAI,CAAO,SAAS,WAAW,GAAG;AAChC,sBAAc;AAAA,MAChB;AACA,UAAI,KAAK,KAAK,qBAAqB,QAAQ;AAC3C,UAAI,KAAK,KAAK,qBAAqB,WAAW;AAC9C,WAAK,eAAe,MAAM,IAAI,EAAE;AAAA,IAClC;AAAA,EACF;AAAA,EACA,eAAe,MAAM,IAAI,IAAI;AAC3B,SAAK,IAAI,QAAQ,aAAW;AAE1B,YAAM,IAAI,KAAK,KAAK,cAAc,MAAM;AACxC,YAAM,IAAI,KAAK,OAAO;AACtB,UAAI,KAAK,IAAI;AACX,SAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;AAAA,MACpB;AACA,UAAI,KAAK,KAAK,KAAK,GAAG;AACpB;AAAA,MACF;AAGA,cAAQ,OAAO,GAAG,EAAE;AACpB,cAAQ,OAAO,GAAG,EAAE;AACpB,cAAQ,OAAO,GAAG,EAAE;AACpB,cAAQ,OAAO,GAAG,EAAE;AACpB,cAAQ,OAAO,GAAG,EAAE;AAAA,IACtB,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,qBAAqB,UAAU;AAC7B,QAAI,CAAC,KAAK,WAAW;AACnB,cAAQ,KAAK,OAAO,YAAY,KAAK;AAAA,IACvC,OAAO;AACL,cAAQ,WAAW,KAAK,UAAU,KAAK;AAAA,IACzC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,gBAAgB,SAAS,UAAU;AACjC,SAAK,iBAAiB,SAAS;AAAA,MAC7B,GAAG;AAAA,MACH,GAAG,KAAK,qBAAqB,QAAQ;AAAA,IACvC,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAIA,oBAAoB,SAAS;AAC3B,UAAM,SAAS,KAAK,IAAI,QAAQ;AAChC,UAAM,MAAM;AACZ,QAAI,SAAS,KAAK,SAAS,SAAS;AAAA,MAClC,GAAG;AAAA,MACH,GAAG;AAAA,IACL,CAAC;AACD,QAAI,IAAI,OAAO;AACf,QAAI,IAAI;AACR,QAAI,IAAI,KAAK,WAAW;AACxB,QAAI,IAAI;AACR,QAAI,qBAAqB;AACzB,QAAI,KAAK,IAAI,UAAU,GAAG;AACxB,UAAI,QAAQ;AACV,6BAAqB;AACrB,YAAI,OAAO,IAAI;AACf,YAAI;AAAA,MACN,OAAO;AACL,6BAAqB;AACrB,YAAI,OAAO;AACX,YAAI;AAAA,MACN;AAAA,IACF,OAAO;AACL,UAAI,QAAQ;AACV,6BAAqB;AACrB,YAAI,OAAO;AACX,YAAI;AAAA,MACN,OAAO;AACL,6BAAqB;AACrB,YAAI,OAAO,IAAI;AACf,YAAI;AAAA,MACN;AAAA,IACF;AACA,UAAM,SAAS;AAAA,MACb,MAAM;AAAA,MACN,OAAO,IAAI;AAAA,MACX,KAAK;AAAA,MACL,QAAQ,IAAI;AAAA,IACd;AACA,UAAM,YAAY,QAAQ,IAAI,QAAQ;AACtC,QAAI,CAAQ,WAAW,QAAQ,SAAS,GAAG;AACzC,cAAQ,IAAI,UAAU,MAAM;AAC5B,cAAQ,IAAI,sBAAsB,kBAAkB;AAAA,IACtD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,YAAY;AACV,UAAM,OAAO,KAAK;AAClB,UAAM,SAAS,KAAK;AACpB,QAAI,QAAQ;AACV,YAAM,IAAI,OAAO,YAAY;AAC7B,WAAK,MAAM,KAAK,WAAW,IAAI;AAC/B,WAAK,MAAM,KAAK,EAAE,IAAI;AAAA,IACxB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,eAAe,UAAU;AACvB,UAAM,QAAQ,KAAK,UAAU;AAC7B,UAAM,MAAM,KAAK,QAAQ;AACzB,gBAAY,KAAK;AACjB,eAAW,YAAY,MAAM,SAAS,KAAK;AAC3C,QAAI,KAAK,IAAI,UAAU,GAAG;AACxB,iBAAW,QAAQ;AAAA,IACrB,OAAO;AACL,iBAAW,MAAM;AAAA,IACnB;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIA,iBAAiB,UAAU;AACzB,UAAM,QAAQ,KAAK,UAAU;AAC7B,UAAM,MAAM,KAAK,QAAQ;AACzB,QAAI,KAAK,IAAI,UAAU,GAAG;AACxB,iBAAW,WAAW;AAAA,IACxB,OAAO;AACL,iBAAW,MAAM;AAAA,IACnB;AACA,eAAW,YAAY,MAAM,SAAS,KAAK;AAC3C,gBAAY,KAAK;AACjB,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIA,YAAY,UAAU;AACpB,QAAI,CAAC,KAAK,IAAI,UAAU,GAAG;AACzB,aAAO,IAAI;AAAA,IACb;AACA,WAAO;AAAA,EACT;AACF;AACA,OAAO,eAAe,eAAe,aAAa;AAAA,EAChD,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO;AACT,CAAC;AACD,OAAO,eAAe,eAAe,cAAc;AAAA,EACjD,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO,aAAa,WAAW,OAAO,CAAC,cAAc,SAAS,CAAC;AACjE,CAAC;;;ACpcM,IAAM,cAAN,cAA0B,iBAAiB;AAAA,EAChD,iBAAiB;AACf,UAAM,eAAe;AACrB,QAAI,KAAK,QAAQ,OAAO,KAAK,KAAK,QAAQ,OAAO,KAAK,KAAK,QAAQ,OAAO,KAAK,KAAK,QAAQ,OAAO,KAAK,KAAK,QAAQ,QAAQ,KAAK,KAAK,QAAQ,QAAQ,KAAK,KAAK,QAAQ,QAAQ,KAAK,KAAK,QAAQ,QAAQ,GAAG;AAC5M,WAAK,SAAS;AAAA,IAChB;AAAA,EACF;AAAA,EACA,QAAQ;AACN,UAAM,MAAM;AACZ,UAAM,UAAU,KAAK;AACrB,YAAQ,OAAO,KAAK,IAAI,SAAS,CAAC,GAAG,KAAK,IAAI,SAAS,CAAC,CAAC;AACzD,YAAQ,OAAO,KAAK,IAAI,SAAS,CAAC,GAAG,KAAK,IAAI,SAAS,CAAC,CAAC;AACzD,YAAQ,OAAO,KAAK,IAAI,UAAU,CAAC,GAAG,KAAK,IAAI,UAAU,CAAC,CAAC;AAC3D,YAAQ,OAAO,KAAK,IAAI,UAAU,CAAC,GAAG,KAAK,IAAI,UAAU,CAAC,CAAC;AAAA,EAC7D;AACF;AACA,OAAO,eAAe,aAAa,aAAa;AAAA,EAC9C,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO;AACT,CAAC;AACD,OAAO,eAAe,aAAa,cAAc;AAAA,EAC/C,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO,iBAAiB,WAAW,OAAO,CAAC,YAAY,SAAS,CAAC;AACnE,CAAC;;;AC1BM,IAAM,eAAN,cAA2B,iBAAiB;AAAA,EACjD,cAAc;AACZ,UAAM,GAAG,SAAS;AAOlB,WAAO,eAAe,MAAM,WAAW;AAAA,MACrC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,KAAK,YAAY,IAAI,aAAa,SAAS,IAAI,CAAC,CAAC,GAAG,MAAM,iBAAiB,KAAK,KAAK,OAAO;AAAA,QACjG,UAAU;AAAA,QACV,WAAkB,UAAU,KAAK,QAAQ,SAAS,IAAI,aAAa,CAAC,CAAC,GAAG,CAAC,UAAU,QAAQ,CAAC;AAAA,MAC9F,GAAG,CAAC,KAAK,QAAQ,QAAQ,CAAC,CAAC,CAAC;AAAA,IAC9B,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAIA,WAAW,UAAU,cAAc;AACjC,UAAM,SAAS,KAAK,cAAc,SAAS,KAAK,aAAa,KAAK,CAAC;AACnE,WAAO,aAAa,QAAQ;AAC5B,iBAAa,KAAK,MAAM;AACxB,WAAO;AAAA,EACT;AAAA,EACA,kBAAkB,WAAW;AAC3B,UAAM,kBAAkB,SAAS;AACjC,cAAU,UAAU,IAAI,aAAa,SAAS,IAAI,CAAC,CAAC,GAAG,MAAM,iBAAiB,KAAK,KAAK,OAAO;AAAA,MAC7F,UAAU;AAAA,MACV,WAAkB,UAAU,UAAU,QAAQ,SAAS,IAAI,aAAa,CAAC,CAAC,GAAG,CAAC,UAAU,QAAQ,CAAC;AAAA,IACnG,GAAG,CAAC,KAAK,QAAQ,UAAU,UAAU,QAAQ,QAAQ,CAAC,CAAC;AAAA,EACzD;AACF;AACA,OAAO,eAAe,cAAc,aAAa;AAAA,EAC/C,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO;AACT,CAAC;AACD,OAAO,eAAe,cAAc,cAAc;AAAA,EAChD,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO,iBAAiB,WAAW,OAAO,CAAC,aAAa,SAAS,CAAC;AACpE,CAAC;;;ACxCM,IAAM,oBAAN,cAAgC,aAAa;AAAA,EAClD,cAAc;AACZ,UAAM,GAAG,SAAS;AAQlB,WAAO,eAAe,MAAM,WAAW;AAAA,MACrC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,KAAK,YAAY,IAAI,aAAa,SAAS,IAAI;AAAA,QACpD,WAAW,CAAC,WAAW;AAAA,MACzB,CAAC,GAAG,MAAM,YAAY,KAAK,KAAK,OAAO;AAAA,QACrC,WAAkB,UAAU,KAAK,QAAQ,SAAS,IAAI,aAAa,CAAC,CAAC,GAAG,CAAC,eAAe,UAAU,QAAQ,CAAC;AAAA,MAC7G,GAAG,CAAC,KAAK,QAAQ,QAAQ,CAAC,CAAC,CAAC;AAAA,IAC9B,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAIA,WAAW,UAAU,cAAc;AACjC,UAAM,SAAS,KAAK,cAAc,SAAS,KAAK,aAAa,KAAK,CAAC;AACnE,WAAO,aAAa,QAAQ;AAC5B,iBAAa,KAAK,MAAM;AACxB,WAAO;AAAA,EACT;AAAA,EACA,gBAAgB,UAAU,kBAAkB;AAC1C,UAAM,gBAAgB,UAAU,gBAAgB;AAChD,UAAM,QAAQ,KAAK,OAAO,OAAO;AACjC,UAAM,QAAQ,KAAK,OAAO,OAAO;AACjC,UAAM,WAAW,KAAK,OAAO,UAAU;AACvC,QAAI,MAAM,KAAK,IAAI,OAAO,CAAC;AAC3B,QAAI,MAAM,KAAK,IAAI,OAAO,CAAC;AAC3B,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI,YAAY,KAAK,IAAI,aAAa,SAAS,IAAI,aAAa,GAAG,CAAC;AACpE,QAAI,YAAY,KAAK,IAAI,aAAa,SAAS,IAAI,aAAa,GAAG,CAAC;AACpE,QAAI,gBAAgB,KAAK,IAAI,iBAAiB,SAAS,IAAI,iBAAiB,SAAS,CAAC;AACtF,QAAI,gBAAgB,KAAK,IAAI,iBAAiB,SAAS,IAAI,iBAAiB,SAAS,CAAC;AACtF,QAAI;AACJ,QAAI,UAAU,UAAU;AACtB,UAAI,OAAO,MAAM,qBAAqB,UAAU,KAAK,aAAa,GAAG,GAAG;AACxE,UAAI,QAAQ,MAAM,qBAAqB,UAAU,KAAK,SAAS,GAAG,GAAG;AACrE,YAAM,MAAM,qBAAqB,UAAU,KAAK,YAAY,GAAG,GAAG;AAClE,YAAM,MAAM,qBAAqB,UAAU,KAAK,aAAa,GAAG,GAAG;AACnE,YAAM,KAAK,IAAI,MAAM,KAAK;AAC1B,YAAM,KAAK,IAAI,MAAM,KAAK;AAC1B,UAAI,gBAAgB,KAAK,eAAe,gBAAgB;AACxD,UAAI,cAAc,KAAK,eAAe,YAAY;AAClD,YAAM,MAAM,qBAAqB,UAAU,KAAK,SAAS,iBAAiB,cAAc,iBAAiB,GAAG,GAAG;AAC/G,YAAM;AACN,YAAM;AACN,YAAM;AACN,oBAAc;AAAA,IAChB,OAAO;AACL,UAAI,OAAO,MAAM,qBAAqB,UAAU,KAAK,aAAa,GAAG,GAAG;AACxE,UAAI,QAAQ,MAAM,qBAAqB,UAAU,KAAK,SAAS,GAAG,GAAG;AACrE,YAAM,MAAM,qBAAqB,UAAU,KAAK,YAAY,GAAG,GAAG;AAClE,YAAM,MAAM,qBAAqB,UAAU,KAAK,aAAa,GAAG,GAAG;AACnE,YAAM,KAAK,IAAI,MAAM,KAAK;AAC1B,YAAM,KAAK,IAAI,MAAM,KAAK;AAC1B,UAAI,gBAAgB,KAAK,eAAe,gBAAgB;AACxD,UAAI,cAAc,KAAK,eAAe,YAAY;AAClD,YAAM,MAAM,qBAAqB,UAAU,KAAK,SAAS,iBAAiB,cAAc,iBAAiB,GAAG,GAAG;AAC/G,YAAM;AACN,YAAM;AACN,YAAM;AACN,oBAAc;AAAA,IAChB;AACA,SAAK,sBAAsB,UAAU,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,WAAW;AAAA,EAC1F;AAAA,EACA,sBAAsB,UAAU,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,aAAa;AACnF,QAAI,SAAS,SAAS,IAAI,UAAU;AACpC,QAAI,QAAQ;AACV,UAAI,MAAM,KAAK,SAAS,KAAK,GAAG;AAChC,UAAI,MAAM,KAAK,SAAS,KAAK,GAAG;AAChC,UAAI,MAAM,KAAK,SAAS,KAAK,GAAG;AAChC,UAAI,MAAM,KAAK,SAAS,KAAK,GAAG;AAChC,UAAI,IAAI,OAAO,EAAE;AACjB,UAAI,IAAI,OAAO,EAAE;AACjB,aAAO,IAAI,SAAS,IAAI,IAAI,CAAC;AAC7B,aAAO,IAAI,SAAS,IAAI,IAAI,CAAC;AAC7B,aAAO,IAAI,SAAS,IAAI,IAAI,CAAC;AAC7B,aAAO,IAAI,SAAS,IAAI,IAAI,CAAC;AAC7B,aAAO,IAAI,UAAU,IAAI,IAAI,CAAC;AAC9B,aAAO,IAAI,UAAU,IAAI,IAAI,CAAC;AAC9B,aAAO,IAAI,UAAU,IAAI,IAAI,CAAC;AAC9B,aAAO,IAAI,UAAU,IAAI,IAAI,CAAC;AAC9B,aAAO,IAAI,eAAe,WAAW;AACrC,UAAI,gBAAgB,SAAS,IAAI,eAAe;AAChD,UAAI,eAAe;AACjB,QAAO,KAAK,eAAe,CAAAC,YAAU;AACnC,UAAAA,QAAO,IAAI,SAAS,IAAI,IAAI,CAAC;AAC7B,UAAAA,QAAO,IAAI,SAAS,IAAI,IAAI,CAAC;AAC7B,UAAAA,QAAO,IAAI,SAAS,IAAI,IAAI,CAAC;AAC7B,UAAAA,QAAO,IAAI,SAAS,IAAI,IAAI,CAAC;AAC7B,UAAAA,QAAO,IAAI,UAAU,IAAI,IAAI,CAAC;AAC9B,UAAAA,QAAO,IAAI,UAAU,IAAI,IAAI,CAAC;AAC9B,UAAAA,QAAO,IAAI,UAAU,IAAI,IAAI,CAAC;AAC9B,UAAAA,QAAO,IAAI,UAAU,IAAI,IAAI,CAAC;AAC9B,UAAAA,QAAO,IAAI,eAAe,WAAW;AAAA,QACvC,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA,EACA,kBAAkB,WAAW;AAC3B,UAAM,kBAAkB,SAAS;AACjC,cAAU,UAAU,IAAI,aAAa,SAAS,IAAI,CAAC,CAAC,GAAG,MAAM,YAAY,KAAK,KAAK,OAAO;AAAA,MACxF,WAAkB,UAAU,UAAU,QAAQ,SAAS,IAAI,aAAa,CAAC,CAAC,GAAG,CAAC,eAAe,UAAU,QAAQ,CAAC;AAAA,IAClH,GAAG,CAAC,KAAK,QAAQ,UAAU,UAAU,QAAQ,QAAQ,CAAC,CAAC;AAAA,EACzD;AACF;AACA,OAAO,eAAe,mBAAmB,aAAa;AAAA,EACpD,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO;AACT,CAAC;AACD,OAAO,eAAe,mBAAmB,cAAc;AAAA,EACrD,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO,aAAa,WAAW,OAAO,CAAC,kBAAkB,SAAS,CAAC;AACrE,CAAC;;;AChJM,IAAM,OAAN,cAAmB,YAAY;AAAA,EACpC,QAAQ;AACN,UAAM,UAAU,KAAK;AACrB,YAAQ,OAAO,KAAK,IAAI,SAAS,CAAC,GAAG,KAAK,IAAI,SAAS,CAAC,CAAC;AACzD,YAAQ,OAAO,KAAK,IAAI,UAAU,CAAC,GAAG,KAAK,IAAI,UAAU,CAAC,CAAC;AAC3D,QAAI,IAAI,KAAK,MAAM;AACnB,QAAI,IAAI,KAAK,OAAO;AACpB,QAAI,KAAK,IAAI,aAAa,KAAK,YAAY;AACzC,UAAI,KAAK;AACT,UAAI,KAAK;AACT,cAAQ,OAAO,GAAG,EAAE;AACpB,cAAQ,OAAO,IAAI,GAAG,EAAE;AACxB,cAAQ,OAAO,IAAI,GAAG,EAAE;AACxB,cAAQ,OAAO,GAAG,EAAE;AAAA,IACtB,OAAO;AACL,UAAI,KAAK;AACT,UAAI,KAAK;AACT,cAAQ,OAAO,IAAI,CAAC;AACpB,cAAQ,OAAO,IAAI,IAAI,CAAC;AACxB,cAAQ,OAAO,IAAI,IAAI,CAAC;AACxB,cAAQ,OAAO,IAAI,CAAC;AAAA,IACtB;AAAA,EACF;AACF;AACA,OAAO,eAAe,MAAM,aAAa;AAAA,EACvC,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO;AACT,CAAC;AACD,OAAO,eAAe,MAAM,cAAc;AAAA,EACxC,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO,YAAY,WAAW,OAAO,CAAC,KAAK,SAAS,CAAC;AACvD,CAAC;;;ACzBM,IAAM,aAAN,cAAyB,kBAAkB;AAAA,EAChD,cAAc;AACZ,UAAM,GAAG,SAAS;AAQlB,WAAO,eAAe,MAAM,WAAW;AAAA,MACrC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,KAAK,YAAY,IAAI,aAAa,SAAS,IAAI;AAAA,QACpD,WAAW,CAAC,WAAW;AAAA,MACzB,CAAC,GAAG,MAAM,KAAK,KAAK,KAAK,OAAO;AAAA,QAC9B,WAAkB,UAAU,KAAK,QAAQ,SAAS,IAAI,aAAa,CAAC,CAAC,GAAG,CAAC,QAAQ,UAAU,QAAQ,CAAC;AAAA,MACtG,GAAG,CAAC,KAAK,QAAQ,QAAQ,CAAC,CAAC,CAAC;AAAA,IAC9B,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAIA,WAAW,UAAU,cAAc;AACjC,UAAM,SAAS,KAAK,cAAc,SAAS,KAAK,aAAa,KAAK,CAAC;AACnE,WAAO,aAAa,QAAQ;AAC5B,iBAAa,KAAK,MAAM;AACxB,WAAO;AAAA,EACT;AAAA,EACA,kBAAkB,WAAW;AAC3B,UAAM,kBAAkB,SAAS;AACjC,cAAU,UAAU,IAAI,aAAa,SAAS,IAAI,CAAC,CAAC,GAAG,MAAM,KAAK,KAAK,KAAK,OAAO;AAAA,MACjF,WAAkB,UAAU,UAAU,QAAQ,SAAS,IAAI,aAAa,CAAC,CAAC,GAAG,CAAC,QAAQ,UAAU,QAAQ,CAAC;AAAA,IAC3G,GAAG,CAAC,KAAK,QAAQ,UAAU,UAAU,QAAQ,QAAQ,CAAC,CAAC;AAAA,EACzD;AACF;AACA,OAAO,eAAe,YAAY,aAAa;AAAA,EAC7C,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO;AACT,CAAC;AACD,OAAO,eAAe,YAAY,cAAc;AAAA,EAC9C,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO,kBAAkB,WAAW,OAAO,CAAC,WAAW,SAAS,CAAC;AACnE,CAAC;;;AC1CM,IAAM,aAAN,cAAyB,SAAS;AAAA,EACvC,cAAc;AACZ,UAAM,GAAG,SAAS;AAClB,WAAO,eAAe,MAAM,aAAa;AAAA,MACvC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,oBAAoB;AAAA,MAC9C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,aAAK;AAAA,IACd,CAAC;AACD,WAAO,eAAe,MAAM,kBAAkB;AAAA,MAC5C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,aAAK;AAAA,IACd,CAAC;AACD,WAAO,eAAe,MAAM,iBAAiB;AAAA,MAC3C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,eAAe;AAAA,MACzC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AASD,WAAO,eAAe,MAAM,WAAW;AAAA,MACrC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,KAAK,YAAY,IAAI,aAAa,SAAS,IAAI,CAAC,CAAC,GAAG,MAAM,SAAS,KAAK,KAAK,OAAO;AAAA,QACzF,WAAkB,UAAU,KAAK,QAAQ,SAAS,IAAI,aAAa,CAAC,CAAC,GAAG,CAAC,QAAQ,UAAU,QAAQ,CAAC;AAAA,MACtG,GAAG,CAAC,KAAK,QAAQ,QAAQ,CAAC,CAAC,CAAC;AAAA,IAC9B,CAAC;AASD,WAAO,eAAe,MAAM,SAAS;AAAA,MACnC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,KAAK,YAAY,IAAI,aAAa,SAAS,IAAI,CAAC,CAAC,GAAG,MAAM,SAAS,KAAK,KAAK,OAAO;AAAA,QACzF,WAAkB,UAAU,KAAK,QAAQ,SAAS,IAAI,aAAa,CAAC,CAAC,GAAG,CAAC,QAAQ,UAAU,MAAM,CAAC;AAAA,MACpG,GAAG,CAAC,KAAK,MAAM,QAAQ,CAAC,CAAC,CAAC;AAAA,IAC5B,CAAC;AAED,WAAO,eAAe,MAAM,iBAAiB;AAAA,MAC3C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,mBAAmB;AAAA,MAC7C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,kBAAkB;AAAA,MAC5C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC;AAAA,IACpB,CAAC;AACD,WAAO,eAAe,MAAM,WAAW;AAAA,MACrC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,WAAW;AAAA,MACrC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EACA,YAAY;AACV,SAAK,eAAe,GAAG,SAAU,GAAG;AAClC,aAAO,EAAE,CAAC;AAAA,IACZ,CAAC;AACD,SAAK,eAAe,GAAG,SAAU,GAAG;AAClC,aAAO,EAAE,CAAC;AAAA,IACZ,CAAC;AACD,SAAK,eAAe,GAAG,SAAU,GAAG;AAClC,aAAO,EAAE,CAAC;AAAA,IACZ,CAAC;AACD,SAAK,eAAe,GAAG,SAAU,GAAG;AAClC,aAAO,EAAE,CAAC;AAAA,IACZ,CAAC;AACD,UAAM,UAAU;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA,EAIA,WAAW,SAAS;AAClB,UAAM,SAAS,KAAK,cAAc,SAAS,KAAK,QAAQ,KAAK,CAAC;AAC9D,YAAQ,KAAK,MAAM;AACnB,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIA,SAAS,OAAO;AACd,UAAM,OAAO,KAAK,cAAc,SAAS,KAAK,MAAM,KAAK,CAAC;AAC1D,UAAM,KAAK,IAAI;AACf,WAAO;AAAA,EACT;AAAA,EACA,kBAAkB;AAChB,SAAK,kBAAkB;AACvB,SAAK,gBAAgB;AACrB,QAAI,QAAQ,KAAK,IAAI,OAAO;AAC5B,QAAI,QAAQ,KAAK,IAAI,OAAO;AAC5B,QAAI,KAAK,QAAQ,QAAQ,GAAG;AAC1B,YAAM,SAAS,KAAK,IAAI,QAAQ;AAChC,WAAK,QAAQ,SAAS,IAAI,UAAU,MAAM;AAC1C,YAAM,eAAe,KAAK;AAC1B,UAAI,cAAc;AAChB,qBAAa,OAAO,OAAO,SAAS,EAAE,IAAI,UAAU,MAAM;AAAA,MAC5D;AAAA,IACF;AACA,QAAI,KAAK,QAAQ,MAAM,GAAG;AACxB,YAAM,OAAO,KAAK,IAAI,MAAM;AAC5B,WAAK,MAAM,SAAS,IAAI,QAAQ,IAAI;AACpC,YAAM,aAAa,KAAK;AACxB,UAAI,YAAY;AACd,mBAAW,OAAO,OAAO,SAAS,EAAE,IAAI,QAAQ,IAAI;AAAA,MACtD;AAAA,IACF;AACA,QAAI,KAAK,QAAQ,aAAa,GAAG;AAC/B,YAAM,cAAc,KAAK,IAAI,aAAa;AAC1C,WAAK,MAAM,SAAS,IAAI,eAAe,WAAW;AAClD,YAAM,aAAa,KAAK;AACxB,UAAI,YAAY;AACd,mBAAW,OAAO,OAAO,SAAS,EAAE,IAAI,eAAe,WAAW;AAAA,MACpE;AAAA,IACF;AACA,QAAI,KAAK,QAAQ,cAAc,GAAG;AAChC,YAAM,eAAe,KAAK,IAAI,cAAc;AAC5C,UAAI,cAAc;AAChB,aAAK,iBAAiB,MAAM,YAAY;AACxC,aAAK,eAAe,MAAM,YAAY;AAAA,MACxC;AAAA,IACF;AACA,QAAI,MAAM,UAAU,MAAM,QAAQ;AAChC,UAAI,KAAK,cAAc,KAAK,gBAAgB,KAAK,eAAe,KAAK,QAAQ,KAAK,KAAK,KAAK,QAAQ,KAAK,KAAK,KAAK,cAAc,KAAK,QAAQ,SAAS,KAAK,KAAK,QAAQ,cAAc,GAAG;AACxL,aAAK,MAAM,KAAK,UAAQ;AACtB,eAAK,WAAW,WAAW,KAAK;AAAA,QAClC,CAAC;AACD,aAAK,QAAQ,KAAK,UAAQ;AACxB,eAAK,WAAW,WAAW,KAAK;AAAA,QAClC,CAAC;AACD,aAAK,WAAW,KAAK,eAAa;AAChC,cAAI,QAAQ,UAAU;AACtB,cAAI,OAAO;AACT,kBAAM,KAAK,UAAQ;AACjB,mBAAK,WAAW,WAAW,KAAK;AAAA,YAClC,CAAC;AAAA,UACH;AACA,cAAI,UAAU,UAAU;AACxB,cAAI,SAAS;AACX,oBAAQ,KAAK,YAAU;AACrB,qBAAO,WAAW,WAAW,KAAK;AAAA,YACpC,CAAC;AAAA,UACH;AAAA,QACF,CAAC;AACD,YAAI,aAAa,KAAK,WAAW;AACjC,YAAI,sBAAsB,KAAK,QAAQ,SAAS,IAAI,eAAe;AACnE,YAAI,oBAAoB,KAAK,MAAM,SAAS,IAAI,eAAe;AAC/D,YAAI,sBAAsB;AAC1B,YAAI,oBAAoB;AACxB,YAAI,qBAAqB;AACvB,gCAAsB;AAAA,QACxB;AACA,YAAI,mBAAmB;AACrB,8BAAoB;AAAA,QACtB;AACA,iBAAS,IAAI,aAAa,GAAG,KAAK,GAAG,KAAK;AACxC,cAAI,WAAW,KAAK,UAAU,CAAC;AAC/B,cAAI,YAAY;AAChB,cAAI,cAAc,SAAS;AAC3B,cAAI,qBAAqB;AACvB,gBAAI,YAAY,mBAAmB,GAAG;AACpC,oCAAsB;AAAA,YACxB;AAAA,UACF;AACA,cAAI,mBAAmB;AACrB,gBAAI,YAAY,iBAAiB,GAAG;AAClC,kCAAoB;AAAA,YACtB;AAAA,UACF;AACA,UAAO,KAAK,KAAK,cAAc,WAAS;AACtC,gBAAI,CAAO,SAAS,SAAS,IAAI,KAAK,CAAC,GAAG;AACxC,0BAAY;AAAA,YACd;AAAA,UACF,CAAC;AACD,cAAI,aAAa,uBAAuB,mBAAmB;AACzD,yBAAa;AACb;AAAA,UACF;AAAA,QACF;AACA,YAAI,MAAM,KAAK,UAAU;AACzB,YAAI,WAAW,KAAK,SAAS;AAC7B,YAAI,WAAW,KAAK;AAClB;AACA,mBAAS,IAAI,UAAU,IAAI,KAAK,KAAK;AACnC,gBAAI,WAAW,KAAK,UAAU,CAAC;AAC/B,gBAAI,YAAY;AAChB,YAAO,KAAK,KAAK,cAAc,WAAS;AACtC,kBAAI,CAAO,SAAS,SAAS,IAAI,KAAK,CAAC,GAAG;AACxC,4BAAY;AAAA,cACd;AAAA,YACF,CAAC;AACD,gBAAI,WAAW;AACb,yBAAW,IAAI;AACf;AAAA,YACF;AAAA,UACF;AAAA,QACF;AACA,YAAI,aAAa,GAAG;AAClB;AAAA,QACF;AACA,aAAK,YAAY;AACjB,aAAK,eAAe;AACpB,aAAK,UAAU;AACf,aAAK,UAAU;AACf,YAAI,KAAK,UAAU,UAAU,GAAG;AAC9B,eAAK,cAAc,CAAC;AAAA,QACtB,OAAO;AAEL,iBAAO,KAAK,UAAU,WAAW,GAAG;AAClC,iBAAK,cAAc,KAAK,OAAO;AAC/B,iBAAK;AAAA,UACP;AAAA,QACF;AAAA,MACF;AAAA,IACF,OAAO;AACL,WAAK,WAAW;AAAA,IAClB;AACA,UAAM,gBAAgB;AAAA,EACxB;AAAA,EACA,iBAAiB;AACf,SAAK,QAAQ,MAAM;AACnB,SAAK,MAAM,MAAM;AACjB,SAAK,WAAW,KAAK,eAAa;AAChC,gBAAU,MAAM,MAAM;AACtB,gBAAU,QAAQ,MAAM;AAAA,IAC1B,CAAC;AAAA,EACH;AAAA,EACA,cAAc,eAAe;AAC3B,QAAI,WAAW,KAAK;AACpB,QAAI,kBAAkB;AACtB,UAAM,eAAe,KAAK,IAAI,cAAc;AAC5C,UAAM,UAAU,KAAK,IAAI,SAAS;AAClC,UAAM,OAAO,KAAK,SAAS,KAAK,KAAK;AACrC,UAAM,eAAe,KAAK;AAC1B,UAAM,mBAAmB,KAAK,MAAM;AACpC,QAAI,gBAAgB,gBAAgB,kBAAkB;AACpD,WAAK,WAAW;AAAA,IAClB;AACA,SAAK,WAAW,WAAW,IAAI;AAC/B,UAAM,SAAS,KAAK,WAAW,KAAK,OAAO;AAC3C,UAAM,iBAAiB,KAAK;AAC5B,QAAI,kBAAkB,kBAAkB,KAAK,QAAQ,UAAU;AAC7D,aAAO,WAAW;AAAA,IACpB;AACA,WAAO,WAAW,WAAW,IAAI;AACjC,QAAI,QAAQ,KAAK,IAAI,OAAO;AAC5B,QAAI,QAAQ,KAAK,IAAI,OAAO;AAC5B,QAAI,WAAW,KAAK,IAAI,UAAU;AAClC,QAAI,MAAM,KAAK,IAAI,OAAO,CAAC;AAC3B,QAAI,MAAM,KAAK,IAAI,OAAO,CAAC;AAC3B,QAAI,SAAS,KAAK;AAClB,QAAI,SAAS,KAAK;AAClB,QAAI,aAAa,KAAK;AACtB,QAAI,aAAa,KAAK;AACtB,UAAM,kBAAkB,KAAK,IAAI,iBAAiB;AAClD,UAAM,kBAAkB,KAAK,IAAI,iBAAiB;AAClD,QAAI,CAAC,iBAAiB;AACpB,mBAAa,KAAK;AAAA,IACpB;AACA,QAAI,CAAC,iBAAiB;AACpB,mBAAa,KAAK;AAAA,IACpB;AACA,UAAM,UAAU,KAAK,IAAI,SAAS;AAClC,UAAM,WAAW,MAAM,aAAa;AACpC,UAAM,WAAW,MAAM,aAAa;AACpC,QAAI;AACJ,QAAI,aAAa,OAAO;AACtB,kBAAY,KAAK;AAAA,IACnB,OAAO;AACL,kBAAY,KAAK;AAAA,IACnB;AACA,UAAM,WAAW,CAAC;AAClB,QAAI,SAAS,CAAC;AACd,aAAS,KAAK,MAAM;AACpB,UAAM,sBAAsB,KAAK,QAAQ,SAAS,IAAI,eAAe;AACrE,UAAM,oBAAoB,KAAK,MAAM,SAAS,IAAI,eAAe;AACjE,QAAI,YAAY,KAAK,IAAI,aAAa,GAAG;AACzC,QAAI,YAAY,KAAK,IAAI,aAAa,GAAG;AACzC,QAAI,gBAAgB,KAAK,IAAI,iBAAiB,SAAS;AACvD,QAAI,gBAAgB,KAAK,IAAI,iBAAiB,SAAS;AACvD,UAAM,cAAc,KAAK,IAAI,eAAe,CAAC;AAC7C,QAAI;AACJ,QAAI,cAAc,KAAK,MAAM,SAAS,IAAI,SAAS;AACnD,QAAI,KAAK,WAAW,SAAS,GAAG;AAC9B,oBAAc;AAAA,IAChB;AACA,QAAI,UAAU;AACd,QAAI,WAAW,mBAAmB,iBAAiB;AACjD,gBAAU;AAAA,IACZ;AACA,UAAM,IAAI;AAAA,MACR;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,QAAI,sBAAsB,KAAK;AAC/B,QAAI,oBAAoB,KAAK;AAC7B,SAAK,IAAI,eAAe,IAAI,iBAAiB,KAAK;AAChD,WAAK,UAAU;AACf,YAAM,WAAW,KAAK,WAAW,CAAC;AAClC,UAAI,SAAS,SAAS,IAAI,MAAM;AAChC,UAAI,SAAS,SAAS,IAAI,MAAM;AAChC,UAAI,UAAU,QAAQ,UAAU,MAAM;AACpC,YAAI,CAAC,SAAS;AACZ,mBAAS,CAAC;AACV,mBAAS,KAAK,MAAM;AACpB,YAAE,SAAS;AAAA,QACb;AAAA,MACF,OAAO;AACL,aAAK,WAAW,UAAU,CAAC;AAAA,MAC7B;AACA,UAAI,qBAAqB;AACvB,YAAIC,kBAAiB,SAAS,YAAY,mBAAmB;AAC7D,YAAIA,iBAAgB;AAClB,cAAI,EAAEA,2BAA0B,WAAW;AACzC,YAAAA,kBAAiB,SAAS,IAAIA,eAAc;AAAA,UAC9C;AACA,eAAK,kBAAkBA;AACvB,cAAI,IAAI,eAAe;AACrB,8BAAkB;AAClB;AAAA,UACF,OAAO;AACL,kCAAsBA;AACtB,mBAAO,WAAWA;AAAA,UACpB;AAAA,QACF;AAAA,MACF;AACA,UAAI,mBAAmB;AACrB,YAAIC,gBAAe,SAAS,YAAY,iBAAiB;AACzD,YAAIA,eAAc;AAChB,cAAI,EAAEA,yBAAwB,WAAW;AACvC,YAAAA,gBAAe,SAAS,IAAIA,aAAY;AAAA,UAC1C;AACA,eAAK,gBAAgBA;AACrB,cAAI,IAAI,eAAe;AACrB,8BAAkB;AAClB;AAAA,UACF,OAAO;AACL,gCAAoBA;AACpB,iBAAK,WAAWA;AAAA,UAClB;AAAA,QACF;AAAA,MACF;AACA,UAAI,CAAC,SAAS;AACZ,YAAI,WAAW,KAAK,UAAU,IAAI,CAAC;AACnC,YAAI,UAAU;AACZ,cAAI,SAAS,UAAU,UAAU,UAAU,cAAc,SAAS,GAAG;AACnE,qBAAS,CAAC;AACV,qBAAS,KAAK,MAAM;AACpB,cAAE,SAAS;AAAA,UACb;AAAA,QACF;AAAA,MACF;AAAA,IACF;AACA,SAAK,OAAO,YAAY,CAAC,eAAe,CAAC,CAAC;AAC1C,WAAO,OAAO,YAAY,CAAC,eAAe,CAAC,CAAC;AAC5C,QAAI,MAAM,UAAU;AAClB,WAAK,SAAS,QAAQ,SAAS,CAAC,EAAE,CAAC,CAAC;AAAA,IACtC;AACA,QAAI,QAAQ;AACV,WAAK,YAAY,QAAQ,QAAQ;AAAA,IACnC;AACA,QAAI,MAAM;AACR,WAAK,UAAU,MAAM,QAAQ;AAAA,IAC/B;AACA,SAAK,WAAW,KAAK,eAAa;AAChC,YAAM,YAAY,UAAU;AAC5B,YAAM,QAAQ,UAAU;AACxB,YAAMC,QAAO,KAAK,SAAS,KAAK;AAChC,UAAI,WAAW;AACb,kBAAU,SAAS,KAAKA,KAAI;AAAA,MAC9B;AACA,MAAAA,MAAK,WAAW,WAAW,IAAI;AAC/B,WAAK,UAAUA,OAAM,QAAQ;AAC7B,YAAM,UAAU,UAAU;AAC1B,YAAMC,UAAS,KAAK,WAAW,OAAO;AACtC,UAAI,WAAW;AACb,kBAAU,SAAS,KAAKA,OAAM;AAAA,MAChC;AACA,UAAI,uBAAuB,uBAAuB,KAAK,QAAQ,UAAU;AACvE,QAAAA,QAAO,WAAW;AAAA,MACpB;AACA,UAAI,qBAAqB,qBAAqB,KAAK,MAAM,UAAU;AACjE,QAAAD,MAAK,WAAW;AAAA,MAClB;AACA,MAAAC,QAAO,WAAW,WAAW,IAAI;AACjC,WAAK,YAAYA,SAAQ,QAAQ;AACjC,MAAAD,MAAK,OAAO,YAAY,CAAC,eAAe,CAAC,CAAC;AAC1C,MAAAC,QAAO,OAAO,YAAY,CAAC,eAAe,CAAC,CAAC;AAAA,IAC9C,CAAC;AAAA,EACH;AAAA,EACA,WAAW,UAAU,GAAG;AACtB,QAAI,SAAS,EAAE;AACf,QAAI,gBAAgB,SAAS,IAAI,aAAa,EAAE,SAAS;AACzD,QAAI,gBAAgB,SAAS,IAAI,aAAa,EAAE,SAAS;AACzD,UAAM,iBAAiB,KAAK,IAAI,kBAAkB,KAAK;AACvD,UAAM,iBAAiB,KAAK,IAAI,kBAAkB,KAAK;AACvD,QAAI,OAAO,EAAE,MAAM,qBAAqB,UAAU,EAAE,QAAQ,eAAe,EAAE,KAAK,cAAc;AAChG,QAAI,OAAO,EAAE,MAAM,qBAAqB,UAAU,EAAE,QAAQ,eAAe,EAAE,KAAK,cAAc;AAChG,QAAI,KAAK,eAAe,IAAI,GAAG;AAC7B,YAAM,SAAS,KAAK,SAAS,MAAM,IAAI;AACvC,YAAMC,SAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;AACjC,aAAO,KAAK,KAAK;AACjB,aAAO,KAAK,KAAK;AACjB,eAAS,IAAI,SAAS,MAAM;AAC5B,UAAI,EAAE,aAAa;AACjB,YAAI,QAAQ;AACZ,YAAI,QAAQ;AACZ,YAAI,EAAE,aAAa,EAAE,OAAO;AAC1B,kBAAQ,EAAE;AAAA,QACZ,WAAW,EAAE,aAAa,EAAE,OAAO;AACjC,kBAAQ,EAAE;AAAA,QACZ;AACA,YAAI,EAAE,SAAS;AACb,cAAI,SAAS,SAAS,IAAI,EAAE,UAAU;AACtC,cAAI,SAAS,SAAS,IAAI,EAAE,UAAU;AACtC,cAAI,UAAU,QAAQ,UAAU,MAAM;AACpC,gBAAIC,iBAAgB,SAAS,IAAI,iBAAiB,EAAE,aAAa;AACjE,gBAAIC,iBAAgB,SAAS,IAAI,iBAAiB,EAAE,aAAa;AACjE,gBAAI,EAAE,SAAS;AACb,kBAAI,eAAe,SAAS,IAAI,cAAc;AAC9C,kBAAI,eAAe,SAAS,IAAI,cAAc;AAC9C,kBAAI,cAAc;AAChB,wBAAQ,EAAE,MAAM,qBAAqB,cAAc,EAAE,QAAQD,gBAAe,aAAa,UAAU,IAAI,KAAK,GAAG,cAAc;AAC7H,oBAAU,MAAM,KAAK,GAAG;AACtB,0BAAQ,EAAE;AAAA,gBACZ;AAAA,cACF,OAAO;AACL,oBAAI,EAAE,UAAU,EAAE,UAAU;AAC1B,0BAAQ,EAAE;AAAA,gBACZ,OAAO;AACL,0BAAQ,EAAE,MAAM,qBAAqB,UAAU,EAAE,YAAYA,gBAAe,EAAE,KAAK,cAAc;AAAA,gBACnG;AAAA,cACF;AACA,kBAAI,cAAc;AAChB,wBAAQ,EAAE,MAAM,qBAAqB,cAAc,EAAE,QAAQC,gBAAe,aAAa,UAAU,IAAI,KAAK,GAAG,cAAc;AAC7H,oBAAU,MAAM,KAAK,GAAG;AACtB,0BAAQ,EAAE;AAAA,gBACZ;AAAA,cACF,OAAO;AACL,oBAAI,EAAE,UAAU,EAAE,UAAU;AAC1B,0BAAQ,EAAE;AAAA,gBACZ,OAAO;AACL,0BAAQ,EAAE,MAAM,qBAAqB,UAAU,EAAE,YAAYA,gBAAe,EAAE,KAAK,cAAc;AAAA,gBACnG;AAAA,cACF;AAAA,YACF,OAAO;AACL,sBAAQ,EAAE,MAAM,qBAAqB,UAAU,EAAE,YAAYD,gBAAe,EAAE,KAAK,cAAc;AACjG,sBAAQ,EAAE,MAAM,qBAAqB,UAAU,EAAE,YAAYC,gBAAe,EAAE,KAAK,cAAc;AAAA,YACnG;AAAA,UACF;AAAA,QACF;AACA,YAAI,cAAc,KAAK,SAAS,OAAO,KAAK;AAC5C,QAAAF,OAAM,CAAC,IAAI,YAAY;AACvB,QAAAA,OAAM,CAAC,IAAI,YAAY;AAAA,MACzB;AACA,UAAI,EAAE,cAAc,GAAG;AACrB,cAAM,KAAKA,OAAM,CAAC;AAClB,cAAM,KAAKA,OAAM,CAAC;AAClB,cAAM,KAAKA,OAAM,CAAC;AAClB,cAAM,KAAKA,OAAM,CAAC;AAClB,cAAM,OAAO,KAAK;AAClB,cAAM,MAAM,KAAK,CAAC;AAClB,cAAM,MAAM,KAAK,CAAC;AAClB,cAAM,MAAM,KAAK,CAAC;AAClB,cAAM,MAAM,KAAK,CAAC;AAClB,YAAI,KAAK,MAAM,KAAK,KAAK,KAAK,GAAG,IAAI,EAAE,eAAe,MAAM,MAAM,KAAK,MAAM,KAAK,KAAK,KAAK,GAAG,IAAI,EAAE,aAAa;AAChH,iBAAO,KAAKA,MAAK;AACjB,eAAK,iBAAiBA;AAAA,QACxB;AAAA,MACF,OAAO;AACL,eAAO,KAAKA,MAAK;AAAA,MACnB;AAAA,IACF;AAAA,EACF;AAAA,EACA,SAAS,SAAS,aAAa;AAAA,EAAC;AAAA,EAChC,YAAY,UAAU,UAAU;AAC9B,QAAI,SAAS,IAAI,SAAS,KAAK,CAAC,SAAS,IAAI,aAAa,GAAG;AAC3D,eAAS,IAAI,QAAQ,aAAW;AAC9B,QAAO,KAAK,UAAU,aAAW;AAC/B,eAAK,iBAAiB,QAAQ,OAAO;AACrC,eAAK,iBAAiB,OAAO;AAAA,QAC/B,CAAC;AAAA,MACH,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EACA,UAAU,UAAU,UAAU;AAC5B,QAAI,SAAS,IAAI,SAAS,KAAK,CAAC,SAAS,IAAI,aAAa,GAAG;AAC3D,eAAS,IAAI,QAAQ,aAAW;AAC9B,QAAO,KAAK,UAAU,aAAW;AAC/B,eAAK,eAAe,QAAQ,OAAO;AACnC,eAAK,eAAe,OAAO;AAAA,QAC7B,CAAC;AAAA,MACH,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EACA,kBAAkB,WAAW;AAC3B,UAAM,kBAAkB,SAAS;AACjC,cAAU,QAAQ,IAAI,aAAa,SAAS,IAAI,CAAC,CAAC,GAAG,MAAM,SAAS,KAAK,KAAK,OAAO;AAAA,MACnF,WAAkB,UAAU,UAAU,MAAM,SAAS,IAAI,aAAa,CAAC,CAAC,GAAG,CAAC,QAAQ,UAAU,MAAM,CAAC;AAAA,IACvG,GAAG,CAAC,KAAK,MAAM,UAAU,UAAU,MAAM,QAAQ,CAAC,CAAC;AACnD,cAAU,UAAU,IAAI,aAAa,SAAS,IAAI,CAAC,CAAC,GAAG,MAAM,SAAS,KAAK,KAAK,OAAO;AAAA,MACrF,WAAkB,UAAU,UAAU,QAAQ,SAAS,IAAI,aAAa,CAAC,CAAC,GAAG,CAAC,QAAQ,UAAU,QAAQ,CAAC;AAAA,IAC3G,GAAG,CAAC,KAAK,QAAQ,UAAU,UAAU,QAAQ,QAAQ,CAAC,CAAC;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA,EAIA,mBAAmB,WAAW;AAC5B,UAAM,iBAAiB,KAAK,IAAI,gBAAgB;AAChD,QAAI,gBAAgB;AAClB,YAAM,SAAS,eAAe,IAAI,QAAQ;AAC1C,YAAM,kBAAkB,eAAe,IAAI,iBAAiB;AAC5D,UAAI,iBAAiB;AACnB,wBAAgB,WAAW,WAAW,KAAK;AAAA,MAC7C;AACA,aAAO,IAAI,cAAc,UAAU,IAAI,OAAO,OAAO;AAAA,QACnD,aAAa;AAAA,QACb,MAAM,MAAM,CAAQ;AAAA,MACtB,CAAC,CAAC;AACF,YAAM,eAAe,OAAO,SAAS,KAAK,SAAS,KAAK,OAAO,OAAO;AAAA,QACpE,WAAW,CAAC,QAAQ,UAAU,UAAU,UAAU,QAAQ;AAAA,QAC1D,aAAa;AAAA,MACf,GAAG,CAAC,KAAK,QAAQ,QAAQ,CAAC,CAAC;AAC3B,WAAK,gBAAgB;AACrB,YAAM,aAAa,OAAO,SAAS,KAAK,SAAS,KAAK,OAAO,OAAO;AAAA,QAClE,WAAW,CAAC,QAAQ,UAAU,UAAU,UAAU,MAAM;AAAA,MAC1D,GAAG,CAAC,KAAK,MAAM,QAAQ,CAAC,CAAC;AACzB,WAAK,cAAc;AACnB,YAAM,gBAAgB,KAAK,MAAM,gBAAgB,IAAI,UAAU;AAC/D,mBAAa,OAAO,OAAO,YAAY;AAAA,QACrC,MAAM;AAAA,QACN,QAAQ;AAAA,MACV,CAAC;AACD,iBAAW,OAAO,OAAO,YAAY;AAAA,QACnC,MAAM;AAAA,QACN,QAAQ;AAAA,MACV,CAAC;AACD,UAAI,KAAK,QAAQ,SAAS,GAAG;AAC3B,cAAM,iBAAiB,KAAK,QAAQ,SAAS,CAAC;AAC9C,YAAI,gBAAgB;AAClB,gBAAM,SAAS,eAAe,OAAO,OAAO,MAAM,IAAI,SAAS,MAAM;AAAA,YACnE,QAAQ;AAAA,UACV,GAAG,CAAC,CAAC,CAAC;AACN,cAAI,QAAQ;AACV,kBAAM,SAAS,OAAO,IAAI,QAAQ;AAClC,gBAAI,kBAAkB,UAAU;AAC9B,qBAAO,OAAO,OAAO,YAAY;AAAA,gBAC/B,MAAM;AAAA,gBACN,QAAQ;AAAA,cACV,CAAC;AAAA,YACH;AACA,gBAAI,QAAQ;AACV,qBAAO,OAAO;AAAA,gBACZ,aAAa;AAAA,gBACb,aAAa;AAAA,gBACb,WAAW;AAAA,gBACX,gBAAgB;AAAA,gBAChB,WAAW;AAAA,cACb,CAAC;AACD,qBAAO,SAAS,KAAK,MAAM;AAC3B,qBAAO,OAAO;AAAA,gBACZ,GAAG,OAAO,MAAM,IAAI;AAAA,gBACpB,GAAG,OAAO,OAAO,IAAI;AAAA,cACvB,CAAC;AACD,qBAAO,OAAO,GAAG,iBAAiB,MAAM;AACtC,uBAAO,OAAO;AAAA,kBACZ,GAAG,OAAO,MAAM,IAAI;AAAA,kBACpB,GAAG,OAAO,OAAO,IAAI;AAAA,gBACvB,CAAC;AAAA,cACH,CAAC;AAAA,YACH;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;AACA,OAAO,eAAe,YAAY,aAAa;AAAA,EAC7C,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO;AACT,CAAC;AACD,OAAO,eAAe,YAAY,cAAc;AAAA,EAC9C,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO,SAAS,WAAW,OAAO,CAAC,WAAW,SAAS,CAAC;AAC1D,CAAC;;;ACvpBM,IAAM,mBAAN,MAAuB;AAAA,EAC5B,YAAY,SAAS,SAAS;AAC5B,WAAO,eAAe,MAAM,SAAS;AAAA,MACnC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,UAAU;AAAA,MACpC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,YAAY;AAAA,MACtC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,OAAO;AAAA,MACjC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,OAAO;AAAA,MACjC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,OAAO;AAAA,MACjC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,OAAO;AAAA,MACjC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,OAAO;AAAA,MACjC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,YAAY;AAAA,MACtC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,SAAK,WAAW;AAChB,SAAK,WAAW;AAAA,EAClB;AAAA,EACA,YAAY;AACV,SAAK,QAAQ;AAAA,EACf;AAAA,EACA,UAAU;AACR,SAAK,QAAQ;AAAA,EACf;AAAA,EACA,YAAY;AACV,SAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM;AACvD,SAAK,SAAS;AAAA,EAChB;AAAA,EACA,UAAU;AACR,YAAQ,KAAK,QAAQ;AAAA,MACnB,KAAK;AACH,aAAK,SAAS,OAAO,KAAK,KAAK,KAAK,GAAG;AACvC;AAAA,MACF,KAAK;AACH,cAAM,MAAM,KAAK,KAAK,OAAO,MAAM,KAAK,GAAG,CAAC;AAC5C;AAAA,IACJ;AACA,QAAI,KAAK,SAAS,KAAK,UAAU,KAAK,KAAK,WAAW,EAAG,MAAK,SAAS,UAAU;AACjF,SAAK,QAAQ,IAAI,KAAK;AAAA,EACxB;AAAA,EACA,MAAM,GAAG,GAAG;AACV,KAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;AACd,QAAI,KAAK;AACT,QAAI,CAAC,GAAG,IAAI,CAAC;AACb,QAAI,MAAM,KAAK,OAAO,MAAM,KAAK,IAAK;AACtC,YAAQ,KAAK,QAAQ;AAAA,MACnB,KAAK;AACH,aAAK,SAAS;AACd,aAAK,QAAQ,KAAK,SAAS,OAAO,GAAG,CAAC,IAAI,KAAK,SAAS,OAAO,GAAG,CAAC;AACnE;AAAA,MACF,KAAK;AACH,aAAK,SAAS;AACd;AAAA,MACF,KAAK;AACH,aAAK,SAAS;AACd,cAAM,MAAM,OAAO,MAAM,KAAK,OAAO,MAAM,GAAG,CAAC,CAAC,GAAG,EAAE;AACrD;AAAA,MACF;AACE,cAAM,MAAM,KAAK,KAAK,KAAK,OAAO,MAAM,GAAG,CAAC,CAAC;AAC7C;AAAA,IACJ;AACA,SAAK,MAAM,KAAK,KAAK,KAAK,MAAM;AAChC,SAAK,MAAM,KAAK,KAAK,KAAK,MAAM;AAChC,SAAK,MAAM;AAAA,EACb;AACF;AAIO,SAAS,sBAAsB,SAAS;AAC7C,WAAS,iBAAiB,SAAS;AACjC,WAAO,IAAI,iBAAiB,SAAS,OAAO;AAAA,EAC9C;AACA,mBAAiB,UAAU,SAAUG,UAAS;AAC5C,WAAO,sBAAsB,CAACA,QAAO;AAAA,EACvC;AACA,SAAO;AACT;AAIA,SAAS,KAAK,GAAG;AACf,SAAO,IAAI,IAAI,KAAK;AACtB;AAIA,SAAS,OAAO,MAAM,IAAI,IAAI;AAC5B,MAAI,KAAK,KAAK,MAAM,KAAK;AACzB,MAAI,KAAK,KAAK,KAAK;AACnB,MAAI,MAAM,KAAK,MAAM,KAAK,QAAQ,MAAM,KAAK,KAAK;AAClD,MAAI,MAAM,KAAK,KAAK,QAAQ,MAAM,KAAK,KAAK;AAC5C,MAAI,KAAK,KAAK,KAAK,KAAK,OAAO,KAAK;AACpC,UAAQ,KAAK,EAAE,IAAI,KAAK,EAAE,KAAK,KAAK,IAAI,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,GAAG,MAAM,KAAK,IAAI,CAAC,CAAC,KAAK;AAC5F;AAIA,SAAS,OAAO,MAAM,GAAG;AACvB,MAAI,IAAI,KAAK,MAAM,KAAK;AACxB,SAAO,KAAK,KAAK,KAAK,MAAM,KAAK,OAAO,IAAI,KAAK,IAAI;AACvD;AAIA,SAAS,MAAM,MAAM,IAAI,IAAI;AAC3B,MAAI,KAAK,KAAK,KACZ,KAAK,KAAK,KACV,KAAK,KAAK,KACV,KAAK,KAAK,KACV,MAAM,KAAK,MAAM,OAAO,IAAI,KAAK;AACnC,OAAK,SAAS,cAAc,KAAK,KAAK,IAAI,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,IAAI,IAAI,EAAE;AAClF;;;ACrJO,IAAM,sBAAN,cAAkC,WAAW;AAAA,EAClD,YAAY;AACV,SAAK,YAAY,gBAAgB,sBAAsB,KAAK,IAAI,WAAW,GAAG,CAAC,CAAC;AAChF,UAAM,UAAU;AAAA,EAClB;AAAA,EACA,kBAAkB;AAChB,QAAI,KAAK,QAAQ,SAAS,GAAG;AAC3B,WAAK,IAAI,gBAAgB,sBAAsB,KAAK,IAAI,WAAW,GAAG,CAAC,CAAC;AACxE,WAAK,eAAe;AAAA,IACtB;AACA,UAAM,gBAAgB;AAAA,EACxB;AACF;AACA,OAAO,eAAe,qBAAqB,aAAa;AAAA,EACtD,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO;AACT,CAAC;AACD,OAAO,eAAe,qBAAqB,cAAc;AAAA,EACvD,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO,WAAW,WAAW,OAAO,CAAC,oBAAoB,SAAS,CAAC;AACrE,CAAC;;;AC5BM,IAAM,mBAAN,MAAuB;AAAA,EAC5B,YAAY,SAAS,SAAS;AAC5B,WAAO,eAAe,MAAM,SAAS;AAAA,MACnC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,UAAU;AAAA,MACpC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,YAAY;AAAA,MACtC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,OAAO;AAAA,MACjC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,OAAO;AAAA,MACjC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,OAAO;AAAA,MACjC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,OAAO;AAAA,MACjC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,OAAO;AAAA,MACjC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,YAAY;AAAA,MACtC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,SAAK,WAAW;AAChB,SAAK,WAAW;AAAA,EAClB;AAAA,EACA,YAAY;AACV,SAAK,QAAQ;AAAA,EACf;AAAA,EACA,UAAU;AACR,SAAK,QAAQ;AAAA,EACf;AAAA,EACA,YAAY;AACV,SAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM;AACvD,SAAK,SAAS;AAAA,EAChB;AAAA,EACA,UAAU;AACR,YAAQ,KAAK,QAAQ;AAAA,MACnB,KAAK;AACH,aAAK,SAAS,OAAO,KAAK,KAAK,KAAK,GAAG;AACvC;AAAA,MACF,KAAK;AACH,QAAAC,OAAM,MAAM,KAAK,KAAKC,QAAO,MAAM,KAAK,GAAG,CAAC;AAC5C;AAAA,IACJ;AACA,QAAI,KAAK,SAAS,KAAK,UAAU,KAAK,KAAK,WAAW,EAAG,MAAK,SAAS,UAAU;AACjF,SAAK,QAAQ,IAAI,KAAK;AAAA,EACxB;AAAA,EACA,MAAM,GAAG,GAAG;AACV,QAAI,KAAK;AACT,QAAI,CAAC,GAAG,IAAI,CAAC;AACb,QAAI,MAAM,KAAK,OAAO,MAAM,KAAK,IAAK;AACtC,YAAQ,KAAK,QAAQ;AAAA,MACnB,KAAK;AACH,aAAK,SAAS;AACd,aAAK,QAAQ,KAAK,SAAS,OAAO,GAAG,CAAC,IAAI,KAAK,SAAS,OAAO,GAAG,CAAC;AACnE;AAAA,MACF,KAAK;AACH,aAAK,SAAS;AACd;AAAA,MACF,KAAK;AACH,aAAK,SAAS;AACd,QAAAD,OAAM,MAAMC,QAAO,MAAM,KAAKC,QAAO,MAAM,GAAG,CAAC,CAAC,GAAG,EAAE;AACrD;AAAA,MACF;AACE,QAAAF,OAAM,MAAM,KAAK,KAAK,KAAKE,QAAO,MAAM,GAAG,CAAC,CAAC;AAC7C;AAAA,IACJ;AACA,SAAK,MAAM,KAAK,KAAK,KAAK,MAAM;AAChC,SAAK,MAAM,KAAK,KAAK,KAAK,MAAM;AAChC,SAAK,MAAM;AAAA,EACb;AACF;AAIO,SAAS,sBAAsB,SAAS;AAC7C,WAAS,iBAAiB,SAAS;AACjC,WAAO,IAAI,iBAAiB,SAAS,OAAO;AAAA,EAC9C;AACA,SAAO;AACT;AAIA,SAASC,MAAK,GAAG;AACf,SAAO,IAAI,IAAI,KAAK;AACtB;AAIA,SAASD,QAAO,MAAM,IAAI,IAAI;AAC5B,MAAI,KAAK,KAAK,MAAM,KAAK;AACzB,MAAI,KAAK,KAAK,KAAK;AACnB,MAAI,MAAM,KAAK,MAAM,KAAK,QAAQ,MAAM,KAAK,KAAK;AAClD,MAAI,MAAM,KAAK,KAAK,QAAQ,MAAM,KAAK,KAAK;AAC5C,MAAI,KAAK,KAAK,KAAK,KAAK,OAAO,KAAK;AACpC,UAAQC,MAAK,EAAE,IAAIA,MAAK,EAAE,KAAK,KAAK,IAAI,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,GAAG,MAAM,KAAK,IAAI,CAAC,CAAC,KAAK;AAC5F;AAIA,SAASF,QAAO,MAAM,GAAG;AACvB,MAAI,IAAI,KAAK,MAAM,KAAK;AACxB,SAAO,KAAK,KAAK,KAAK,MAAM,KAAK,OAAO,IAAI,KAAK,IAAI;AACvD;AAIA,SAASD,OAAM,MAAM,IAAI,IAAI;AAC3B,MAAI,KAAK,KAAK,KACZ,KAAK,KAAK,KACV,KAAK,KAAK,KACV,KAAK,KAAK,KACV,MAAM,KAAK,MAAM,OAAO,IAAI,KAAK;AACnC,OAAK,SAAS,cAAc,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,IAAI,KAAK,KAAK,IAAI,IAAI,EAAE;AAClF;;;ACjJO,IAAM,sBAAN,cAAkC,WAAW;AAAA,EAClD,YAAY;AACV,SAAK,YAAY,gBAAgB,sBAAsB,KAAK,IAAI,WAAW,GAAG,CAAC,CAAC;AAChF,UAAM,UAAU;AAAA,EAClB;AAAA,EACA,kBAAkB;AAChB,QAAI,KAAK,QAAQ,SAAS,GAAG;AAC3B,WAAK,IAAI,gBAAgB,sBAAsB,KAAK,IAAI,WAAW,GAAG,CAAC,CAAC;AACxE,WAAK,eAAe;AAAA,IACtB;AACA,UAAM,gBAAgB;AAAA,EACxB;AACF;AACA,OAAO,eAAe,qBAAqB,aAAa;AAAA,EACtD,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO;AACT,CAAC;AACD,OAAO,eAAe,qBAAqB,cAAc;AAAA,EACvD,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO,WAAW,WAAW,OAAO,CAAC,oBAAoB,SAAS,CAAC;AACrE,CAAC;;;ACxBM,IAAM,uBAAN,cAAmC,WAAW;AAAA,EACnD,YAAY;AACV,SAAK,YAAY,gBAAgB,iBAAc,QAAQ,KAAK,IAAI,WAAW,GAAG,CAAC,CAAC;AAChF,UAAM,UAAU;AAAA,EAClB;AAAA,EACA,kBAAkB;AAChB,QAAI,KAAK,QAAQ,SAAS,GAAG;AAC3B,WAAK,IAAI,gBAAgB,iBAAc,QAAQ,KAAK,IAAI,WAAW,GAAG,CAAC,CAAC;AACxE,WAAK,eAAe;AAAA,IACtB;AACA,UAAM,gBAAgB;AAAA,EACxB;AACF;AACA,OAAO,eAAe,sBAAsB,aAAa;AAAA,EACvD,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO;AACT,CAAC;AACD,OAAO,eAAe,sBAAsB,cAAc;AAAA,EACxD,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO,WAAW,WAAW,OAAO,CAAC,qBAAqB,SAAS,CAAC;AACtE,CAAC;;;AC5BM,IAAM,iBAAN,cAA6B,WAAW;AAAA,EAC7C,YAAY;AACV,SAAK,YAAY,gBAAgB,SAAc;AAC/C,UAAM,UAAU;AAAA,EAClB;AAAA,EACA,WAAW,UAAU,GAAG;AACtB,QAAI,SAAS,EAAE;AACf,QAAI,QAAQ,KAAK,IAAI,aAAa,IAAI,EAAE,QAAQ;AAChD,QAAI,iBAAiB,SAAS,IAAI,aAAa,EAAE,SAAS;AAC1D,QAAI,iBAAiB,SAAS,IAAI,aAAa,EAAE,SAAS;AAC1D,QAAI,iBAAiB;AACrB,QAAI,iBAAiB;AACrB,QAAI,EAAE,aAAa,EAAE,OAAO;AAC1B,wBAAkB;AAClB,wBAAkB;AAAA,IACpB,WAAW,EAAE,aAAa,EAAE,OAAO;AACjC,wBAAkB;AAClB,wBAAkB;AAAA,IACpB;AACA,QAAI,QAAQ,EAAE,MAAM,qBAAqB,UAAU,EAAE,QAAQ,gBAAgB,EAAE,GAAG;AAClF,QAAI,QAAQ,EAAE,MAAM,qBAAqB,UAAU,EAAE,QAAQ,gBAAgB,EAAE,GAAG;AAClF,QAAI,QAAQ,EAAE,MAAM,qBAAqB,UAAU,EAAE,QAAQ,gBAAgB,EAAE,GAAG;AAClF,QAAI,QAAQ,EAAE,MAAM,qBAAqB,UAAU,EAAE,QAAQ,gBAAgB,EAAE,GAAG;AAClF,QAAI,KAAK,eAAe,KAAK,GAAG;AAC9B,YAAM,UAAU,KAAK,SAAS,OAAO,KAAK;AAC1C,YAAM,SAAS,CAAC,QAAQ,GAAG,QAAQ,CAAC;AACpC,YAAM,UAAU,KAAK,SAAS,OAAO,KAAK;AAC1C,YAAM,SAAS,CAAC,QAAQ,GAAG,QAAQ,CAAC;AACpC,UAAI,EAAE,aAAa;AACjB,YAAI,YAAY;AAChB,YAAI,YAAY;AAChB,YAAI,YAAY;AAChB,YAAI,YAAY;AAChB,YAAI,EAAE,aAAa,EAAE,OAAO;AAC1B,sBAAY,EAAE;AACd,sBAAY,EAAE;AAAA,QAChB,WAAW,EAAE,aAAa,EAAE,OAAO;AACjC,sBAAY,EAAE;AACd,sBAAY,EAAE;AAAA,QAChB;AACA,YAAI,EAAE,SAAS;AACb,cAAI,SAAS,SAAS,IAAI,EAAE,UAAU;AACtC,cAAI,SAAS,SAAS,IAAI,EAAE,UAAU;AACtC,cAAI,UAAU,QAAQ,UAAU,MAAM;AACpC,6BAAiB,SAAS,IAAI,iBAAiB,EAAE,aAAa;AAC9D,6BAAiB,SAAS,IAAI,iBAAiB,EAAE,aAAa;AAC9D,6BAAiB;AACjB,6BAAiB;AACjB,gBAAI,EAAE,aAAa,EAAE,OAAO;AAC1B,gCAAkB;AAClB,gCAAkB;AAAA,YACpB,WAAW,EAAE,aAAa,EAAE,OAAO;AACjC,gCAAkB;AAClB,gCAAkB;AAAA,YACpB;AACA,gBAAI,EAAE,SAAS;AACb,kBAAI,eAAe,SAAS,IAAI,cAAc;AAC9C,kBAAI,eAAe,SAAS,IAAI,cAAc;AAC9C,kBAAI,cAAc;AAChB,4BAAY,EAAE,MAAM,qBAAqB,cAAc,EAAE,QAAQ,gBAAgB,aAAa,UAAU,IAAI,KAAK,CAAC;AAClH,4BAAY,EAAE,MAAM,qBAAqB,cAAc,EAAE,QAAQ,gBAAgB,aAAa,UAAU,IAAI,KAAK,CAAC;AAAA,cACpH,OAAO;AACL,oBAAI,EAAE,UAAU,EAAE,UAAU;AAC1B,8BAAY,EAAE;AACd,8BAAY,EAAE;AAAA,gBAChB,WAAW,EAAE,aAAa,EAAE,OAAO;AACjC,8BAAY,EAAE,MAAM,qBAAqB,UAAU,EAAE,YAAY,gBAAgB,EAAE,GAAG;AACtF,8BAAY,EAAE,MAAM,qBAAqB,UAAU,EAAE,YAAY,gBAAgB,EAAE,GAAG;AAAA,gBACxF;AAAA,cACF;AACA,kBAAI,cAAc;AAChB,4BAAY,EAAE,MAAM,qBAAqB,cAAc,EAAE,QAAQ,gBAAgB,aAAa,UAAU,IAAI,KAAK,CAAC;AAClH,4BAAY,EAAE,MAAM,qBAAqB,cAAc,EAAE,QAAQ,gBAAgB,aAAa,UAAU,IAAI,KAAK,CAAC;AAAA,cACpH,OAAO;AACL,oBAAI,EAAE,UAAU,EAAE,UAAU;AAC1B,8BAAY,EAAE;AACd,8BAAY,EAAE;AAAA,gBAChB,WAAW,EAAE,aAAa,EAAE,OAAO;AACjC,8BAAY,EAAE,MAAM,qBAAqB,UAAU,EAAE,YAAY,gBAAgB,EAAE,GAAG;AACtF,8BAAY,EAAE,MAAM,qBAAqB,UAAU,EAAE,YAAY,gBAAgB,EAAE,GAAG;AAAA,gBACxF;AAAA,cACF;AAAA,YACF,OAAO;AACL,0BAAY,EAAE,MAAM,qBAAqB,UAAU,EAAE,YAAY,gBAAgB,EAAE,GAAG;AACtF,0BAAY,EAAE,MAAM,qBAAqB,UAAU,EAAE,YAAY,gBAAgB,EAAE,GAAG;AACtF,0BAAY,EAAE,MAAM,qBAAqB,UAAU,EAAE,YAAY,gBAAgB,EAAE,GAAG;AACtF,0BAAY,EAAE,MAAM,qBAAqB,UAAU,EAAE,YAAY,gBAAgB,EAAE,GAAG;AAAA,YACxF;AAAA,UACF;AAAA,QACF;AACA,YAAI,eAAe,KAAK,SAAS,WAAW,SAAS;AACrD,YAAI,eAAe,KAAK,SAAS,WAAW,SAAS;AACrD,eAAO,CAAC,IAAI,aAAa;AACzB,eAAO,CAAC,IAAI,aAAa;AACzB,eAAO,CAAC,IAAI,aAAa;AACzB,eAAO,CAAC,IAAI,aAAa;AAAA,MAC3B;AACA,aAAO,KAAK,MAAM;AAClB,aAAO,KAAK,MAAM;AAClB,eAAS,IAAI,SAAS;AAAA,QACpB,GAAG,OAAO,CAAC,KAAK,OAAO,CAAC,IAAI,OAAO,CAAC,KAAK;AAAA,QACzC,GAAG,OAAO,CAAC,KAAK,OAAO,CAAC,IAAI,OAAO,CAAC,KAAK;AAAA,MAC3C,CAAC;AAAA,IACH;AACA,QAAI,KAAK,IAAI,UAAU,GAAG;AACxB,QAAE,SAAS,CAAC;AACZ,QAAE,SAAS,KAAK,MAAM;AAAA,IACxB;AAAA,EACF;AACF;AACA,OAAO,eAAe,gBAAgB,aAAa;AAAA,EACjD,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO;AACT,CAAC;AACD,OAAO,eAAe,gBAAgB,cAAc;AAAA,EAClD,YAAY;AAAA,EACZ,cAAc;AAAA,EACd,UAAU;AAAA,EACV,OAAO,WAAW,WAAW,OAAO,CAAC,eAAe,SAAS,CAAC;AAChE,CAAC;",
  "names": ["copy", "min", "round", "sign", "eventType", "each", "point", "color", "closest", "bounds", "chart", "point", "each", "field", "stacked", "point", "xAxis", "yAxis", "min", "max", "i", "dataItem", "graphics", "point", "sAnimation", "eAnimation", "remove", "bounds", "min", "max", "stepPower", "series", "delta", "key", "format", "min", "max", "groupInterval", "copy", "dataContext", "date", "min", "max", "value", "index", "min", "max", "closest", "each", "point", "point2", "x", "point2", "column", "strokeTemplate", "fillTemplate", "fill", "stroke", "point", "itemLocationX", "itemLocationY", "tension", "point", "slope2", "slope3", "sign"]
}
