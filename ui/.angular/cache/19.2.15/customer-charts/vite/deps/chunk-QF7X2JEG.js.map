{
  "version": 3,
  "sources": ["../../../../../../../node_modules/@amcharts/amcharts5/.internal/core/util/Type.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/core/util/Array.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/core/util/Disposer.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/core/util/Object.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/core/util/EventDispatcher.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/core/util/Template.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/core/util/Order.js", "../../../../../../../node_modules/@amcharts/amcharts5/.internal/core/Theme.js"],
  "sourcesContent": ["/**\r\n * A collection of utility functions for various type checks and conversion\r\n * @hidden\r\n */\n/**\r\n * ============================================================================\r\n * TYPE CHECK\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Returns `true` if value is not a number (NaN).\r\n *\r\n * @param value Input value\r\n * @return Is NaN?\r\n */\nexport function isNaN(value) {\n  return Number(value) !== value;\n}\n/**\r\n * Returns a type of the value.\r\n *\r\n * @param value  Input value\r\n * @return Type of the value\r\n * @ignore\r\n */\nexport function getType(value) {\n  return {}.toString.call(value);\n}\n/**\r\n * Asserts that the condition is true.\r\n *\r\n * @param condition  Condition to check\r\n * @param message    Message to display in the error\r\n * @ignore\r\n */\nexport function assert(condition, message = \"Assertion failed\") {\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n/**\r\n * ============================================================================\r\n * QUICK CONVERSION\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Converts any value into a `number`.\r\n *\r\n * @param value  Source value\r\n * @return Number representation of value\r\n */\nexport function toNumber(value) {\n  if (value != null && !isNumber(value)) {\n    let converted = Number(value);\n    if (isNaN(converted) && isString(value) && value != \"\" && value.match(/[0-9]+/)) {\n      return toNumber(value.replace(/[^0-9.\\-]+/g, ''));\n    }\n    return converted;\n  }\n  return value;\n}\n/**\r\n * Converts anything to Date object.\r\n *\r\n * @param value  A value of any type\r\n * @return Date object representing a value\r\n */\nexport function toDate(value) {\n  if (isDate(value)) {\n    // TODO maybe don't create a new Date ?\n    return new Date(value);\n  } else if (isNumber(value)) {\n    return new Date(value);\n  } else {\n    // Try converting to number (assuming timestamp)\n    let num = Number(value);\n    if (!isNumber(num)) {\n      return new Date(value);\n    } else {\n      return new Date(num);\n    }\n  }\n}\n/**\r\n * Converts numeric value into string. Deals with large or small numbers that\r\n * would otherwise use exponents.\r\n *\r\n * @param value  Numeric value\r\n * @return Numeric value as string\r\n */\nexport function numberToString(value) {\n  // TODO handle Infinity and -Infinity\n  if (isNaN(value)) {\n    return \"NaN\";\n  }\n  if (value === Infinity) {\n    return \"Infinity\";\n  }\n  if (value === -Infinity) {\n    return \"-Infinity\";\n  }\n  // Negative 0\n  if (value === 0 && 1 / value === -Infinity) {\n    return \"-0\";\n  }\n  // Preserve negative and deal with absoute values\n  let negative = value < 0;\n  value = Math.abs(value);\n  // TODO test this\n  let parsed = /^([0-9]+)(?:\\.([0-9]+))?(?:e[\\+\\-]([0-9]+))?$/.exec(\"\" + value);\n  let digits = parsed[1];\n  let decimals = parsed[2] || \"\";\n  let res;\n  // Leave the nummber as it is if it does not use exponents\n  if (parsed[3] === undefined) {\n    res = decimals === \"\" ? digits : digits + \".\" + decimals;\n  } else {\n    let exponent = +parsed[3];\n    // Deal with decimals\n    if (value < 1) {\n      let zeros = exponent - 1;\n      res = \"0.\" + repeat(\"0\", zeros) + digits + decimals;\n      // Deal with integers\n    } else {\n      let zeros = exponent - decimals.length;\n      if (zeros === 0) {\n        res = digits + decimals;\n      } else if (zeros < 0) {\n        res = digits + decimals.slice(0, zeros) + \".\" + decimals.slice(zeros);\n      } else {\n        res = digits + decimals + repeat(\"0\", zeros);\n      }\n    }\n  }\n  return negative ? \"-\" + res : res;\n}\n/**\r\n * Repeats a `string` number of times as set in `amount`.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Make this faster\r\n * @param string  Source string\r\n * @param amount  Number of times to repeat string\r\n * @return New string\r\n */\nexport function repeat(string, amount) {\n  return new Array(amount + 1).join(string);\n}\n/**\r\n * ============================================================================\r\n * TYPE CHECK\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Checks if parameter is `Date`.\r\n *\r\n * @param value  Input value\r\n * @return Is Date?\r\n */\nexport function isDate(value) {\n  return getType(value) === \"[object Date]\";\n}\n/**\r\n * Checks if parameter is `string`.\r\n *\r\n * @param value  Input value\r\n * @return Is string?\r\n */\nexport function isString(value) {\n  return typeof value === \"string\";\n}\n/**\r\n * Checks if parameter is `number`.\r\n *\r\n * @param value  Input value\r\n * @return Is number?\r\n */\nexport function isNumber(value) {\n  return typeof value === \"number\" && Number(value) == value;\n}\n/**\r\n * Checks if parameter is `object`.\r\n *\r\n * @param value  Input value\r\n * @return Is object?\r\n */\nexport function isObject(value) {\n  return typeof value === \"object\" && value !== null;\n}\n/**\r\n * Checks if parameter is `Array`.\r\n *\r\n * @param value  Input value\r\n * @return Is Array?\r\n */\nexport function isArray(value) {\n  return Array.isArray(value);\n}\n/**\r\n * ============================================================================\r\n * STATIC CONSTANTS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * @ignore Exclude from docs\r\n */\nexport const PLACEHOLDER = \"__§§§__\";\n/**\r\n * @ignore Exclude from docs\r\n */\nexport const PLACEHOLDER2 = \"__§§§§__\";\n", "import * as $type from \"./Type\";\n/**\r\n * ============================================================================\r\n * UTILITY FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\n/**\r\n * Searches `array` for `value`.\r\n *\r\n * Returns -1 if not found.\r\n *\r\n * @param array  Source array\r\n * @param value  Value to search\r\n * @returns Index\r\n */\nexport function indexOf(array, value) {\n  const length = array.length;\n  for (let i = 0; i < length; ++i) {\n    // TODO handle NaN\n    if (array[i] === value) {\n      return i;\n    }\n  }\n  return -1;\n}\n/**\r\n * Calls `test` for each element in `array`.\r\n *\r\n * If `test` returns `true` then it immediately returns `true`.\r\n *\r\n * If `test` returns `false` for all of the elements in `array` then it returns `false`.\r\n *\r\n * @param array  Source array\r\n * @param test   Function which is called on each element\r\n * @returns Whether `test` returned true or not\r\n */\nexport function any(array, test) {\n  const length = array.length;\n  for (let i = 0; i < length; ++i) {\n    if (test(array[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n/**\r\n * Calls `fn` function for every member of array and returns a new array out\r\n * of all outputs.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n * @returns New array\r\n */\nexport function map(array, fn) {\n  const length = array.length;\n  const output = new Array(length);\n  for (let i = 0; i < length; ++i) {\n    output[i] = fn(array[i], i);\n  }\n  return output;\n}\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\nexport function each(array, fn) {\n  const length = array.length;\n  for (let i = 0; i < length; ++i) {\n    fn(array[i], i);\n  }\n}\n/**\r\n * Iterates through all items in array in reverse order and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\nexport function eachReverse(array, fn) {\n  let i = array.length;\n  while (i > 0) {\n    --i;\n    fn(array[i], i);\n  }\n}\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * If `fn` call evaluates to `false`, further iteration is cancelled.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\nexport function eachContinue(array, fn) {\n  const length = array.length;\n  for (let i = 0; i < length; ++i) {\n    if (!fn(array[i], i)) {\n      break;\n    }\n  }\n}\n/**\r\n * Shifts an item at `index` towards beginning of the array.\r\n *\r\n * @param array  Source array\r\n * @param index  Target element index\r\n */\nexport function shiftLeft(array, index) {\n  const length = array.length;\n  for (let i = index; i < length; ++i) {\n    array[i - index] = array[i];\n  }\n  array.length = length - index;\n}\n/**\r\n * Returns the last item of the array.\r\n *\r\n * @param array  Source array\r\n * @returns Last item\r\n */\nexport function last(array) {\n  const length = array.length;\n  return length ? array[length - 1] : undefined;\n}\n/**\r\n * Returns the first item of the array.\r\n *\r\n * @param array  Source array\r\n * @returns Last item\r\n */\nexport function first(array) {\n  return array[0];\n}\n/**\r\n * Inserts `element` into `array` at `index`.\r\n *\r\n * Caps `index` to be between `0` and `array.length`\r\n *\r\n * @param array    Source array\r\n * @param element  Item to insert\r\n * @param array    Index to insert item at\r\n */\nexport function insert(array, element, index) {\n  //if (array) {\n  index = Math.max(0, Math.min(index, array.length));\n  array.splice(index, 0, element);\n  //}\n}\n/**\r\n * Removes all copies of `element` from `array` (if they exist) and then\r\n * inserts `element` at `index`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item\r\n * @param array    Index to move item to\r\n */\nexport function setIndex(array, element, index) {\n  remove(array, element);\n  insert(array, element, index);\n}\n/**\r\n * Pushes all of the elements from `input` into `array`.\r\n *\r\n * @param array  Output array\r\n * @param input  Input array\r\n */\nexport function pushAll(array, input) {\n  const length = input.length;\n  for (let i = 0; i < length; ++i) {\n    array.push(input[i]);\n  }\n}\n/**\r\n * Removes `element` from `array`.\r\n *\r\n * If there are multiple copies of `element`, they are all removed.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to remove\r\n */\nexport function remove(array, element) {\n  let found = false;\n  let index = 0;\n  for (;;) {\n    index = array.indexOf(element, index);\n    if (index === -1) {\n      return found;\n    } else {\n      found = true;\n      array.splice(index, 1);\n    }\n  }\n}\nexport function removeFirst(array, element) {\n  let index = array.indexOf(element);\n  if (index !== -1) {\n    array.splice(index, 1);\n    return true;\n  } else {\n    return false;\n  }\n}\n/**\r\n * Adds an `element` to `array`.\r\n *\r\n * If array already contains and item like this, it is removed before adding\r\n * it again.\r\n *\r\n * Optionally `toIndex` can be specified to add element at specific index.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to add\r\n * @param array    Index to move item to\r\n */\nexport function move(array, element, toIndex) {\n  // @todo this implementation must be the same as the List.moveValue method\n  // @todo don't do anything if the desired index is the same as the current index\n  let index = indexOf(array, element);\n  // @todo remove all old values rather than only the first ?\n  if (index !== -1) {\n    removeIndex(array, index);\n  }\n  if (toIndex == null) {\n    array.push(element);\n  } else {\n    insertIndex(array, toIndex, element);\n  }\n}\n/**\r\n * Inserts `element` into `array` at `index`.\r\n *\r\n * If `index` is not provided, it will insert `element` at the end of `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to add\r\n * @param array    Index to add item at\r\n */\nexport function add(array, element, index) {\n  // Append to the end if index is not set\n  if (!$type.isNumber(index)) {\n    array.push(element);\n  }\n  // Add to the beginning of array if index is 0\n  else if (index === 0) {\n    array.unshift(element);\n  }\n  // Add to indicated place if index is set\n  else {\n    array.splice(index, 0, element);\n  }\n}\n/**\r\n * Pushes `element` into `array` if it doesn't already exist.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to add\r\n */\nexport function pushOne(array, element) {\n  if (array.indexOf(element) === -1) {\n    array.push(element);\n  }\n}\n/**\r\n * Removes `element` from `array` (if it exists) and then inserts `element` at\r\n * `index`.\r\n *\r\n * If `index` is not provided, it will insert `element` at the end of `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to remove\r\n * @param array    Index to move item to\r\n */\nexport function replace(array, element, index) {\n  // check if exists\n  let ind = array.indexOf(element);\n  // remove if exists\n  if (ind !== -1) {\n    array.splice(ind, 1);\n  }\n  // add to end if index is not set\n  if (!$type.isNumber(index)) {\n    array.push(element);\n  }\n  // add to indicated place if index is set\n  else {\n    array.splice(index, 0, element);\n  }\n}\n/**\r\n * Wraps `input` in an array, if it isn't already an array.\r\n *\r\n * @param input  Source value\r\n * @return An array\r\n */\nexport function toArray(input) {\n  if (Array.isArray(input)) {\n    return input;\n  } else {\n    return [input];\n  }\n}\n/**\r\n * Returns `true` if `element` exists in `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to search for\r\n * @returns Item in array?\r\n */\nexport function has(array, element) {\n  return indexOf(array, element) !== -1;\n}\n/**\r\n * Returns a shallow copy of `array`.\r\n *\r\n * @param array  Source array\r\n * @returns Copy of the array\r\n */\nexport function copy(array) {\n  const length = array.length;\n  // It's faster to create the array with a pre-defined length\n  const output = new Array(length);\n  for (let i = 0; i < length; ++i) {\n    // Because the array has a pre-defined length, we have to assign rather than push\n    // This is also faster than pushing\n    output[i] = array[i];\n  }\n  return output;\n}\n/**\r\n * Returns a copy of `array` which contains all the elements between `start`\r\n * and `end`. (including `start` and excluding `end`)\r\n *\r\n * If `end` is not provided, it defaults to `array.length`.\r\n *\r\n * @param array  Source array\r\n * @param start  Start index\r\n * @param end    End index\r\n * @returns Part of the array\r\n */\nexport function slice(array, start, end = array.length) {\n  const output = new Array(end - start);\n  for (let i = start; i < end; ++i) {\n    output[i - start] = array[i];\n  }\n  return output;\n}\n/**\r\n * Inserts a value into array at specific index.\r\n *\r\n * @param array  Source array\r\n * @param index  Index\r\n * @param value  Value to insert\r\n */\nexport function insertIndex(array, index, value) {\n  array.splice(index, 0, value);\n}\n/**\r\n * Removes a value from array at specific index.\r\n *\r\n * @param array  Source array\r\n * @param index  Index\r\n */\nexport function removeIndex(array, index) {\n  array.splice(index, 1);\n}\n/**\r\n * Searches the array using custom function and returns index of the item if\r\n * found.\r\n *\r\n * Will call `matches` function on all items of the array. If return value\r\n * evaluates to `true`, index is returned.\r\n *\r\n * Otherwise returns -1.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Index of the item if found\r\n */\nexport function findIndex(array, matches) {\n  const length = array.length;\n  for (let i = 0; i < length; ++i) {\n    if (matches(array[i], i)) {\n      return i;\n    }\n  }\n  return -1;\n}\n/**\r\n * This is the same as `findIndex` except it searches from right to left.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Index of the item if found\r\n */\nexport function findIndexReverse(array, matches) {\n  let i = array.length;\n  while (i > 0) {\n    --i;\n    if (matches(array[i], i)) {\n      return i;\n    }\n  }\n  return -1;\n}\n/**\r\n * Searches the array using custom function and returns item if found.\r\n *\r\n * Will call `matches` function on all items of the array. If return value\r\n * evaluates to `true`, index is returned.\r\n *\r\n * Otherwise returns `undefined`.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Item if found\r\n */\nexport function find(array, matches) {\n  const index = findIndex(array, matches);\n  if (index !== -1) {\n    return array[index];\n  }\n}\n/**\r\n * This is the same as `find` except it searches from right to left.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Item if found\r\n */\nexport function findReverse(array, matches) {\n  const index = findIndexReverse(array, matches);\n  if (index !== -1) {\n    return array[index];\n  }\n}\n/**\r\n * Searches the array using custom function and returns item if found.\r\n *\r\n * Will call `matches` function on all items of the array. If value\r\n * is not `undefined`, it returns it.\r\n *\r\n * Otherwise returns `undefined`.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Item if found\r\n */\nexport function findMap(array, matches) {\n  const length = array.length;\n  for (let i = 0; i < length; ++i) {\n    const value = matches(array[i], i);\n    if (value !== undefined) {\n      return value;\n    }\n  }\n}\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\nexport function shuffle(array) {\n  // https://stackoverflow.com/a/2450976/449477\n  let currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n}\n/**\r\n * Orders an array using specific `ordering` function and returns right-most index of\r\n * the `value`.\r\n *\r\n * @ignore Exclude from docs\r\n * @param array     Source array\r\n * @param ordering  An ordering function\r\n * @returns Result of the search\r\n */\nexport function getSortedIndex(array, ordering) {\n  let start = 0;\n  let end = array.length;\n  let found = false;\n  while (start < end) {\n    // TODO is this faster/slower than using Math.floor ?\n    const pivot = start + end >> 1;\n    const order = ordering(array[pivot]);\n    // less\n    if (order < 0) {\n      start = pivot + 1;\n      // equal\n    } else if (order === 0) {\n      found = true;\n      start = pivot + 1;\n      // more\n    } else {\n      end = pivot;\n    }\n  }\n  return {\n    found: found,\n    index: found ? start - 1 : start\n  };\n}\n/**\r\n * Orders an array using specific `ordering` function and returns left-most index of\r\n * the `value`.\r\n *\r\n * @ignore Exclude from docs\r\n * @param array     Source array\r\n * @param ordering  An ordering function\r\n * @returns Result of the search\r\n */\nexport function getFirstSortedIndex(array, ordering) {\n  let start = 0;\n  let end = array.length;\n  let found = false;\n  while (start < end) {\n    // TODO is this faster/slower than using Math.floor ?\n    const pivot = start + end >> 1;\n    const order = ordering(array[pivot]);\n    // less\n    if (order < 0) {\n      start = pivot + 1;\n      // equal\n    } else if (order === 0) {\n      found = true;\n      end = pivot;\n      // more\n    } else {\n      end = pivot;\n    }\n  }\n  return {\n    found: found,\n    index: start\n  };\n}\nexport function keepIf(array, keep) {\n  let i = array.length;\n  while (i > 0) {\n    --i;\n    if (!keep(array[i])) {\n      array.splice(i, 1);\n    }\n  }\n}\n", "/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport * as $array from \"./Array\";\n/**\r\n * A base class for disposable objects.\r\n *\r\n * @ignore Exclude from docs\r\n */\nexport class DisposerClass {\n  /**\r\n   * Constructor.\r\n   */\n  constructor() {\n    /**\r\n     * Is object disposed?\r\n     */\n    Object.defineProperty(this, \"_disposed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this._disposed = false;\n  }\n  /**\r\n   * Checks if object is disposed.\r\n   *\r\n   * @return Disposed?\r\n   */\n  isDisposed() {\n    return this._disposed;\n  }\n  /**\r\n   * Disposes the object.\r\n   */\n  dispose() {\n    if (!this._disposed) {\n      this._disposed = true;\n      this._dispose();\n    }\n  }\n}\n/**\r\n * A class for creating an IDisposer.\r\n *\r\n * @ignore Exclude from docs\r\n */\nexport class Disposer {\n  /**\r\n   * Constructor.\r\n   *\r\n   * @param dispose  Function that disposes object\r\n   */\n  constructor(dispose) {\n    /**\r\n     * Is object disposed?\r\n     */\n    Object.defineProperty(this, \"_disposed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /**\r\n     * Method that disposes the object.\r\n     */\n    Object.defineProperty(this, \"_dispose\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this._disposed = false;\n    this._dispose = dispose;\n  }\n  /**\r\n   * Checks if object is disposed.\r\n   *\r\n   * @return Disposed?\r\n   */\n  isDisposed() {\n    return this._disposed;\n  }\n  /**\r\n   * Disposes the object.\r\n   */\n  dispose() {\n    if (!this._disposed) {\n      this._disposed = true;\n      this._dispose();\n    }\n  }\n}\n/**\r\n * This can be extended by other classes to add a `_disposers` property.\r\n *\r\n * @ignore Exclude from docs\r\n */\nexport class ArrayDisposer extends DisposerClass {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"_disposers\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n  }\n  _dispose() {\n    $array.each(this._disposers, x => {\n      x.dispose();\n    });\n  }\n}\n/**\r\n * A collection of related disposers that can be disposed in one go.\r\n *\r\n * @ignore Exclude from docs\r\n */\nexport class MultiDisposer extends DisposerClass {\n  constructor(disposers) {\n    super();\n    Object.defineProperty(this, \"_disposers\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this._disposers = disposers;\n  }\n  _dispose() {\n    $array.each(this._disposers, x => {\n      x.dispose();\n    });\n  }\n  get disposers() {\n    return this._disposers;\n  }\n}\n/**\r\n * A special kind of Disposer that has attached value set.\r\n *\r\n * If a new value is set using `set()` method, the old disposer value is\r\n * disposed.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nexport class MutableValueDisposer extends DisposerClass {\n  constructor() {\n    super(...arguments);\n    /**\r\n     * Current disposer.\r\n     */\n    Object.defineProperty(this, \"_disposer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /**\r\n     * Current value.\r\n     */\n    Object.defineProperty(this, \"_value\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n  }\n  _dispose() {\n    if (this._disposer != null) {\n      this._disposer.dispose();\n      this._disposer = undefined;\n    }\n  }\n  /**\r\n   * Returns current value.\r\n   *\r\n   * @return Value\r\n   */\n  get() {\n    return this._value;\n  }\n  /**\r\n   * Sets value and disposes previous disposer if it was set.\r\n   *\r\n   * @param value     New value\r\n   * @param disposer  Disposer\r\n   */\n  set(value, disposer) {\n    if (this._disposer != null) {\n      this._disposer.dispose();\n    }\n    this._disposer = disposer;\n    this._value = value;\n  }\n  /**\r\n   * Resets the disposer value.\r\n   */\n  reset() {\n    this.set(undefined, undefined);\n  }\n}\n/**\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n */\nexport class CounterDisposer extends Disposer {\n  constructor() {\n    super(...arguments);\n    /**\r\n     * [_counter description]\r\n     *\r\n     * @todo Description\r\n     */\n    Object.defineProperty(this, \"_counter\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n  }\n  /**\r\n   * [increment description]\r\n   *\r\n   * @todo Description\r\n   */\n  increment() {\n    // TODO throw an error if it is disposed\n    ++this._counter;\n    // TODO make this more efficient\n    return new Disposer(() => {\n      --this._counter;\n      if (this._counter === 0) {\n        this.dispose();\n      }\n    });\n  }\n}\n", "import * as $array from \"./Array\";\nexport function keys(object) {\n  return Object.keys(object);\n}\n/**\r\n * Returns an array of object's property names ordered using specific ordering\r\n * function.\r\n *\r\n * @param object  Source object\r\n * @param order   Ordering function\r\n * @returns Object property names\r\n */\nexport function keysOrdered(object, order) {\n  return keys(object).sort(order);\n}\nexport function copy(object) {\n  return Object.assign({}, object);\n}\nexport function each(object, f) {\n  keys(object).forEach(key => {\n    f(key, object[key]);\n  });\n}\n/**\r\n * Iterates through all properties of the object calling `fn` for each of them.\r\n *\r\n * If return value of the function evaluates to `false` further iteration is\r\n * cancelled.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n */\nexport function eachContinue(object, fn) {\n  for (let key in object) {\n    if (hasKey(object, key)) {\n      if (!fn(key, object[key])) {\n        break;\n      }\n    }\n  }\n}\n/**\r\n * Orders object properties using custom `ord` function and iterates through\r\n * them calling `fn` for each of them.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n * @param order   Ordering function\r\n */\nexport function eachOrdered(object, fn, ord) {\n  $array.each(keysOrdered(object, ord), key => {\n    fn(key, object[key]);\n  });\n}\n/**\r\n * Checks if `object` has a specific `key`.\r\n *\r\n * @param object  Source object\r\n * @param key     Property name\r\n * @returns Has key?\r\n */\nexport function hasKey(object, key) {\n  return {}.hasOwnProperty.call(object, key);\n}\n/**\r\n * Copies all properties of one object to the other, omitting undefined, but only if property in target object doesn't have a value set.\r\n *\r\n * @param fromObject  Source object\r\n * @param toObject    Target object\r\n * @return Updated target object\r\n * @todo Maybe consolidate with utils.copy?\r\n */\nexport function softCopyProperties(source, target) {\n  each(source, (key, value) => {\n    // only if value is set\n    //if ($type.hasValue(value) && !($type.hasValue((<any>target)[key]))) {\n    if (value != null && target[key] == null) {\n      target[key] = value;\n    }\n  });\n  return target;\n}\n", "/**\r\n * Event Dispatcher module is used for registering listeners and dispatching\r\n * events across amCharts system.\r\n */\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\nimport { Disposer, MultiDisposer } from \"./Disposer\";\nimport * as $array from \"./Array\";\nimport * as $type from \"./Type\";\n/**\r\n * Universal Event Dispatcher.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/events/} for more info\r\n */\nexport class EventDispatcher {\n  /**\r\n   * Constructor\r\n   */\n  constructor() {\n    Object.defineProperty(this, \"_listeners\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_killed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_disabled\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_iterating\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_enabled\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_disposed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this._listeners = [];\n    this._killed = [];\n    this._disabled = {};\n    this._iterating = 0;\n    this._enabled = true;\n    this._disposed = false;\n  }\n  /**\r\n   * Returns if this object has been already disposed.\r\n   *\r\n   * @return Disposed?\r\n   */\n  isDisposed() {\n    return this._disposed;\n  }\n  /**\r\n   * Dispose (destroy) this object.\r\n   */\n  dispose() {\n    if (!this._disposed) {\n      this._disposed = true;\n      const a = this._listeners;\n      this._iterating = 1;\n      this._listeners = null;\n      this._disabled = null;\n      try {\n        $array.each(a, x => {\n          x.disposer.dispose();\n        });\n      } finally {\n        this._killed = null;\n        this._iterating = null;\n      }\n    }\n  }\n  /**\r\n   * Checks if this particular event dispatcher has any listeners set.\r\n   *\r\n   * @return Has listeners?\r\n   */\n  hasListeners() {\n    return this._listeners.length !== 0;\n  }\n  /**\r\n   * Checks if this particular event dispatcher has any particular listeners set.\r\n   *\r\n   * @return Has particular event listeners?\r\n   */\n  hasListenersByType(type) {\n    return $array.any(this._listeners, x => (x.type === null || x.type === type) && !x.killed);\n  }\n  /**\r\n   * Enable dispatching of events if they were previously disabled by\r\n   * `disable()`.\r\n   */\n  enable() {\n    this._enabled = true;\n  }\n  /**\r\n   * Disable dispatching of events until re-enabled by `enable()`.\r\n   */\n  disable() {\n    this._enabled = false;\n  }\n  /**\r\n   * Enable dispatching particular event, if it was disabled before by\r\n   * `disableType()`.\r\n   *\r\n   * @param type Event type\r\n   */\n  enableType(type) {\n    delete this._disabled[type];\n  }\n  /**\r\n   * Disable dispatching of events for a certain event type.\r\n   *\r\n   * Optionally, can set how many dispatches to skip before automatically\r\n   * re-enabling the dispatching.\r\n   *\r\n   * @param type    Event type\r\n   * @param amount  Number of event dispatches to skip\r\n   */\n  disableType(type, amount = Infinity) {\n    this._disabled[type] = amount;\n  }\n  /**\r\n   * Removes listener from dispatcher.\r\n   *\r\n   * Will throw an exception if such listener does not exists.\r\n   *\r\n   * @param listener Listener to remove\r\n   */\n  _removeListener(listener) {\n    if (this._iterating === 0) {\n      const index = this._listeners.indexOf(listener);\n      if (index === -1) {\n        throw new Error(\"Invalid state: could not remove listener\");\n      }\n      this._listeners.splice(index, 1);\n    } else {\n      this._killed.push(listener);\n    }\n  }\n  /**\r\n   * Removes existing listener by certain parameters.\r\n   *\r\n   * @param once         Listener's once setting\r\n   * @param type         Listener's type\r\n   * @param callback     Callback function\r\n   * @param context      Callback context\r\n   */\n  _removeExistingListener(once, type, callback, context) {\n    if (this._disposed) {\n      throw new Error(\"EventDispatcher is disposed\");\n    }\n    this._eachListener(info => {\n      if (info.once === once &&\n      // TODO is this correct ?\n      info.type === type && (callback === undefined || info.callback === callback) && info.context === context) {\n        info.disposer.dispose();\n      }\n    });\n  }\n  /**\r\n   * Checks if dispatching for particular event type is enabled.\r\n   *\r\n   * @param type  Event type\r\n   * @return Enabled?\r\n   */\n  isEnabled(type) {\n    if (this._disposed) {\n      throw new Error(\"EventDispatcher is disposed\");\n    }\n    // TODO is this check correct ?\n    return this._enabled && this._listeners.length > 0 && this.hasListenersByType(type) && this._disabled[type] === undefined;\n  }\n  /**\r\n   * Removes all listeners of a particular event type\r\n   *\r\n   * @param type  Listener's type\r\n   */\n  removeType(type) {\n    if (this._disposed) {\n      throw new Error(\"EventDispatcher is disposed\");\n    }\n    this._eachListener(info => {\n      if (info.type === type) {\n        info.disposer.dispose();\n      }\n    });\n  }\n  /**\r\n   * Checks if there's already a listener with specific parameters.\r\n   *\r\n   * @param type      Listener's type\r\n   * @param callback  Callback function\r\n   * @param context   Callback context\r\n   * @return Has listener?\r\n   */\n  has(type, callback, context) {\n    const index = $array.findIndex(this._listeners, info => {\n      return info.once !== true &&\n      // Ignoring \"once\" listeners\n      info.type === type && (callback === undefined || info.callback === callback) && info.context === context;\n    });\n    return index !== -1;\n  }\n  /**\r\n   * Checks whether event of the particular type should be dispatched.\r\n   *\r\n   * @param type  Event type\r\n   * @return Dispatch?\r\n   */\n  _shouldDispatch(type) {\n    if (this._disposed) {\n      throw new Error(\"EventDispatcher is disposed\");\n    }\n    const count = this._disabled[type];\n    if (!$type.isNumber(count)) {\n      return this._enabled;\n    } else {\n      if (count <= 1) {\n        delete this._disabled[type];\n      } else {\n        --this._disabled[type];\n      }\n      return false;\n    }\n  }\n  /**\r\n   * [_eachListener description]\r\n   *\r\n   * All of this extra code is needed when a listener is removed while iterating\r\n   *\r\n   * @todo Description\r\n   * @param fn [description]\r\n   */\n  _eachListener(fn) {\n    ++this._iterating;\n    try {\n      $array.each(this._listeners, fn);\n    } finally {\n      --this._iterating;\n      // TODO should this be inside or outside the finally ?\n      if (this._iterating === 0 && this._killed.length !== 0) {\n        // Remove killed listeners\n        $array.each(this._killed, killed => {\n          this._removeListener(killed);\n        });\n        this._killed.length = 0;\n      }\n    }\n  }\n  /**\r\n   * Dispatches an event immediately without waiting for next cycle.\r\n   *\r\n   * @param type   Event type\r\n   * @param event  Event object\r\n   * @todo automatically add in type and target properties if they are missing\r\n   */\n  dispatch(type, event) {\n    if (this._shouldDispatch(type)) {\n      // TODO check if it's faster to use an object of listeners rather than a single big array\n      // TODO if the function throws, maybe it should keep going ?\n      this._eachListener(listener => {\n        if (!listener.killed && (listener.type === null || listener.type === type)) {\n          listener.dispatch(type, event);\n        }\n      });\n    }\n  }\n  /**\r\n   * Shelves the event to be dispatched within next update cycle.\r\n   *\r\n   * @param type   Event type\r\n   * @param event  Event object\r\n   * @todo automatically add in type and target properties if they are missing\r\n   */\n  /*public dispatchLater<Key extends keyof T>(type: Key, event: T[Key]): void {\r\n      if (this._shouldDispatch(type)) {\r\n          this._eachListener((listener) => {\r\n              // TODO check if it's faster to use an object of listeners rather than a single big array\r\n              if (!listener.killed && (listener.type === null || listener.type === type)) {\r\n                  // TODO if the function throws, maybe it should keep going ?\r\n                  // TODO dispatch during the update cycle, rather than using whenIdle\r\n                  $async.whenIdle(() => {\r\n                      if (!listener.killed) {\r\n                          listener.dispatch(type, event);\r\n                      }\r\n                  });\r\n              }\r\n          });\r\n      }\r\n  }*/\n  /**\r\n   * Creates, catalogs and returns an [[EventListener]].\r\n   *\r\n   * Event listener can be disposed.\r\n   *\r\n   * @param once         Listener's once setting\r\n   * @param type         Listener's type\r\n   * @param callback     Callback function\r\n   * @param context      Callback context\r\n   * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n   * @param dispatch\r\n   * @returns An event listener\r\n   */\n  _on(once, type, callback, context, shouldClone, dispatch) {\n    if (this._disposed) {\n      throw new Error(\"EventDispatcher is disposed\");\n    }\n    this._removeExistingListener(once, type, callback, context);\n    const info = {\n      type: type,\n      callback: callback,\n      context: context,\n      shouldClone: shouldClone,\n      dispatch: dispatch,\n      killed: false,\n      once: once,\n      disposer: new Disposer(() => {\n        info.killed = true;\n        this._removeListener(info);\n      })\n    };\n    this._listeners.push(info);\n    return info;\n  }\n  /**\r\n   * Creates an event listener to be invoked on **any** event.\r\n   *\r\n   * @param callback     Callback function\r\n   * @param context      Callback context\r\n   * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n   * @returns A disposable event listener\r\n   */\n  onAll(callback, context, shouldClone = true) {\n    return this._on(false, null, callback, context, shouldClone, (_type, event) => callback.call(context, event)).disposer;\n  }\n  /**\r\n   * Creates an event listener to be invoked on a specific event type.\r\n   *\r\n   * ```TypeScript\r\n   * button.events.once(\"click\", (ev) => {\r\n   *   console.log(\"Button clicked\");\r\n   * }, this);\r\n   * ```\r\n   * ```JavaScript\r\n   * button.events.once(\"click\", (ev) => {\r\n   *   console.log(\"Button clicked\");\r\n   * }, this);\r\n   * ```\r\n   *\r\n   * The above will invoke our custom event handler whenever series we put\r\n   * event on is hidden.\r\n   *\r\n   * @param type         Listener's type\r\n   * @param callback     Callback function\r\n   * @param context      Callback context\r\n   * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n   * @returns A disposable event listener\r\n   */\n  on(type, callback, context, shouldClone = true) {\n    return this._on(false, type, callback, context, shouldClone, (_type, event) => callback.call(context, event)).disposer;\n  }\n  /**\r\n   * Creates an event listener to be invoked on a specific event type once.\r\n   *\r\n   * Once the event listener is invoked, it is automatically disposed.\r\n   *\r\n   * ```TypeScript\r\n   * button.events.once(\"click\", (ev) => {\r\n   *   console.log(\"Button clicked\");\r\n   * }, this);\r\n   * ```\r\n   * ```JavaScript\r\n   * button.events.once(\"click\", (ev) => {\r\n   *   console.log(\"Button clicked\");\r\n   * }, this);\r\n   * ```\r\n   *\r\n   * The above will invoke our custom event handler the first time series we\r\n   * put event on is hidden.\r\n   *\r\n   * @param type         Listener's type\r\n   * @param callback     Callback function\r\n   * @param context      Callback context\r\n   * @param shouldClone  Whether the listener should be copied when the EventDispatcher is copied\r\n   * @returns A disposable event listener\r\n   */\n  once(type, callback, context, shouldClone = true) {\n    const x = this._on(true, type, callback, context, shouldClone, (_type, event) => {\n      x.disposer.dispose();\n      callback.call(context, event);\n    });\n    // TODO maybe this should return a different Disposer ?\n    return x.disposer;\n  }\n  /**\r\n   * Removes the event listener with specific parameters.\r\n   *\r\n   * @param type         Listener's type\r\n   * @param callback     Callback function\r\n   * @param context      Callback context\r\n   */\n  off(type, callback, context) {\n    this._removeExistingListener(false, type, callback, context);\n  }\n  /**\r\n   * Copies all dispatcher parameters, including listeners, from another event\r\n   * dispatcher.\r\n   *\r\n   * @param source Source event dispatcher\r\n   * @ignore\r\n   */\n  copyFrom(source) {\n    if (this._disposed) {\n      throw new Error(\"EventDispatcher is disposed\");\n    }\n    if (source === this) {\n      throw new Error(\"Cannot copyFrom the same TargetedEventDispatcher\");\n    }\n    const disposers = [];\n    $array.each(source._listeners, x => {\n      // TODO is this correct ?\n      if (!x.killed && x.shouldClone) {\n        if (x.type === null) {\n          disposers.push(this.onAll(x.callback, x.context));\n        } else if (x.once) {\n          disposers.push(this.once(x.type, x.callback, x.context));\n        } else {\n          disposers.push(this.on(x.type, x.callback, x.context));\n        }\n      }\n    });\n    return new MultiDisposer(disposers);\n  }\n}\n/**\r\n * A version of the [[EventDispatcher]] that dispatches events for a specific\r\n * target object.\r\n *\r\n * @ignore\r\n */\nexport class TargetedEventDispatcher extends EventDispatcher {\n  /**\r\n   * Constructor\r\n   *\r\n   * @param target Event dispatcher target\r\n   */\n  constructor(target) {\n    super();\n    /**\r\n     * A target object which is originating events using this dispatcher.\r\n     */\n    Object.defineProperty(this, \"target\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.target = target;\n  }\n  /**\r\n   * Copies all dispatcher parameters, including listeners, from another event\r\n   * dispatcher.\r\n   *\r\n   * @param source Source event dispatcher\r\n   * @ignore\r\n   */\n  copyFrom(source) {\n    if (this._disposed) {\n      throw new Error(\"EventDispatcher is disposed\");\n    }\n    if (source === this) {\n      throw new Error(\"Cannot copyFrom the same TargetedEventDispatcher\");\n    }\n    const disposers = [];\n    $array.each(source._listeners, x => {\n      // TODO very hacky\n      if (x.context === source.target) {\n        return;\n      }\n      // TODO is this correct ?\n      if (!x.killed && x.shouldClone) {\n        if (x.type === null) {\n          disposers.push(this.onAll(x.callback, x.context));\n        } else if (x.once) {\n          disposers.push(this.once(x.type, x.callback, x.context));\n        } else {\n          disposers.push(this.on(x.type, x.callback, x.context));\n        }\n      }\n    });\n    return new MultiDisposer(disposers);\n  }\n}\n", "import { EventDispatcher } from \"./EventDispatcher\";\nimport { Disposer, MultiDisposer } from \"./Disposer\";\nimport * as $array from \"./Array\";\nimport * as $object from \"./Object\";\nimport * as $type from \"./Type\";\nfunction disposeSettings(settings) {\n  $object.each(settings, (_key, value) => {\n    if ($type.isObject(value) && typeof value.dispose === \"function\") {\n      value.enableDispose = true;\n      value.dispose();\n    }\n  });\n}\nexport class TemplateState {\n  constructor(name, template, settings) {\n    Object.defineProperty(this, \"_settings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_template\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this._name = name;\n    this._template = template;\n    this._settings = settings;\n  }\n  _dispose() {\n    disposeSettings(this._settings);\n  }\n  get(key, fallback) {\n    const value = this._settings[key];\n    if (value !== undefined) {\n      return value;\n    } else {\n      return fallback;\n    }\n  }\n  set(key, value) {\n    this._settings[key] = value;\n    // TODO maybe only do this if the value changed ?\n    this._template._stateChanged(this._name);\n  }\n  remove(key) {\n    delete this._settings[key];\n    // TODO maybe only do this if the value changed ?\n    this._template._stateChanged(this._name);\n  }\n  setAll(settings) {\n    $object.keys(settings).forEach(key => {\n      this._settings[key] = settings[key];\n    });\n    this._template._stateChanged(this._name);\n  }\n  _apply(other, seen) {\n    $object.each(this._settings, (key, value) => {\n      if (!seen[key] && !other._userSettings[key]) {\n        seen[key] = true;\n        other.setRaw(key, value);\n      }\n    });\n  }\n}\nexport class TemplateStates {\n  constructor(template) {\n    Object.defineProperty(this, \"_template\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_states\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    this._template = template;\n  }\n  _dispose() {\n    $object.each(this._states, (_key, state) => {\n      state._dispose();\n    });\n  }\n  lookup(name) {\n    return this._states[name];\n  }\n  create(name, settings) {\n    const state = this._states[name];\n    if (state) {\n      state.setAll(settings);\n      return state;\n    } else {\n      const state = new TemplateState(name, this._template, settings);\n      this._states[name] = state;\n      this._template._stateChanged(name);\n      return state;\n    }\n  }\n  remove(name) {\n    delete this._states[name];\n    this._template._stateChanged(name);\n  }\n  _apply(entity, state) {\n    $object.each(this._states, (key, value) => {\n      let seen = state.states[key];\n      if (seen == null) {\n        seen = state.states[key] = {};\n      }\n      const other = entity.states.create(key, {});\n      value._apply(other, seen);\n    });\n  }\n}\nexport class TemplateAdapters {\n  constructor() {\n    Object.defineProperty(this, \"_callbacks\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n  }\n  add(key, callback) {\n    let callbacks = this._callbacks[key];\n    if (callbacks === undefined) {\n      callbacks = this._callbacks[key] = [];\n    }\n    callbacks.push(callback);\n    return new Disposer(() => {\n      $array.removeFirst(callbacks, callback);\n      if (callbacks.length === 0) {\n        delete this._callbacks[key];\n      }\n    });\n  }\n  remove(key) {\n    const callbacks = this._callbacks[key];\n    if (callbacks !== undefined) {\n      delete this._callbacks[key];\n    }\n  }\n  _apply(entity) {\n    const disposers = [];\n    $object.each(this._callbacks, (key, callbacks) => {\n      $array.each(callbacks, callback => {\n        disposers.push(entity.adapters.add(key, callback));\n      });\n    });\n    return new MultiDisposer(disposers);\n  }\n}\n// TODO maybe extend from Properties ?\nexport class Template {\n  constructor(settings, isReal) {\n    Object.defineProperty(this, \"_disposed\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"_settings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_privateSettings\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    // TODO code duplication with Properties\n    Object.defineProperty(this, \"_settingEvents\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_privateSettingEvents\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"_entities\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, \"states\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new TemplateStates(this)\n    });\n    Object.defineProperty(this, \"adapters\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new TemplateAdapters()\n    });\n    Object.defineProperty(this, \"events\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new EventDispatcher()\n    });\n    Object.defineProperty(this, \"setup\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    if (!isReal) {\n      throw new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");\n    }\n    this._settings = settings;\n  }\n  /**\r\n   * Use this method to create an instance of this class.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\r\n   * @param   root      Root element\r\n   * @param   settings  Settings\r\n   * @param   template  Template\r\n   * @return            Instantiated object\r\n   */\n  static new(settings) {\n    return new Template(settings, true);\n  }\n  _dispose() {\n    disposeSettings(this._settings);\n    disposeSettings(this._privateSettings);\n  }\n  /**\r\n   * Returns `true` if this element is disposed.\r\n   *\r\n   * @return Disposed\r\n   */\n  isDisposed() {\n    return this._disposed;\n  }\n  /**\r\n   * Disposes this object.\r\n   */\n  dispose() {\n    if (!this._disposed) {\n      this._disposed = true;\n      this._dispose();\n    }\n  }\n  _checkDisposed() {\n    if (this._disposed) {\n      throw new Error(\"Template is disposed\");\n    }\n  }\n  /**\r\n   * Array of all entities using this template.\r\n   */\n  get entities() {\n    return this._entities;\n  }\n  get(key, fallback) {\n    this._checkDisposed();\n    const value = this._settings[key];\n    if (value !== undefined) {\n      return value;\n    } else {\n      return fallback;\n    }\n  }\n  setRaw(key, value) {\n    this._checkDisposed();\n    this._settings[key] = value;\n  }\n  set(key, value) {\n    this._checkDisposed();\n    if (this._settings[key] !== value) {\n      this.setRaw(key, value);\n      this._entities.forEach(entity => {\n        entity._setTemplateProperty(this, key, value);\n      });\n    }\n  }\n  remove(key) {\n    this._checkDisposed();\n    if (key in this._settings) {\n      delete this._settings[key];\n      this._entities.forEach(entity => {\n        entity._removeTemplateProperty(key);\n      });\n    }\n  }\n  removeAll() {\n    this._checkDisposed();\n    $object.each(this._settings, (key, _value) => {\n      this.remove(key);\n    });\n  }\n  getPrivate(key, fallback) {\n    this._checkDisposed();\n    const value = this._privateSettings[key];\n    if (value !== undefined) {\n      return value;\n    } else {\n      return fallback;\n    }\n  }\n  setPrivateRaw(key, value) {\n    this._checkDisposed();\n    this._privateSettings[key] = value;\n    return value;\n  }\n  setPrivate(key, value) {\n    this._checkDisposed();\n    if (this._privateSettings[key] !== value) {\n      this.setPrivateRaw(key, value);\n      this._entities.forEach(entity => {\n        entity._setTemplatePrivateProperty(this, key, value);\n      });\n    }\n    return value;\n  }\n  removePrivate(key) {\n    this._checkDisposed();\n    if (key in this._privateSettings) {\n      delete this._privateSettings[key];\n      this._entities.forEach(entity => {\n        entity._removeTemplatePrivateProperty(key);\n      });\n    }\n  }\n  setAll(value) {\n    this._checkDisposed();\n    $object.each(value, (key, value) => {\n      this.set(key, value);\n    });\n  }\n  // TODO code duplication with Properties\n  on(key, callback) {\n    this._checkDisposed();\n    let events = this._settingEvents[key];\n    if (events === undefined) {\n      events = this._settingEvents[key] = [];\n    }\n    events.push(callback);\n    return new Disposer(() => {\n      $array.removeFirst(events, callback);\n      if (events.length === 0) {\n        delete this._settingEvents[key];\n      }\n    });\n  }\n  // TODO code duplication with Properties\n  onPrivate(key, callback) {\n    this._checkDisposed();\n    let events = this._privateSettingEvents[key];\n    if (events === undefined) {\n      events = this._privateSettingEvents[key] = [];\n    }\n    events.push(callback);\n    return new Disposer(() => {\n      $array.removeFirst(events, callback);\n      if (events.length === 0) {\n        delete this._privateSettingEvents[key];\n      }\n    });\n  }\n  _apply(entity, state) {\n    this._checkDisposed();\n    const disposers = [];\n    $object.each(this._settingEvents, (key, events) => {\n      $array.each(events, event => {\n        disposers.push(entity.on(key, event));\n      });\n    });\n    $object.each(this._privateSettingEvents, (key, events) => {\n      $array.each(events, event => {\n        disposers.push(entity.onPrivate(key, event));\n      });\n    });\n    this.states._apply(entity, state);\n    disposers.push(this.adapters._apply(entity));\n    disposers.push(entity.events.copyFrom(this.events));\n    return new MultiDisposer(disposers);\n  }\n  _setObjectTemplate(entity) {\n    this._checkDisposed();\n    this._entities.push(entity);\n  }\n  _removeObjectTemplate(entity) {\n    //this._checkDisposed();\n    $array.remove(this._entities, entity);\n  }\n  _stateChanged(name) {\n    this._checkDisposed();\n    this._entities.forEach(entity => {\n      entity._applyStateByKey(name);\n    });\n  }\n}\n", "/**\r\n * @ignore\r\n */\nexport function compare(left, right) {\n  if (left === right) {\n    return 0;\n  } else if (left < right) {\n    return -1;\n  } else {\n    return 1;\n  }\n}\n/**\r\n * @ignore\r\n */\nexport function compareArray(left, right, f) {\n  const leftLength = left.length;\n  const rightLength = right.length;\n  const length = Math.min(leftLength, rightLength);\n  for (let i = 0; i < length; ++i) {\n    const order = f(left[i], right[i]);\n    if (order !== 0) {\n      return order;\n    }\n  }\n  return compare(leftLength, rightLength);\n}\n/**\r\n * @ignore\r\n */\nexport function reverse(order) {\n  if (order < 0) {\n    return 1;\n  } else if (order > 0) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n/**\r\n * @ignore\r\n */\nexport function compareNumber(a, b) {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n}\n", "import { Template } from \"./util/Template\";\nimport * as $order from \"./util/Order\";\nimport * as $array from \"./util/Array\";\n/**\r\n * A base class for an amCharts theme.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/themes/} for more info\r\n * @important\r\n */\nexport class Theme {\n  constructor(root, isReal) {\n    Object.defineProperty(this, \"_root\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_rules\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    this._root = root;\n    if (!isReal) {\n      throw new Error(\"You cannot use `new Class()`, instead use `Class.new()`\");\n    }\n  }\n  /**\r\n   * Use this method to create an instance of this class.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/getting-started/#New_element_syntax} for more info\r\n   * @param   root      Root element\r\n   * @param   settings  Settings\r\n   * @param   template  Template\r\n   * @return            Instantiated object\r\n   */\n  static new(root) {\n    const x = new this(root, true);\n    x.setupDefaultRules();\n    return x;\n  }\n  setupDefaultRules() {}\n  /**\r\n   * Looks up the rules for a specific theme class.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info\r\n   * @param   themeClass Theme class\r\n   * @return             Array<IRule<A>>\r\n   */\n  _lookupRules(themeClass) {\n    return this._rules[themeClass];\n  }\n  /**\r\n   * Creates a [[Template]] for specific theme class and tags.\r\n   *\r\n   * NOTE: the difference from `rule()` is that `ruleRaw()` does not do any\r\n   * type checks.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info\r\n   * @param   themeClass Theme class\r\n   * @param   themeTags  Theme tags\r\n   * @return             Template\r\n   */\n  ruleRaw(themeClass, themeTags = []) {\n    let rules = this._rules[themeClass];\n    if (!rules) {\n      rules = this._rules[themeClass] = [];\n    }\n    themeTags.sort($order.compare);\n    const {\n      index,\n      found\n    } = $array.getSortedIndex(rules, x => {\n      const order = $order.compare(x.tags.length, themeTags.length);\n      if (order === 0) {\n        return $order.compareArray(x.tags, themeTags, $order.compare);\n      } else {\n        return order;\n      }\n    });\n    if (found) {\n      return rules[index].template;\n    } else {\n      const template = Template.new({});\n      rules.splice(index, 0, {\n        tags: themeTags,\n        template\n      });\n      return template;\n    }\n  }\n  /**\r\n   * Creates a [[Template]] for specific theme class and tags.\r\n   *\r\n   * @see {@link https://www.amcharts.com/docs/v5/themes/} for more info\r\n   * @param   themeClass Theme class\r\n   * @param   themeTags  Theme tags\r\n   * @return             Template\r\n   */\n  rule(themeClass, themeTags = []) {\n    return this.ruleRaw(themeClass, themeTags);\n  }\n}\n"],
  "mappings": ";;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBO,SAAS,MAAM,OAAO;AAC3B,SAAO,OAAO,KAAK,MAAM;AAC3B;AAQO,SAAS,QAAQ,OAAO;AAC7B,SAAO,CAAC,EAAE,SAAS,KAAK,KAAK;AAC/B;AAQO,SAAS,OAAO,WAAW,UAAU,oBAAoB;AAC9D,MAAI,CAAC,WAAW;AACd,UAAM,IAAI,MAAM,OAAO;AAAA,EACzB;AACF;AAaO,SAAS,SAAS,OAAO;AAC9B,MAAI,SAAS,QAAQ,CAAC,SAAS,KAAK,GAAG;AACrC,QAAI,YAAY,OAAO,KAAK;AAC5B,QAAI,MAAM,SAAS,KAAK,SAAS,KAAK,KAAK,SAAS,MAAM,MAAM,MAAM,QAAQ,GAAG;AAC/E,aAAO,SAAS,MAAM,QAAQ,eAAe,EAAE,CAAC;AAAA,IAClD;AACA,WAAO;AAAA,EACT;AACA,SAAO;AACT;AAOO,SAAS,OAAO,OAAO;AAC5B,MAAI,OAAO,KAAK,GAAG;AAEjB,WAAO,IAAI,KAAK,KAAK;AAAA,EACvB,WAAW,SAAS,KAAK,GAAG;AAC1B,WAAO,IAAI,KAAK,KAAK;AAAA,EACvB,OAAO;AAEL,QAAI,MAAM,OAAO,KAAK;AACtB,QAAI,CAAC,SAAS,GAAG,GAAG;AAClB,aAAO,IAAI,KAAK,KAAK;AAAA,IACvB,OAAO;AACL,aAAO,IAAI,KAAK,GAAG;AAAA,IACrB;AAAA,EACF;AACF;AAQO,SAAS,eAAe,OAAO;AAEpC,MAAI,MAAM,KAAK,GAAG;AAChB,WAAO;AAAA,EACT;AACA,MAAI,UAAU,UAAU;AACtB,WAAO;AAAA,EACT;AACA,MAAI,UAAU,WAAW;AACvB,WAAO;AAAA,EACT;AAEA,MAAI,UAAU,KAAK,IAAI,UAAU,WAAW;AAC1C,WAAO;AAAA,EACT;AAEA,MAAI,WAAW,QAAQ;AACvB,UAAQ,KAAK,IAAI,KAAK;AAEtB,MAAI,SAAS,gDAAgD,KAAK,KAAK,KAAK;AAC5E,MAAI,SAAS,OAAO,CAAC;AACrB,MAAI,WAAW,OAAO,CAAC,KAAK;AAC5B,MAAI;AAEJ,MAAI,OAAO,CAAC,MAAM,QAAW;AAC3B,UAAM,aAAa,KAAK,SAAS,SAAS,MAAM;AAAA,EAClD,OAAO;AACL,QAAI,WAAW,CAAC,OAAO,CAAC;AAExB,QAAI,QAAQ,GAAG;AACb,UAAI,QAAQ,WAAW;AACvB,YAAM,OAAO,OAAO,KAAK,KAAK,IAAI,SAAS;AAAA,IAE7C,OAAO;AACL,UAAI,QAAQ,WAAW,SAAS;AAChC,UAAI,UAAU,GAAG;AACf,cAAM,SAAS;AAAA,MACjB,WAAW,QAAQ,GAAG;AACpB,cAAM,SAAS,SAAS,MAAM,GAAG,KAAK,IAAI,MAAM,SAAS,MAAM,KAAK;AAAA,MACtE,OAAO;AACL,cAAM,SAAS,WAAW,OAAO,KAAK,KAAK;AAAA,MAC7C;AAAA,IACF;AAAA,EACF;AACA,SAAO,WAAW,MAAM,MAAM;AAChC;AAUO,SAAS,OAAO,QAAQ,QAAQ;AACrC,SAAO,IAAI,MAAM,SAAS,CAAC,EAAE,KAAK,MAAM;AAC1C;AAaO,SAAS,OAAO,OAAO;AAC5B,SAAO,QAAQ,KAAK,MAAM;AAC5B;AAOO,SAAS,SAAS,OAAO;AAC9B,SAAO,OAAO,UAAU;AAC1B;AAOO,SAAS,SAAS,OAAO;AAC9B,SAAO,OAAO,UAAU,YAAY,OAAO,KAAK,KAAK;AACvD;AAOO,SAAS,SAAS,OAAO;AAC9B,SAAO,OAAO,UAAU,YAAY,UAAU;AAChD;AAOO,SAAS,QAAQ,OAAO;AAC7B,SAAO,MAAM,QAAQ,KAAK;AAC5B;AAUO,IAAM,cAAc;AAIpB,IAAM,eAAe;;;ACtN5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBO,SAAS,QAAQ,OAAO,OAAO;AACpC,QAAM,SAAS,MAAM;AACrB,WAAS,IAAI,GAAG,IAAI,QAAQ,EAAE,GAAG;AAE/B,QAAI,MAAM,CAAC,MAAM,OAAO;AACtB,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO;AACT;AAYO,SAAS,IAAI,OAAO,MAAM;AAC/B,QAAM,SAAS,MAAM;AACrB,WAAS,IAAI,GAAG,IAAI,QAAQ,EAAE,GAAG;AAC/B,QAAI,KAAK,MAAM,CAAC,CAAC,GAAG;AAClB,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO;AACT;AASO,SAAS,IAAI,OAAO,IAAI;AAC7B,QAAM,SAAS,MAAM;AACrB,QAAM,SAAS,IAAI,MAAM,MAAM;AAC/B,WAAS,IAAI,GAAG,IAAI,QAAQ,EAAE,GAAG;AAC/B,WAAO,CAAC,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC;AAAA,EAC5B;AACA,SAAO;AACT;AAQO,SAAS,KAAK,OAAO,IAAI;AAC9B,QAAM,SAAS,MAAM;AACrB,WAAS,IAAI,GAAG,IAAI,QAAQ,EAAE,GAAG;AAC/B,OAAG,MAAM,CAAC,GAAG,CAAC;AAAA,EAChB;AACF;AAQO,SAAS,YAAY,OAAO,IAAI;AACrC,MAAI,IAAI,MAAM;AACd,SAAO,IAAI,GAAG;AACZ,MAAE;AACF,OAAG,MAAM,CAAC,GAAG,CAAC;AAAA,EAChB;AACF;AAUO,SAAS,aAAa,OAAO,IAAI;AACtC,QAAM,SAAS,MAAM;AACrB,WAAS,IAAI,GAAG,IAAI,QAAQ,EAAE,GAAG;AAC/B,QAAI,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG;AACpB;AAAA,IACF;AAAA,EACF;AACF;AAOO,SAAS,UAAU,OAAO,OAAO;AACtC,QAAM,SAAS,MAAM;AACrB,WAAS,IAAI,OAAO,IAAI,QAAQ,EAAE,GAAG;AACnC,UAAM,IAAI,KAAK,IAAI,MAAM,CAAC;AAAA,EAC5B;AACA,QAAM,SAAS,SAAS;AAC1B;AAOO,SAAS,KAAK,OAAO;AAC1B,QAAM,SAAS,MAAM;AACrB,SAAO,SAAS,MAAM,SAAS,CAAC,IAAI;AACtC;AAOO,SAAS,MAAM,OAAO;AAC3B,SAAO,MAAM,CAAC;AAChB;AAUO,SAAS,OAAO,OAAO,SAAS,OAAO;AAE5C,UAAQ,KAAK,IAAI,GAAG,KAAK,IAAI,OAAO,MAAM,MAAM,CAAC;AACjD,QAAM,OAAO,OAAO,GAAG,OAAO;AAEhC;AASO,SAAS,SAAS,OAAO,SAAS,OAAO;AAC9C,SAAO,OAAO,OAAO;AACrB,SAAO,OAAO,SAAS,KAAK;AAC9B;AAOO,SAAS,QAAQ,OAAO,OAAO;AACpC,QAAM,SAAS,MAAM;AACrB,WAAS,IAAI,GAAG,IAAI,QAAQ,EAAE,GAAG;AAC/B,UAAM,KAAK,MAAM,CAAC,CAAC;AAAA,EACrB;AACF;AASO,SAAS,OAAO,OAAO,SAAS;AACrC,MAAI,QAAQ;AACZ,MAAI,QAAQ;AACZ,aAAS;AACP,YAAQ,MAAM,QAAQ,SAAS,KAAK;AACpC,QAAI,UAAU,IAAI;AAChB,aAAO;AAAA,IACT,OAAO;AACL,cAAQ;AACR,YAAM,OAAO,OAAO,CAAC;AAAA,IACvB;AAAA,EACF;AACF;AACO,SAAS,YAAY,OAAO,SAAS;AAC1C,MAAI,QAAQ,MAAM,QAAQ,OAAO;AACjC,MAAI,UAAU,IAAI;AAChB,UAAM,OAAO,OAAO,CAAC;AACrB,WAAO;AAAA,EACT,OAAO;AACL,WAAO;AAAA,EACT;AACF;AAaO,SAAS,KAAK,OAAO,SAAS,SAAS;AAG5C,MAAI,QAAQ,QAAQ,OAAO,OAAO;AAElC,MAAI,UAAU,IAAI;AAChB,gBAAY,OAAO,KAAK;AAAA,EAC1B;AACA,MAAI,WAAW,MAAM;AACnB,UAAM,KAAK,OAAO;AAAA,EACpB,OAAO;AACL,gBAAY,OAAO,SAAS,OAAO;AAAA,EACrC;AACF;AAUO,SAAS,IAAI,OAAO,SAAS,OAAO;AAEzC,MAAI,CAAO,SAAS,KAAK,GAAG;AAC1B,UAAM,KAAK,OAAO;AAAA,EACpB,WAES,UAAU,GAAG;AACpB,UAAM,QAAQ,OAAO;AAAA,EACvB,OAEK;AACH,UAAM,OAAO,OAAO,GAAG,OAAO;AAAA,EAChC;AACF;AAOO,SAAS,QAAQ,OAAO,SAAS;AACtC,MAAI,MAAM,QAAQ,OAAO,MAAM,IAAI;AACjC,UAAM,KAAK,OAAO;AAAA,EACpB;AACF;AAWO,SAAS,QAAQ,OAAO,SAAS,OAAO;AAE7C,MAAI,MAAM,MAAM,QAAQ,OAAO;AAE/B,MAAI,QAAQ,IAAI;AACd,UAAM,OAAO,KAAK,CAAC;AAAA,EACrB;AAEA,MAAI,CAAO,SAAS,KAAK,GAAG;AAC1B,UAAM,KAAK,OAAO;AAAA,EACpB,OAEK;AACH,UAAM,OAAO,OAAO,GAAG,OAAO;AAAA,EAChC;AACF;AAOO,SAAS,QAAQ,OAAO;AAC7B,MAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,WAAO;AAAA,EACT,OAAO;AACL,WAAO,CAAC,KAAK;AAAA,EACf;AACF;AAQO,SAAS,IAAI,OAAO,SAAS;AAClC,SAAO,QAAQ,OAAO,OAAO,MAAM;AACrC;AAOO,SAAS,KAAK,OAAO;AAC1B,QAAM,SAAS,MAAM;AAErB,QAAM,SAAS,IAAI,MAAM,MAAM;AAC/B,WAAS,IAAI,GAAG,IAAI,QAAQ,EAAE,GAAG;AAG/B,WAAO,CAAC,IAAI,MAAM,CAAC;AAAA,EACrB;AACA,SAAO;AACT;AAYO,SAAS,MAAM,OAAO,OAAO,MAAM,MAAM,QAAQ;AACtD,QAAM,SAAS,IAAI,MAAM,MAAM,KAAK;AACpC,WAAS,IAAI,OAAO,IAAI,KAAK,EAAE,GAAG;AAChC,WAAO,IAAI,KAAK,IAAI,MAAM,CAAC;AAAA,EAC7B;AACA,SAAO;AACT;AAQO,SAAS,YAAY,OAAO,OAAO,OAAO;AAC/C,QAAM,OAAO,OAAO,GAAG,KAAK;AAC9B;AAOO,SAAS,YAAY,OAAO,OAAO;AACxC,QAAM,OAAO,OAAO,CAAC;AACvB;AAcO,SAAS,UAAU,OAAO,SAAS;AACxC,QAAM,SAAS,MAAM;AACrB,WAAS,IAAI,GAAG,IAAI,QAAQ,EAAE,GAAG;AAC/B,QAAI,QAAQ,MAAM,CAAC,GAAG,CAAC,GAAG;AACxB,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO;AACT;AAQO,SAAS,iBAAiB,OAAO,SAAS;AAC/C,MAAI,IAAI,MAAM;AACd,SAAO,IAAI,GAAG;AACZ,MAAE;AACF,QAAI,QAAQ,MAAM,CAAC,GAAG,CAAC,GAAG;AACxB,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO;AACT;AAaO,SAAS,KAAK,OAAO,SAAS;AACnC,QAAM,QAAQ,UAAU,OAAO,OAAO;AACtC,MAAI,UAAU,IAAI;AAChB,WAAO,MAAM,KAAK;AAAA,EACpB;AACF;AAQO,SAAS,YAAY,OAAO,SAAS;AAC1C,QAAM,QAAQ,iBAAiB,OAAO,OAAO;AAC7C,MAAI,UAAU,IAAI;AAChB,WAAO,MAAM,KAAK;AAAA,EACpB;AACF;AAaO,SAAS,QAAQ,OAAO,SAAS;AACtC,QAAM,SAAS,MAAM;AACrB,WAAS,IAAI,GAAG,IAAI,QAAQ,EAAE,GAAG;AAC/B,UAAM,QAAQ,QAAQ,MAAM,CAAC,GAAG,CAAC;AACjC,QAAI,UAAU,QAAW;AACvB,aAAO;AAAA,IACT;AAAA,EACF;AACF;AAQO,SAAS,QAAQ,OAAO;AAE7B,MAAI,eAAe,MAAM,QACvB,gBACA;AAEF,SAAO,MAAM,cAAc;AAEzB,kBAAc,KAAK,MAAM,KAAK,OAAO,IAAI,YAAY;AACrD,oBAAgB;AAEhB,qBAAiB,MAAM,YAAY;AACnC,UAAM,YAAY,IAAI,MAAM,WAAW;AACvC,UAAM,WAAW,IAAI;AAAA,EACvB;AACF;AAUO,SAAS,eAAe,OAAO,UAAU;AAC9C,MAAI,QAAQ;AACZ,MAAI,MAAM,MAAM;AAChB,MAAI,QAAQ;AACZ,SAAO,QAAQ,KAAK;AAElB,UAAM,QAAQ,QAAQ,OAAO;AAC7B,UAAM,QAAQ,SAAS,MAAM,KAAK,CAAC;AAEnC,QAAI,QAAQ,GAAG;AACb,cAAQ,QAAQ;AAAA,IAElB,WAAW,UAAU,GAAG;AACtB,cAAQ;AACR,cAAQ,QAAQ;AAAA,IAElB,OAAO;AACL,YAAM;AAAA,IACR;AAAA,EACF;AACA,SAAO;AAAA,IACL;AAAA,IACA,OAAO,QAAQ,QAAQ,IAAI;AAAA,EAC7B;AACF;AAUO,SAAS,oBAAoB,OAAO,UAAU;AACnD,MAAI,QAAQ;AACZ,MAAI,MAAM,MAAM;AAChB,MAAI,QAAQ;AACZ,SAAO,QAAQ,KAAK;AAElB,UAAM,QAAQ,QAAQ,OAAO;AAC7B,UAAM,QAAQ,SAAS,MAAM,KAAK,CAAC;AAEnC,QAAI,QAAQ,GAAG;AACb,cAAQ,QAAQ;AAAA,IAElB,WAAW,UAAU,GAAG;AACtB,cAAQ;AACR,YAAM;AAAA,IAER,OAAO;AACL,YAAM;AAAA,IACR;AAAA,EACF;AACA,SAAO;AAAA,IACL;AAAA,IACA,OAAO;AAAA,EACT;AACF;AACO,SAAS,OAAO,OAAO,MAAM;AAClC,MAAI,IAAI,MAAM;AACd,SAAO,IAAI,GAAG;AACZ,MAAE;AACF,QAAI,CAAC,KAAK,MAAM,CAAC,CAAC,GAAG;AACnB,YAAM,OAAO,GAAG,CAAC;AAAA,IACnB;AAAA,EACF;AACF;;;ACpiBO,IAAM,gBAAN,MAAoB;AAAA;AAAA;AAAA;AAAA,EAIzB,cAAc;AAIZ,WAAO,eAAe,MAAM,aAAa;AAAA,MACvC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,SAAK,YAAY;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aAAa;AACX,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAIA,UAAU;AACR,QAAI,CAAC,KAAK,WAAW;AACnB,WAAK,YAAY;AACjB,WAAK,SAAS;AAAA,IAChB;AAAA,EACF;AACF;AAMO,IAAM,WAAN,MAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMpB,YAAY,SAAS;AAInB,WAAO,eAAe,MAAM,aAAa;AAAA,MACvC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AAID,WAAO,eAAe,MAAM,YAAY;AAAA,MACtC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,SAAK,YAAY;AACjB,SAAK,WAAW;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aAAa;AACX,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAIA,UAAU;AACR,QAAI,CAAC,KAAK,WAAW;AACnB,WAAK,YAAY;AACjB,WAAK,SAAS;AAAA,IAChB;AAAA,EACF;AACF;AAMO,IAAM,gBAAN,cAA4B,cAAc;AAAA,EAC/C,cAAc;AACZ,UAAM,GAAG,SAAS;AAClB,WAAO,eAAe,MAAM,cAAc;AAAA,MACxC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC;AAAA,IACV,CAAC;AAAA,EACH;AAAA,EACA,WAAW;AACT,IAAO,KAAK,KAAK,YAAY,OAAK;AAChC,QAAE,QAAQ;AAAA,IACZ,CAAC;AAAA,EACH;AACF;AAMO,IAAM,gBAAN,cAA4B,cAAc;AAAA,EAC/C,YAAY,WAAW;AACrB,UAAM;AACN,WAAO,eAAe,MAAM,cAAc;AAAA,MACxC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,SAAK,aAAa;AAAA,EACpB;AAAA,EACA,WAAW;AACT,IAAO,KAAK,KAAK,YAAY,OAAK;AAChC,QAAE,QAAQ;AAAA,IACZ,CAAC;AAAA,EACH;AAAA,EACA,IAAI,YAAY;AACd,WAAO,KAAK;AAAA,EACd;AACF;AAUO,IAAM,uBAAN,cAAmC,cAAc;AAAA,EACtD,cAAc;AACZ,UAAM,GAAG,SAAS;AAIlB,WAAO,eAAe,MAAM,aAAa;AAAA,MACvC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AAID,WAAO,eAAe,MAAM,UAAU;AAAA,MACpC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EACA,WAAW;AACT,QAAI,KAAK,aAAa,MAAM;AAC1B,WAAK,UAAU,QAAQ;AACvB,WAAK,YAAY;AAAA,IACnB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM;AACJ,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,OAAO,UAAU;AACnB,QAAI,KAAK,aAAa,MAAM;AAC1B,WAAK,UAAU,QAAQ;AAAA,IACzB;AACA,SAAK,YAAY;AACjB,SAAK,SAAS;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAIA,QAAQ;AACN,SAAK,IAAI,QAAW,MAAS;AAAA,EAC/B;AACF;AAKO,IAAM,kBAAN,cAA8B,SAAS;AAAA,EAC5C,cAAc;AACZ,UAAM,GAAG,SAAS;AAMlB,WAAO,eAAe,MAAM,YAAY;AAAA,MACtC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,YAAY;AAEV,MAAE,KAAK;AAEP,WAAO,IAAI,SAAS,MAAM;AACxB,QAAE,KAAK;AACP,UAAI,KAAK,aAAa,GAAG;AACvB,aAAK,QAAQ;AAAA,MACf;AAAA,IACF,CAAC;AAAA,EACH;AACF;;;ACnPA;AAAA;AAAA,cAAAA;AAAA,EAAA,YAAAC;AAAA,EAAA,oBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACO,SAAS,KAAK,QAAQ;AAC3B,SAAO,OAAO,KAAK,MAAM;AAC3B;AASO,SAAS,YAAY,QAAQ,OAAO;AACzC,SAAO,KAAK,MAAM,EAAE,KAAK,KAAK;AAChC;AACO,SAASC,MAAK,QAAQ;AAC3B,SAAO,OAAO,OAAO,CAAC,GAAG,MAAM;AACjC;AACO,SAASC,MAAK,QAAQ,GAAG;AAC9B,OAAK,MAAM,EAAE,QAAQ,SAAO;AAC1B,MAAE,KAAK,OAAO,GAAG,CAAC;AAAA,EACpB,CAAC;AACH;AAUO,SAASC,cAAa,QAAQ,IAAI;AACvC,WAAS,OAAO,QAAQ;AACtB,QAAI,OAAO,QAAQ,GAAG,GAAG;AACvB,UAAI,CAAC,GAAG,KAAK,OAAO,GAAG,CAAC,GAAG;AACzB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;AASO,SAAS,YAAY,QAAQ,IAAI,KAAK;AAC3C,EAAO,KAAK,YAAY,QAAQ,GAAG,GAAG,SAAO;AAC3C,OAAG,KAAK,OAAO,GAAG,CAAC;AAAA,EACrB,CAAC;AACH;AAQO,SAAS,OAAO,QAAQ,KAAK;AAClC,SAAO,CAAC,EAAE,eAAe,KAAK,QAAQ,GAAG;AAC3C;AASO,SAAS,mBAAmB,QAAQ,QAAQ;AACjD,EAAAD,MAAK,QAAQ,CAAC,KAAK,UAAU;AAG3B,QAAI,SAAS,QAAQ,OAAO,GAAG,KAAK,MAAM;AACxC,aAAO,GAAG,IAAI;AAAA,IAChB;AAAA,EACF,CAAC;AACD,SAAO;AACT;;;AC/DO,IAAM,kBAAN,MAAsB;AAAA;AAAA;AAAA;AAAA,EAI3B,cAAc;AACZ,WAAO,eAAe,MAAM,cAAc;AAAA,MACxC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,WAAW;AAAA,MACrC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,aAAa;AAAA,MACvC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,cAAc;AAAA,MACxC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,YAAY;AAAA,MACtC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,aAAa;AAAA,MACvC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,SAAK,aAAa,CAAC;AACnB,SAAK,UAAU,CAAC;AAChB,SAAK,YAAY,CAAC;AAClB,SAAK,aAAa;AAClB,SAAK,WAAW;AAChB,SAAK,YAAY;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aAAa;AACX,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAIA,UAAU;AACR,QAAI,CAAC,KAAK,WAAW;AACnB,WAAK,YAAY;AACjB,YAAM,IAAI,KAAK;AACf,WAAK,aAAa;AAClB,WAAK,aAAa;AAClB,WAAK,YAAY;AACjB,UAAI;AACF,QAAO,KAAK,GAAG,OAAK;AAClB,YAAE,SAAS,QAAQ;AAAA,QACrB,CAAC;AAAA,MACH,UAAE;AACA,aAAK,UAAU;AACf,aAAK,aAAa;AAAA,MACpB;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,eAAe;AACb,WAAO,KAAK,WAAW,WAAW;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,mBAAmB,MAAM;AACvB,WAAc,IAAI,KAAK,YAAY,QAAM,EAAE,SAAS,QAAQ,EAAE,SAAS,SAAS,CAAC,EAAE,MAAM;AAAA,EAC3F;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS;AACP,SAAK,WAAW;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA,EAIA,UAAU;AACR,SAAK,WAAW;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW,MAAM;AACf,WAAO,KAAK,UAAU,IAAI;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,YAAY,MAAM,SAAS,UAAU;AACnC,SAAK,UAAU,IAAI,IAAI;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,gBAAgB,UAAU;AACxB,QAAI,KAAK,eAAe,GAAG;AACzB,YAAM,QAAQ,KAAK,WAAW,QAAQ,QAAQ;AAC9C,UAAI,UAAU,IAAI;AAChB,cAAM,IAAI,MAAM,0CAA0C;AAAA,MAC5D;AACA,WAAK,WAAW,OAAO,OAAO,CAAC;AAAA,IACjC,OAAO;AACL,WAAK,QAAQ,KAAK,QAAQ;AAAA,IAC5B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,wBAAwB,MAAM,MAAM,UAAU,SAAS;AACrD,QAAI,KAAK,WAAW;AAClB,YAAM,IAAI,MAAM,6BAA6B;AAAA,IAC/C;AACA,SAAK,cAAc,UAAQ;AACzB,UAAI,KAAK,SAAS;AAAA,MAElB,KAAK,SAAS,SAAS,aAAa,UAAa,KAAK,aAAa,aAAa,KAAK,YAAY,SAAS;AACxG,aAAK,SAAS,QAAQ;AAAA,MACxB;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,UAAU,MAAM;AACd,QAAI,KAAK,WAAW;AAClB,YAAM,IAAI,MAAM,6BAA6B;AAAA,IAC/C;AAEA,WAAO,KAAK,YAAY,KAAK,WAAW,SAAS,KAAK,KAAK,mBAAmB,IAAI,KAAK,KAAK,UAAU,IAAI,MAAM;AAAA,EAClH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAW,MAAM;AACf,QAAI,KAAK,WAAW;AAClB,YAAM,IAAI,MAAM,6BAA6B;AAAA,IAC/C;AACA,SAAK,cAAc,UAAQ;AACzB,UAAI,KAAK,SAAS,MAAM;AACtB,aAAK,SAAS,QAAQ;AAAA,MACxB;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,MAAM,UAAU,SAAS;AAC3B,UAAM,QAAe,UAAU,KAAK,YAAY,UAAQ;AACtD,aAAO,KAAK,SAAS;AAAA,MAErB,KAAK,SAAS,SAAS,aAAa,UAAa,KAAK,aAAa,aAAa,KAAK,YAAY;AAAA,IACnG,CAAC;AACD,WAAO,UAAU;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gBAAgB,MAAM;AACpB,QAAI,KAAK,WAAW;AAClB,YAAM,IAAI,MAAM,6BAA6B;AAAA,IAC/C;AACA,UAAM,QAAQ,KAAK,UAAU,IAAI;AACjC,QAAI,CAAO,SAAS,KAAK,GAAG;AAC1B,aAAO,KAAK;AAAA,IACd,OAAO;AACL,UAAI,SAAS,GAAG;AACd,eAAO,KAAK,UAAU,IAAI;AAAA,MAC5B,OAAO;AACL,UAAE,KAAK,UAAU,IAAI;AAAA,MACvB;AACA,aAAO;AAAA,IACT;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,cAAc,IAAI;AAChB,MAAE,KAAK;AACP,QAAI;AACF,MAAO,KAAK,KAAK,YAAY,EAAE;AAAA,IACjC,UAAE;AACA,QAAE,KAAK;AAEP,UAAI,KAAK,eAAe,KAAK,KAAK,QAAQ,WAAW,GAAG;AAEtD,QAAO,KAAK,KAAK,SAAS,YAAU;AAClC,eAAK,gBAAgB,MAAM;AAAA,QAC7B,CAAC;AACD,aAAK,QAAQ,SAAS;AAAA,MACxB;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,SAAS,MAAM,OAAO;AACpB,QAAI,KAAK,gBAAgB,IAAI,GAAG;AAG9B,WAAK,cAAc,cAAY;AAC7B,YAAI,CAAC,SAAS,WAAW,SAAS,SAAS,QAAQ,SAAS,SAAS,OAAO;AAC1E,mBAAS,SAAS,MAAM,KAAK;AAAA,QAC/B;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqCA,IAAI,MAAM,MAAM,UAAU,SAAS,aAAa,UAAU;AACxD,QAAI,KAAK,WAAW;AAClB,YAAM,IAAI,MAAM,6BAA6B;AAAA,IAC/C;AACA,SAAK,wBAAwB,MAAM,MAAM,UAAU,OAAO;AAC1D,UAAM,OAAO;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,QAAQ;AAAA,MACR;AAAA,MACA,UAAU,IAAI,SAAS,MAAM;AAC3B,aAAK,SAAS;AACd,aAAK,gBAAgB,IAAI;AAAA,MAC3B,CAAC;AAAA,IACH;AACA,SAAK,WAAW,KAAK,IAAI;AACzB,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,UAAU,SAAS,cAAc,MAAM;AAC3C,WAAO,KAAK,IAAI,OAAO,MAAM,UAAU,SAAS,aAAa,CAAC,OAAO,UAAU,SAAS,KAAK,SAAS,KAAK,CAAC,EAAE;AAAA,EAChH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwBA,GAAG,MAAM,UAAU,SAAS,cAAc,MAAM;AAC9C,WAAO,KAAK,IAAI,OAAO,MAAM,UAAU,SAAS,aAAa,CAAC,OAAO,UAAU,SAAS,KAAK,SAAS,KAAK,CAAC,EAAE;AAAA,EAChH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA0BA,KAAK,MAAM,UAAU,SAAS,cAAc,MAAM;AAChD,UAAM,IAAI,KAAK,IAAI,MAAM,MAAM,UAAU,SAAS,aAAa,CAAC,OAAO,UAAU;AAC/E,QAAE,SAAS,QAAQ;AACnB,eAAS,KAAK,SAAS,KAAK;AAAA,IAC9B,CAAC;AAED,WAAO,EAAE;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,MAAM,UAAU,SAAS;AAC3B,SAAK,wBAAwB,OAAO,MAAM,UAAU,OAAO;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,SAAS,QAAQ;AACf,QAAI,KAAK,WAAW;AAClB,YAAM,IAAI,MAAM,6BAA6B;AAAA,IAC/C;AACA,QAAI,WAAW,MAAM;AACnB,YAAM,IAAI,MAAM,kDAAkD;AAAA,IACpE;AACA,UAAM,YAAY,CAAC;AACnB,IAAO,KAAK,OAAO,YAAY,OAAK;AAElC,UAAI,CAAC,EAAE,UAAU,EAAE,aAAa;AAC9B,YAAI,EAAE,SAAS,MAAM;AACnB,oBAAU,KAAK,KAAK,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC;AAAA,QAClD,WAAW,EAAE,MAAM;AACjB,oBAAU,KAAK,KAAK,KAAK,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC;AAAA,QACzD,OAAO;AACL,oBAAU,KAAK,KAAK,GAAG,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC;AAAA,QACvD;AAAA,MACF;AAAA,IACF,CAAC;AACD,WAAO,IAAI,cAAc,SAAS;AAAA,EACpC;AACF;;;ACncA,SAAS,gBAAgB,UAAU;AACjC,EAAQE,MAAK,UAAU,CAAC,MAAM,UAAU;AACtC,QAAU,SAAS,KAAK,KAAK,OAAO,MAAM,YAAY,YAAY;AAChE,YAAM,gBAAgB;AACtB,YAAM,QAAQ;AAAA,IAChB;AAAA,EACF,CAAC;AACH;AACO,IAAM,gBAAN,MAAoB;AAAA,EACzB,YAAY,MAAM,UAAU,UAAU;AACpC,WAAO,eAAe,MAAM,aAAa;AAAA,MACvC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,SAAS;AAAA,MACnC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,aAAa;AAAA,MACvC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,SAAK,QAAQ;AACb,SAAK,YAAY;AACjB,SAAK,YAAY;AAAA,EACnB;AAAA,EACA,WAAW;AACT,oBAAgB,KAAK,SAAS;AAAA,EAChC;AAAA,EACA,IAAI,KAAK,UAAU;AACjB,UAAM,QAAQ,KAAK,UAAU,GAAG;AAChC,QAAI,UAAU,QAAW;AACvB,aAAO;AAAA,IACT,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EACA,IAAI,KAAK,OAAO;AACd,SAAK,UAAU,GAAG,IAAI;AAEtB,SAAK,UAAU,cAAc,KAAK,KAAK;AAAA,EACzC;AAAA,EACA,OAAO,KAAK;AACV,WAAO,KAAK,UAAU,GAAG;AAEzB,SAAK,UAAU,cAAc,KAAK,KAAK;AAAA,EACzC;AAAA,EACA,OAAO,UAAU;AACf,IAAQ,KAAK,QAAQ,EAAE,QAAQ,SAAO;AACpC,WAAK,UAAU,GAAG,IAAI,SAAS,GAAG;AAAA,IACpC,CAAC;AACD,SAAK,UAAU,cAAc,KAAK,KAAK;AAAA,EACzC;AAAA,EACA,OAAO,OAAO,MAAM;AAClB,IAAQA,MAAK,KAAK,WAAW,CAAC,KAAK,UAAU;AAC3C,UAAI,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,cAAc,GAAG,GAAG;AAC3C,aAAK,GAAG,IAAI;AACZ,cAAM,OAAO,KAAK,KAAK;AAAA,MACzB;AAAA,IACF,CAAC;AAAA,EACH;AACF;AACO,IAAM,iBAAN,MAAqB;AAAA,EAC1B,YAAY,UAAU;AACpB,WAAO,eAAe,MAAM,aAAa;AAAA,MACvC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,WAAW;AAAA,MACrC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC;AAAA,IACV,CAAC;AACD,SAAK,YAAY;AAAA,EACnB;AAAA,EACA,WAAW;AACT,IAAQA,MAAK,KAAK,SAAS,CAAC,MAAM,UAAU;AAC1C,YAAM,SAAS;AAAA,IACjB,CAAC;AAAA,EACH;AAAA,EACA,OAAO,MAAM;AACX,WAAO,KAAK,QAAQ,IAAI;AAAA,EAC1B;AAAA,EACA,OAAO,MAAM,UAAU;AACrB,UAAM,QAAQ,KAAK,QAAQ,IAAI;AAC/B,QAAI,OAAO;AACT,YAAM,OAAO,QAAQ;AACrB,aAAO;AAAA,IACT,OAAO;AACL,YAAMC,SAAQ,IAAI,cAAc,MAAM,KAAK,WAAW,QAAQ;AAC9D,WAAK,QAAQ,IAAI,IAAIA;AACrB,WAAK,UAAU,cAAc,IAAI;AACjC,aAAOA;AAAA,IACT;AAAA,EACF;AAAA,EACA,OAAO,MAAM;AACX,WAAO,KAAK,QAAQ,IAAI;AACxB,SAAK,UAAU,cAAc,IAAI;AAAA,EACnC;AAAA,EACA,OAAO,QAAQ,OAAO;AACpB,IAAQD,MAAK,KAAK,SAAS,CAAC,KAAK,UAAU;AACzC,UAAI,OAAO,MAAM,OAAO,GAAG;AAC3B,UAAI,QAAQ,MAAM;AAChB,eAAO,MAAM,OAAO,GAAG,IAAI,CAAC;AAAA,MAC9B;AACA,YAAM,QAAQ,OAAO,OAAO,OAAO,KAAK,CAAC,CAAC;AAC1C,YAAM,OAAO,OAAO,IAAI;AAAA,IAC1B,CAAC;AAAA,EACH;AACF;AACO,IAAM,mBAAN,MAAuB;AAAA,EAC5B,cAAc;AACZ,WAAO,eAAe,MAAM,cAAc;AAAA,MACxC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC;AAAA,IACV,CAAC;AAAA,EACH;AAAA,EACA,IAAI,KAAK,UAAU;AACjB,QAAI,YAAY,KAAK,WAAW,GAAG;AACnC,QAAI,cAAc,QAAW;AAC3B,kBAAY,KAAK,WAAW,GAAG,IAAI,CAAC;AAAA,IACtC;AACA,cAAU,KAAK,QAAQ;AACvB,WAAO,IAAI,SAAS,MAAM;AACxB,MAAO,YAAY,WAAW,QAAQ;AACtC,UAAI,UAAU,WAAW,GAAG;AAC1B,eAAO,KAAK,WAAW,GAAG;AAAA,MAC5B;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,OAAO,KAAK;AACV,UAAM,YAAY,KAAK,WAAW,GAAG;AACrC,QAAI,cAAc,QAAW;AAC3B,aAAO,KAAK,WAAW,GAAG;AAAA,IAC5B;AAAA,EACF;AAAA,EACA,OAAO,QAAQ;AACb,UAAM,YAAY,CAAC;AACnB,IAAQA,MAAK,KAAK,YAAY,CAAC,KAAK,cAAc;AAChD,MAAO,KAAK,WAAW,cAAY;AACjC,kBAAU,KAAK,OAAO,SAAS,IAAI,KAAK,QAAQ,CAAC;AAAA,MACnD,CAAC;AAAA,IACH,CAAC;AACD,WAAO,IAAI,cAAc,SAAS;AAAA,EACpC;AACF;AAEO,IAAM,WAAN,MAAM,UAAS;AAAA,EACpB,YAAY,UAAU,QAAQ;AAC5B,WAAO,eAAe,MAAM,aAAa;AAAA,MACvC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,aAAa;AAAA,MACvC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,oBAAoB;AAAA,MAC9C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC;AAAA,IACV,CAAC;AAED,WAAO,eAAe,MAAM,kBAAkB;AAAA,MAC5C,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC;AAAA,IACV,CAAC;AACD,WAAO,eAAe,MAAM,yBAAyB;AAAA,MACnD,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC;AAAA,IACV,CAAC;AACD,WAAO,eAAe,MAAM,aAAa;AAAA,MACvC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC;AAAA,IACV,CAAC;AACD,WAAO,eAAe,MAAM,UAAU;AAAA,MACpC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,IAAI,eAAe,IAAI;AAAA,IAChC,CAAC;AACD,WAAO,eAAe,MAAM,YAAY;AAAA,MACtC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,IAAI,iBAAiB;AAAA,IAC9B,CAAC;AACD,WAAO,eAAe,MAAM,UAAU;AAAA,MACpC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,IAAI,gBAAgB;AAAA,IAC7B,CAAC;AACD,WAAO,eAAe,MAAM,SAAS;AAAA,MACnC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AACA,SAAK,YAAY;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAO,IAAI,UAAU;AACnB,WAAO,IAAI,UAAS,UAAU,IAAI;AAAA,EACpC;AAAA,EACA,WAAW;AACT,oBAAgB,KAAK,SAAS;AAC9B,oBAAgB,KAAK,gBAAgB;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aAAa;AACX,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAIA,UAAU;AACR,QAAI,CAAC,KAAK,WAAW;AACnB,WAAK,YAAY;AACjB,WAAK,SAAS;AAAA,IAChB;AAAA,EACF;AAAA,EACA,iBAAiB;AACf,QAAI,KAAK,WAAW;AAClB,YAAM,IAAI,MAAM,sBAAsB;AAAA,IACxC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,WAAW;AACb,WAAO,KAAK;AAAA,EACd;AAAA,EACA,IAAI,KAAK,UAAU;AACjB,SAAK,eAAe;AACpB,UAAM,QAAQ,KAAK,UAAU,GAAG;AAChC,QAAI,UAAU,QAAW;AACvB,aAAO;AAAA,IACT,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EACA,OAAO,KAAK,OAAO;AACjB,SAAK,eAAe;AACpB,SAAK,UAAU,GAAG,IAAI;AAAA,EACxB;AAAA,EACA,IAAI,KAAK,OAAO;AACd,SAAK,eAAe;AACpB,QAAI,KAAK,UAAU,GAAG,MAAM,OAAO;AACjC,WAAK,OAAO,KAAK,KAAK;AACtB,WAAK,UAAU,QAAQ,YAAU;AAC/B,eAAO,qBAAqB,MAAM,KAAK,KAAK;AAAA,MAC9C,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EACA,OAAO,KAAK;AACV,SAAK,eAAe;AACpB,QAAI,OAAO,KAAK,WAAW;AACzB,aAAO,KAAK,UAAU,GAAG;AACzB,WAAK,UAAU,QAAQ,YAAU;AAC/B,eAAO,wBAAwB,GAAG;AAAA,MACpC,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EACA,YAAY;AACV,SAAK,eAAe;AACpB,IAAQA,MAAK,KAAK,WAAW,CAAC,KAAK,WAAW;AAC5C,WAAK,OAAO,GAAG;AAAA,IACjB,CAAC;AAAA,EACH;AAAA,EACA,WAAW,KAAK,UAAU;AACxB,SAAK,eAAe;AACpB,UAAM,QAAQ,KAAK,iBAAiB,GAAG;AACvC,QAAI,UAAU,QAAW;AACvB,aAAO;AAAA,IACT,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EACA,cAAc,KAAK,OAAO;AACxB,SAAK,eAAe;AACpB,SAAK,iBAAiB,GAAG,IAAI;AAC7B,WAAO;AAAA,EACT;AAAA,EACA,WAAW,KAAK,OAAO;AACrB,SAAK,eAAe;AACpB,QAAI,KAAK,iBAAiB,GAAG,MAAM,OAAO;AACxC,WAAK,cAAc,KAAK,KAAK;AAC7B,WAAK,UAAU,QAAQ,YAAU;AAC/B,eAAO,4BAA4B,MAAM,KAAK,KAAK;AAAA,MACrD,CAAC;AAAA,IACH;AACA,WAAO;AAAA,EACT;AAAA,EACA,cAAc,KAAK;AACjB,SAAK,eAAe;AACpB,QAAI,OAAO,KAAK,kBAAkB;AAChC,aAAO,KAAK,iBAAiB,GAAG;AAChC,WAAK,UAAU,QAAQ,YAAU;AAC/B,eAAO,+BAA+B,GAAG;AAAA,MAC3C,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EACA,OAAO,OAAO;AACZ,SAAK,eAAe;AACpB,IAAQA,MAAK,OAAO,CAAC,KAAKE,WAAU;AAClC,WAAK,IAAI,KAAKA,MAAK;AAAA,IACrB,CAAC;AAAA,EACH;AAAA;AAAA,EAEA,GAAG,KAAK,UAAU;AAChB,SAAK,eAAe;AACpB,QAAI,SAAS,KAAK,eAAe,GAAG;AACpC,QAAI,WAAW,QAAW;AACxB,eAAS,KAAK,eAAe,GAAG,IAAI,CAAC;AAAA,IACvC;AACA,WAAO,KAAK,QAAQ;AACpB,WAAO,IAAI,SAAS,MAAM;AACxB,MAAO,YAAY,QAAQ,QAAQ;AACnC,UAAI,OAAO,WAAW,GAAG;AACvB,eAAO,KAAK,eAAe,GAAG;AAAA,MAChC;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA,EAEA,UAAU,KAAK,UAAU;AACvB,SAAK,eAAe;AACpB,QAAI,SAAS,KAAK,sBAAsB,GAAG;AAC3C,QAAI,WAAW,QAAW;AACxB,eAAS,KAAK,sBAAsB,GAAG,IAAI,CAAC;AAAA,IAC9C;AACA,WAAO,KAAK,QAAQ;AACpB,WAAO,IAAI,SAAS,MAAM;AACxB,MAAO,YAAY,QAAQ,QAAQ;AACnC,UAAI,OAAO,WAAW,GAAG;AACvB,eAAO,KAAK,sBAAsB,GAAG;AAAA,MACvC;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,OAAO,QAAQ,OAAO;AACpB,SAAK,eAAe;AACpB,UAAM,YAAY,CAAC;AACnB,IAAQF,MAAK,KAAK,gBAAgB,CAAC,KAAK,WAAW;AACjD,MAAO,KAAK,QAAQ,WAAS;AAC3B,kBAAU,KAAK,OAAO,GAAG,KAAK,KAAK,CAAC;AAAA,MACtC,CAAC;AAAA,IACH,CAAC;AACD,IAAQA,MAAK,KAAK,uBAAuB,CAAC,KAAK,WAAW;AACxD,MAAO,KAAK,QAAQ,WAAS;AAC3B,kBAAU,KAAK,OAAO,UAAU,KAAK,KAAK,CAAC;AAAA,MAC7C,CAAC;AAAA,IACH,CAAC;AACD,SAAK,OAAO,OAAO,QAAQ,KAAK;AAChC,cAAU,KAAK,KAAK,SAAS,OAAO,MAAM,CAAC;AAC3C,cAAU,KAAK,OAAO,OAAO,SAAS,KAAK,MAAM,CAAC;AAClD,WAAO,IAAI,cAAc,SAAS;AAAA,EACpC;AAAA,EACA,mBAAmB,QAAQ;AACzB,SAAK,eAAe;AACpB,SAAK,UAAU,KAAK,MAAM;AAAA,EAC5B;AAAA,EACA,sBAAsB,QAAQ;AAE5B,IAAO,OAAO,KAAK,WAAW,MAAM;AAAA,EACtC;AAAA,EACA,cAAc,MAAM;AAClB,SAAK,eAAe;AACpB,SAAK,UAAU,QAAQ,YAAU;AAC/B,aAAO,iBAAiB,IAAI;AAAA,IAC9B,CAAC;AAAA,EACH;AACF;;;AC1ZO,SAAS,QAAQ,MAAM,OAAO;AACnC,MAAI,SAAS,OAAO;AAClB,WAAO;AAAA,EACT,WAAW,OAAO,OAAO;AACvB,WAAO;AAAA,EACT,OAAO;AACL,WAAO;AAAA,EACT;AACF;AAIO,SAAS,aAAa,MAAM,OAAO,GAAG;AAC3C,QAAM,aAAa,KAAK;AACxB,QAAM,cAAc,MAAM;AAC1B,QAAM,SAAS,KAAK,IAAI,YAAY,WAAW;AAC/C,WAAS,IAAI,GAAG,IAAI,QAAQ,EAAE,GAAG;AAC/B,UAAM,QAAQ,EAAE,KAAK,CAAC,GAAG,MAAM,CAAC,CAAC;AACjC,QAAI,UAAU,GAAG;AACf,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO,QAAQ,YAAY,WAAW;AACxC;AAgBO,SAAS,cAAc,GAAG,GAAG;AAClC,MAAI,MAAM,GAAG;AACX,WAAO;AAAA,EACT,WAAW,IAAI,GAAG;AAChB,WAAO;AAAA,EACT,OAAO;AACL,WAAO;AAAA,EACT;AACF;;;ACzCO,IAAM,QAAN,MAAY;AAAA,EACjB,YAAY,MAAM,QAAQ;AACxB,WAAO,eAAe,MAAM,SAAS;AAAA,MACnC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO;AAAA,IACT,CAAC;AACD,WAAO,eAAe,MAAM,UAAU;AAAA,MACpC,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,UAAU;AAAA,MACV,OAAO,CAAC;AAAA,IACV,CAAC;AACD,SAAK,QAAQ;AACb,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI,MAAM,yDAAyD;AAAA,IAC3E;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAO,IAAI,MAAM;AACf,UAAM,IAAI,IAAI,KAAK,MAAM,IAAI;AAC7B,MAAE,kBAAkB;AACpB,WAAO;AAAA,EACT;AAAA,EACA,oBAAoB;AAAA,EAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQrB,aAAa,YAAY;AACvB,WAAO,KAAK,OAAO,UAAU;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,QAAQ,YAAY,YAAY,CAAC,GAAG;AAClC,QAAI,QAAQ,KAAK,OAAO,UAAU;AAClC,QAAI,CAAC,OAAO;AACV,cAAQ,KAAK,OAAO,UAAU,IAAI,CAAC;AAAA,IACrC;AACA,cAAU,KAAY,OAAO;AAC7B,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,IACF,IAAW,eAAe,OAAO,OAAK;AACpC,YAAM,QAAe,QAAQ,EAAE,KAAK,QAAQ,UAAU,MAAM;AAC5D,UAAI,UAAU,GAAG;AACf,eAAc,aAAa,EAAE,MAAM,WAAkB,OAAO;AAAA,MAC9D,OAAO;AACL,eAAO;AAAA,MACT;AAAA,IACF,CAAC;AACD,QAAI,OAAO;AACT,aAAO,MAAM,KAAK,EAAE;AAAA,IACtB,OAAO;AACL,YAAM,WAAW,SAAS,IAAI,CAAC,CAAC;AAChC,YAAM,OAAO,OAAO,GAAG;AAAA,QACrB,MAAM;AAAA,QACN;AAAA,MACF,CAAC;AACD,aAAO;AAAA,IACT;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,KAAK,YAAY,YAAY,CAAC,GAAG;AAC/B,WAAO,KAAK,QAAQ,YAAY,SAAS;AAAA,EAC3C;AACF;",
  "names": ["copy", "each", "eachContinue", "copy", "each", "eachContinue", "each", "state", "value"]
}
